------- FILE pitfall.asm LEVEL 1 PASS 2
      1  1000 ????						; ***	P I T F A L L !  ***
      2  1000 ????						; Copyright 1982 Activision
      3  1000 ????						; Designer: David Crane
      4  1000 ????
      5  1000 ????						; Analyzed, labeled and commented
      6  1000 ????						;  by Thomas Jentzsch (JTZ)
      7  1000 ????						; Last Update: 09.10.2001 (v0.9)
      8  1000 ????
      9  1000 ????						; Scene generation:
     10  1000 ????						; The 255 scenes are randomly generated through a "bidirecional" LFSR. This
     11  1000 ????						; means, that the process of generating the next random number is reversible,
     12  1000 ????						; which is necessary to allow traveling though the jungle in both directions.
     13  1000 ????						; The random number defines the scene with the following bits:
     14  1000 ????						; - 0..2: type of object(s) on the ground (logs, fire, cobra, treasure etc.)
     15  1000 ????						; - 3..5: type of scene (holes, pits, crocdiles, treasures etc.)
     16  1000 ????						; - 6..7: type of the tree pattern
     17  1000 ????						; - 7	 : position of the wall (left or right)
     18  1000 ????						;
     19  1000 ????						; Kernel:
     20  1000 ????						; The kernel is very large. There are special loops for several horizontal
     21  1000 ????						; stripes. Before the main kernel the game draws the score and the lives with
     22  1000 ????						; the timer. Then follow nine stripes, which do:
     23  1000 ????						; 1. draw the trees and the branches
     24  1000 ????						; 2. draw the top of the liana and x-position Harry and the ground object
     25  1000 ????						; 3. draw Harry and the middle of the liana
     26  1000 ????						; 4. draw Harry and the bottom of the liana
     27  1000 ????						; 5. draw Harry and the top of the ground object
     28  1000 ????						; 6. draw the bottom of the ground object and the top of the holes/pits (no Harry)
     29  1000 ????						; 7. draw Harry, holes/pits and the top of the ladder
     30  1000 ????						; 8. draw Harry, the ladder and the top of the wall
     31  1000 ????						; 9. draw Harry, the bottom of the ladder and the wall or the scorpion
     32  1000 ????						; Finally after that, the copyright message is drawn.
     33  1000 ????						;
     34  1000 ????						; Misc:
     35  1000 ????						; - The game speeds aren't adjusted for PAL, the PAL game run's about 16% slower.
     36  1000 ????						;   (This seems to be true for most PAL conversions.).
     37  1000 ????						; - The timer is also running slower, it would have been quite easy to adjust
     38  1000 ????						;   that (s. FRAMERATE etc.).
     39  1000 ????
     40  1000 ????
     41  1000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  1000 ????				      include	vcs.h
      1  1000 ????						; VCS.H
      2  1000 ????						; Version 1.06, 06/SEP/2020
      3  1000 ????
      4  1000 ????	       00 6a	   VERSION_VCS =	106
      5  1000 ????
      6  1000 ????						; THIS IS *THE* "STANDARD" VCS.H
      7  1000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  1000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  1000 ????						;
     10  1000 ????						; This file defines hardware registers and memory mapping for the
     11  1000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  1000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  1000 ????						; available at at https://dasm-assembler.github.io/
     14  1000 ????						;
     15  1000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  1000 ????						; contents, or would like ot add something, please report as an issue at...
     17  1000 ????						; https://github.com/dasm-assembler/dasm/issues
     18  1000 ????
     19  1000 ????						;
     20  1000 ????						; Latest Revisions...
     21  1000 ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  1000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  1000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  1000 ????						;			    This will allow conditional code to verify VCS.H being
     25  1000 ????						;			    used for code assembly.
     26  1000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  1000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  1000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  1000 ????						;			 readability issue, and binary compatibility with disassembled
     30  1000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  1000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  1000 ????						;			 which was broken by the use of segments in this file, as
     33  1000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  1000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  1000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  1000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  1000 ????						;						   it is safe to leave it undefined, and the base address will
     38  1000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  1000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  1000 ????						;			  - register definitions are now generated through assignment
     41  1000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  1000 ????						;			    address architecture.
     43  1000 ????						; 1.0	22/MAR/2003		Initial release
     44  1000 ????
     45  1000 ????
     46  1000 ????						;-------------------------------------------------------------------------------
     47  1000 ????
     48  1000 ????						; TIA_BASE_ADDRESS
     49  1000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  1000 ????						; Normally 0, the base address should (externally, before including this file)
     51  1000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  1000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  1000 ????						; < $40 as a bankswitch.
     54  1000 ????
     55  1000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  1000 ????			  -TIA_BASE_ADDRESS =	0
     57  1000 ????				      ENDIF
     58  1000 ????
     59  1000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  1000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  1000 ????						; *OR* by declaring the label before including this file, eg:
     62  1000 ????						; TIA_BASE_ADDRESS = $40
     63  1000 ????						;   include "vcs.h"
     64  1000 ????
     65  1000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  1000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  1000 ????						; for the mirrored ROM hardware registers.
     68  1000 ????
     69  1000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  1000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  1000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  1000 ????
     73  1000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  1000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  1000 ????				      ENDIF
     76  1000 ????
     77  1000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  1000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  1000 ????				      ENDIF
     80  1000 ????
     81  1000 ????						;-------------------------------------------------------------------------------
     82  1000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE pitfall.asm
     43  0000 ????
     44  0000 ????
     45  0000 ????						;===============================================================================
     46  0000 ????						; A S S E M B L E R - S W I T C H E S
     47  0000 ????						;===============================================================================
     48  0000 ????
     49  0000 ????	       00 00	   OPTIMIZE   =	0	; enable some possible optimizations
     50  0000 ????	       00 01	   FILL_OPT   =	1	; fill optimized bytes with NOPs
     51  0000 ????	       00 01	   SCREENSAVER =	1	; compile with screensaver code
     52  0000 ????	       00 00	   TRAINER    =	0	; enable training mode
     53  0000 ????	       00 00	   NTSC       =	0	; compile for NTSC
     54  0000 ????			  -	      IF	NTSC
     55  0000 ????			  -FRAMERATE  =	60
     56  0000 ????			  -STARTTIME  =	$20
     57  0000 ????				      ELSE
     58  0000 ????	       00 3c	   FRAMERATE  =	60	; 50	 use these values to..
     59  0000 ????	       00 20	   STARTTIME  =	$20	; $24	 ..adjust the PAL timer
     60  0000 ????				      ENDIF
     61  0000 ????
     62  0000 ????
     63  0000 ????						;===============================================================================
     64  0000 ????						; C O N S T A N T S
     65  0000 ????						;===============================================================================
     66  0000 ????
     67  0000 ????						; initial value for the random number generator:
     68  0000 ????	       00 c4	   RAND_SEED  =	$c4	; defines the start scene of the game
     69  0000 ????
     70  0000 ????						; color constants:
     71  0000 ????			  -	      IF	NTSC
     72  0000 ????			  -BROWN      =	$12
     73  0000 ????			  -YELLOW     =	$1e
     74  0000 ????			  -ORANGE     =	$3e
     75  0000 ????			  -RED	      =	$48
     76  0000 ????			  -GREEN      =	$d6
     77  0000 ????			  -BLUE       =	$a4
     78  0000 ????			  -YELLOW_GREEN =	$c8
     79  0000 ????			  -PINK       =	$4a
     80  0000 ????				      ELSE
     81  0000 ????	       00 22	   BROWN      =	$22
     82  0000 ????	       00 2e	   YELLOW     =	$2e
     83  0000 ????	       00 4e	   ORANGE     =	$4e
     84  0000 ????	       00 68	   RED	      =	$68
     85  0000 ????	       00 56	   GREEN      =	$56
     86  0000 ????	       00 b4	   BLUE       =	$b4
     87  0000 ????	       00 78	   YELLOW_GREEN =	$78
     88  0000 ????	       00 4a	   PINK       =	$4a
     89  0000 ????				      ENDIF
     90  0000 ????	       00 00	   BLACK      =	$00
     91  0000 ????	       00 06	   GREY       =	$06
     92  0000 ????	       00 0e	   WHITE      =	$0e
     93  0000 ????	       00 52	   DARK_GREEN =	GREEN - $04
     94  0000 ????	       00 62	   DARK_RED   =	RED - $06
     95  0000 ????
     96  0000 ????						; x constants:
     97  0000 ????	       00 a0	   SCREENWIDTH =	160
     98  0000 ????	       00 08	   XMIN_HARRY =	8	; minimal position before next left scene
     99  0000 ????	       00 94	   XMAX_HARRY =	148	; maximal position before next right scene
    100  0000 ????
    101  0000 ????						; y-size constants:
    102  0000 ????	       00 16	   HARRY_H    =	22	; height of Harry
    103  0000 ????	       00 10	   OBJECT_H   =	16	; maximum object height
    104  0000 ????	       00 08	   DIGIT_H    =	8	; height of the score and time digits
    105  0000 ????	       00 10	   COPYRIGHT_H =	16	; height of copyright message
    106  0000 ????
    107  0000 ????						; some defined y-positions of Harry:
    108  0000 ????	       00 20	   JUNGLE_GROUND =	32
    109  0000 ????	       00 56	   UNDER_GROUND =	86
    110  0000 ????
    111  0000 ????						; positions of Harry at ladder:
    112  0000 ????	       00 0b	   LADDER_TOP =	11
    113  0000 ????	       00 16	   LADDER_BOTTOM =	22
    114  0000 ????
    115  0000 ????						; lenght of a jump:
    116  0000 ????	       00 20	   JUMP_LEN   =	32
    117  0000 ????
    118  0000 ????						; Harry pattern ids:
    119  0000 ????	       00 00	   ID_KNEEING =	0
    120  0000 ????	       00 04	   ID_RUNNING4 =	4	; 0..3 are running ids too
    121  0000 ????	       00 05	   ID_STANDING =	5
    122  0000 ????	       00 06	   ID_SWINGING =	6
    123  0000 ????	       00 07	   ID_CLIMBING =	7
    124  0000 ????
    125  0000 ????						; objectType ids:
    126  0000 ????	       00 04	   ID_STATIONARY =	4	; stationary logs (0..5 are log types)
    127  0000 ????	       00 06	   ID_FIRE    =	6
    128  0000 ????	       00 07	   ID_COBRA   =	7
    129  0000 ????	       00 08	   ID_TREASURES =	8	; 8..11 are treasures
    130  0000 ????	       00 0c	   ID_NOTHING =	12
    131  0000 ????
    132  0000 ????						; sceneType constants:
    133  0000 ????	       00 00	   HOLE1_SCENE =	0
    134  0000 ????	       00 01	   HOLE3_SCENE =	1
    135  0000 ????	       00 04	   CROCO_SCENE =	4
    136  0000 ????	       00 05	   TREASURE_SCENE =	5
    137  0000 ????
    138  0000 ????						; flags for ladder:
    139  0000 ????	       00 00	   NOLADDER   =	%00000000
    140  0000 ????	       00 ff	   WITHLADDER =	%11111111
    141  0000 ????
    142  0000 ????						; flags for pit color:
    143  0000 ????	       00 00	   BLUEPIT    =	%00000000
    144  0000 ????	       00 80	   BLACKPIT   =	%10000000
    145  0000 ????
    146  0000 ????						; offsets in SoundTab for tunes:
    147  0000 ????	       00 20	   SOUND_JUMP =	$20	; Harry is jumping
    148  0000 ????	       00 25	   SOUND_TREASURE =	$25	; Harry is collecting a treasure
    149  0000 ????	       00 31	   SOUND_DEAD =	$31	; Harry is killed
    150  0000 ????	       00 53	   SOUND_FALLING =	$53	; Harry is falling into a hole
    151  0000 ????
    152  0000 ????						; values for NUSIZx:
    153  0000 ????	       00 00	   ONE_COPY   =	%000
    154  0000 ????	       00 01	   TWO_COPIES =	%001
    155  0000 ????	       00 02	   TWO_WIDE_COPIES =	%010
    156  0000 ????	       00 03	   THREE_COPIES =	%011
    157  0000 ????	       00 05	   DOUBLE_SIZE =	%101
    158  0000 ????	       00 06	   THREE_MED_COPIES =	%110
    159  0000 ????	       00 07	   QUAD_SIZE  =	%111
    160  0000 ????
    161  0000 ????						; mask for SWCHB:
    162  0000 ????	       00 08	   BW_MASK    =	%1000	; black and white bit
    163  0000 ????
    164  0000 ????						; SWCHA joystick bits:
    165  0000 ????	       00 07	   MOVE_RIGHT =	%0111
    166  0000 ????	       00 0b	   MOVE_LEFT  =	%1011
    167  0000 ????	       00 0d	   MOVE_DOWN  =	%1101
    168  0000 ????	       00 0e	   MOVE_UP    =	%1110
    169  0000 ????	       00 0f	   NO_MOVE    =	%1111
    170  0000 ????	       00 08	   JOY_RIGHT  =	~MOVE_RIGHT & NO_MOVE
    171  0000 ????	       00 04	   JOY_LEFT   =	~MOVE_LEFT & NO_MOVE
    172  0000 ????	       00 02	   JOY_DOWN   =	~MOVE_DOWN & NO_MOVE
    173  0000 ????	       00 01	   JOY_UP     =	~MOVE_UP & NO_MOVE
    174  0000 ????	       00 0c	   JOY_HORZ   =	JOY_RIGHT|JOY_LEFT
    175  0000 ????	       00 03	   JOY_VERT   =	JOY_DOWN |JOY_UP
    176  0000 ????
    177  0000 ????						; values for ENAxy:
    178  0000 ????	       00 00	   DISABLE    =	%00
    179  0000 ????	       00 02	   ENABLE     =	%10	; value for enabling a missile
    180  0000 ????
    181  0000 ????						; values for REFPx:
    182  0000 ????	       00 00	   NOREFLECT  =	%0000
    183  0000 ????	       00 08	   REFLECT    =	%1000
    184  0000 ????
    185  0000 ????
    186  0000 ????						;===============================================================================
    187  0000 ????						; Z P - V A R I A B L E S
    188  0000 ????						;===============================================================================
    189  0000 ????
    190 U00f9 ????				      SEG.U	Variables
    191 U0080					      ORG	$80
    192 U0080
    193 U0080		       00	   livesPat   .byte.b		;	     number of lives, stored as displayed pattern ($a0 = 3, $80 = 2, $00 = 1)
    194 U0081		       00	   random     .byte.b		;	     all scenes are generated randomly with this
    195 U0082		       00	   random2    .byte.b		;	     used for random object animation
    196 U0083		       00	   joystick   .byte.b		;	     stores joystick directions
    197 U0084		       00	   fireButton .byte.b		;	     stores fire button state
    198 U0085		       00	   hitLiana   .byte.b		;	     Harry collided with liana? (bit 6 = 1 -> yes)
    199 U0086		       00	   cxHarry    .byte.b		;	     Harry's collisions (stored but _never_ read!)
    200 U0087					      IF	SCREENSAVER
    201 U0087		       00	   SS_XOR     .byte.b		;	     change colors in screensaver mode (0/$01..$ff)
    202 U0088		       00	   SS_Mask    .byte.b		;	     darker colors in screensaver mode ($ff/$f7)
    203 U0089				  -	      ELSE
    204 U0089				  -dummy      .word
    205 U0089					      ENDIF
    206 U0089		       00 00 00 00*colorLst   ds	9	;	     some (mostly constant!?) colors
    207 U0092		       00	   lianaBottom .byte.b		;	     bottom row of liana
    208 U0093		       00	   objectType .byte.b		;	     type of the objects on the ground (hazards & treasures)
    209 U0094		       00	   sceneType  .byte.b		;	     type of the scene (0..7
    210 U0095		       00 00 00    HMFineLst  ds	3	;	     fine positioning value for: Harry, ground-object, underground-object
    211 U0098		       00 00 00    HMCoarseLst ds	3	;	     coars positioning value for: Harry, ground-object, underground-object
    212 U009b		       00	   posLeftBranch .byte.b		;	     values for positioning left branch graphics
    213 U009c		       00	   posRightBranch .byte.b		;	     values for positioning right branch graphics
    214 U009d		       00	   ladderFlag .byte.b		;	     0 = no ladder, $ff = with ladder
    215 U009e		       00	   noGameScroll .byte.b		;	     0 = game is running
    216 U009f		       00	   PF2QuickSand .byte.b		;	     PF2 data for top quicksand row
    217 U00a0		       00 00 00 00*PF2Lst     ds	7	;	     copied pit pattern data
    218 U00a7		       00 00 00 00*objColLst  ds	7	;	     copied object colors
    219 U00ae		       00 00 00 00*objPatLst  ds	7	;	     copied object patterns
    220 U00b5		       00 00	   harryPatPtr .word.w		; = $b5     pointer to Pitfall Harry patterns
    221 U00b7		       00 00	   objPatPtr  .word.w		;	     pointer to object (hazards, treasure) patterns
    222 U00b9		       00 00	   harryColPtr .word.w		;	     pointer to Pitfall Harry colors
    223 U00bb		       00 00	   objColPtr  .word.w		;	     pointer to object (hazards, treasure) colors
    224 U00bd		       00 00	   wallPatPtr .word.w		;	     pointer to wall patterns
    225 U00bf		       00 00	   wallColPtr .word.w		;	     pointer to wall colors
    226 U00c1		       00 00	   undrPatPtr .word.w		;	     pointer to underground object (wall, scorpion) patterns
    227 U00c3		       00 00	   undrColPtr .word.w		;	     pointer to underground object (wall, scorpion) colors
    228 U00c5		       00 00 00 00*digitPtr   ds.w	6	;	     pointers for score display
    229 U00d1					      IF	SCREENSAVER
    230 U00d1		       00	   SS_Delay   .byte.b		; = $d1
    231 U00d2		       00	   SS_DelayLo .byte.b
    232 U00d3					      ENDIF
    233 U00d3		       00	   frameCnt   .byte.b		;	     frame counter (increased every frame)
    234 U00d4		       00	   nusize1    .byte.b		;	     number of ground-objects
    235 U00d5		       00	   scoreHi    .byte.b		;	     3 BCD score bytes
    236 U00d6		       00	   scoreMed   .byte.b
    237 U00d7		       00	   scoreLo    .byte.b
    238 U00d8		       00	   timerHi    .byte.b		;	     2 BCD timer bytes
    239 U00d9		       00	   timerMed   .byte.b
    240 U00da		       00	   timerLo    .byte.b		;	     decease timer every 60th frame
    241 U00db		       00	   hmblSum    .byte.b		;	     used to generate liana line
    242 U00dc		       00	   hmblAdd    .byte.b		;	     depends on the liana angle
    243 U00dd		       00	   hmblDir    .byte.b		;	     move liana +/-1
    244 U00de		       00	   lianaPosHi .byte.b		;	     high x-position of liana bottom
    245 U00df		       00	   lianaPosLo .byte.b		;	     low x-position of liana bottom
    246 U00e0		       00	   soundIdx   .byte.b		;	     index of sound-table (0 = no sound)
    247 U00e1		       00	   xPosHarry  .byte.b		;	     x-position of Pitfall Harry
    248 U00e2		       00	   xPosObject .byte.b		;	     x-position of hazards & treasures
    249 U00e3		       00	   xPosScorpion .byte.b		;	     x-position of the scorpion (and the wall)
    250 U00e4		       00	   patIdHarry .byte.b		;	     id of the animation for Harry
    251 U00e5		       00	   reflectHarry .byte.b		;	     reflect Harry graphics
    252 U00e6		       00	   reflectScorpion .byte.b		;	     reflect scorpion graphics
    253 U00e7		       00	   jumpIndex  .byte.b		;	     index of jump-table (0..32)
    254 U00e8		       00	   oldJoystick .byte.b		;	     saved old joystick direction
    255 U00e9		       00	   yPosHarry  .byte.b		;	     y-position of Pitfall Harry
    256 U00ea		       00	   atLiana    .byte.b		;	     Harry at liana? (0 = no, -1 = yes)
    257 U00eb		       00	   treePat    .byte.b		;	     id of the leaves pattern (0..3)
    258 U00ec		       00	   climbPos   .byte.b		;	     position of Harry at ladder (0/11..22)
    259 U00ed		       00 00 00 00 treasureBits ds	4	;	     remember which treasures haven't been found
    260 U00f1		       00	   treasureCnt .byte.b		; = $f1     number of remaining treasures-1
    261 U00f2		       00	   patOfsHarry .byte.b		;	     pattern offset (5 while kneeing, 0 else)
    262 U00f3		       00	   soundDelay .byte.b		;	     play a new note every 4th frame
    263 U00f4		       00	   xPosQuickSand .byte.b		;	     border of quicksand
    264 U00f5		       00	   jumpMode   .byte.b		; = $f5     similar to jumpIndex (JTZ: superfluous?)
    265 U00f6		       00	   temp1      .byte.b
    266 U00f7		       00	   temp2      .byte.b
    267 U00f8		       00	   temp3      .byte.b
    268 U00f9
    269 U00f9
    270 U00f9							;===============================================================================
    271 U00f9							; M A C R O S
    272 U00f9							;===============================================================================
    273 U00f9
    274 U00f9					      MAC	fill_nop
    275 U00f9					      IF	FILL_OPT
    276 U00f9					      REPEAT	{1}
    277 U00f9					      NOP
    278 U00f9					      REPEND
    279 U00f9					      ENDIF
    280 U00f9					      ENDM
    281 U00f9
    282 U00f9
    283 U00f9							;===============================================================================
    284 U00f9							; R O M - C O D E (Part 1)
    285 U00f9							;===============================================================================
    286 U00f9
    287  1000 ????				      SEG	Code
    288  f000					      ORG	$f000, 0
    289  f000
    290  f000				   START
    291  f000		       78		      sei		; 2
    292  f001		       d8		      cld		; 2
    293  f002		       a2 00		      ldx	#$00	; 2
    294  f004				   Reset
    295  f004		       a9 00		      lda	#$00	; 2
    296  f006				   .loopClear
    297  f006		       95 00		      sta	$00,x	; 4
    298  f008		       9a		      txs		; 2
    299  f009		       e8		      inx		; 2
    300  f00a		       d0 fa		      bne	.loopClear	; 2³
    301  f00c
    302  f00c		       20 75 fa 	      jsr	InitGame	; 6
    303  f00f
    304  f00f				   MainLoop
    305  f00f		       a2 08		      ldx	#8	; 2
    306  f011				   .loopColors
    307  f011		       bd b8 ff 	      lda	ColorTab,x	; 4
    308  f014					      IF	SCREENSAVER
    309  f014		       45 87		      eor	SS_XOR	; 3
    310  f016		       25 88		      and	SS_Mask	; 3
    311  f018				  -	      ELSE
    312  f018				  -	      FILL_NOP	4
    313  f018					      ENDIF
    314  f018		       95 89		      sta	colorLst,x	; 4		     store color in list
    315  f01a		       e0 04		      cpx	#4	; 2
    316  f01c		       b0 02		      bcs	.skipTIA	; 2³
    317  f01e		       95 06		      sta	COLUP0,x	; 4		     store color in TIA too
    318  f020				   .skipTIA
    319  f020		       ca		      dex		; 2
    320  f021		       10 ee		      bpl	.loopColors	; 2³
    321  f023
    322  f023							; process underground objects (scorpion, wall):
    323  f023							; Only one object at a time is visible, but two different
    324  f023							; pointer sets are used, because the wall is much taller than
    325  f023							; the scorpion.
    326  f023							; JTZ: two color pointers aren't necessary!
    327  f023		       a0 50		      ldy	#<ScorpionColor	; 2
    328  f025		       a2 90		      ldx	#<Scorpion0	; 2
    329  f027		       a5 e3		      lda	xPosScorpion	; 3
    330  f029		       4a		      lsr		; 2		     animate scorpion
    331  f02a		       90 02		      bcc	.scorpion0	; 2³
    332  f02c		       a2 a0		      ldx	#<Scorpion1	; 2
    333  f02e				   .scorpion0
    334  f02e		       a9 f0		      lda	#<Nothing	; 2
    335  f030		       85 bd		      sta	wallPatPtr	; 3		     clear ladder data pointer
    336  f032
    337  f032		       a5 9d		      lda	ladderFlag	; 3		     ladder in scene
    338  f034		       f0 08		      beq	.noLadder	; 2³		       no, skip
    339  f036		       a0 60		      ldy	#<WallColor	; 2		      yes,..
    340  f038		       a2 b0		      ldx	#<Wall	; 2
    341  f03a		       86 bd		      stx	wallPatPtr	; 3		     ..load pointers at ladder data
    342  f03c		       84 bf		      sty	wallColPtr	; 3
    343  f03e				   .noLadder
    344  f03e		       86 c1		      stx	undrPatPtr	; 3		     set scorpion or ladder pointers
    345  f040		       84 c3		      sty	undrColPtr	; 3
    346  f042
    347  f042							; calculate pits, quicksand etc.:
    348  f042		       a6 94		      ldx	sceneType	; 3
    349  f044		       bd 95 fc 	      lda	LadderTab,x	; 4		     blue swamp?
    350  f047		       10 04		      bpl	.noPit	; 2³		       yes, skip
    351  f049		       a5 8d		      lda	colorLst+4	; 3		      no, black tar pit
    352  f04b		       85 91		      sta	colorLst+8	; 3
    353  f04d				   .noPit
    354  f04d		       a0 00		      ldy	#0	; 2		     disable quicksand
    355  f04f		       bd e6 ff 	      lda	GroundTypeTab,x	; 4
    356  f052		       10 29		      bpl	.noQuickSand	; 2³
    357  f054		       a5 e9		      lda	yPosHarry	; 3
    358  f056		       c9 37		      cmp	#55	; 2		     Harry in underground?
    359  f058		       b0 04		      bcs	.doQuickSand	; 2³		       yes, animate quicksand
    360  f05a		       c9 21		      cmp	#JUNGLE_GROUND+1	; 2		     stop quicksand animation when..
    361  f05c		       b0 3a		      bcs	.stopQuickSand	; 2³		      ..Harry is falling into the pit
    362  f05e				   .doQuickSand
    363  f05e		       a5 9e		      lda	noGameScroll	; 3		     game running?
    364  f060		       d0 36		      bne	.stopQuickSand	; 2³		       no, skip
    365  f062		       a5 d3		      lda	frameCnt	; 3
    366  f064		       4a		      lsr		; 2
    367  f065		       4a		      lsr		; 2
    368  f066		       48		      pha		; 3
    369  f067		       4a		      lsr		; 2
    370  f068		       4a		      lsr		; 2
    371  f069		       4a		      lsr		; 2
    372  f06a		       4a		      lsr		; 2
    373  f06b		       aa		      tax		; 2		     x = framecount / 64
    374  f06c		       68		      pla		; 4		     only bits 2..5 of framecounter used
    375  f06d		       3d 92 fc 	      and	QuickSandTab+2,x	; 4		     calculate size of the quicksand pit
    376  f070		       5d 90 fc 	      eor	QuickSandTab,x	; 4
    377  f073		       48		      pha		; 3
    378  f074		       a8		      tay		; 2
    379  f075		       b9 06 fc 	      lda	QuickSandSize,y	; 4
    380  f078		       a8		      tay		; 2
    381  f079		       68		      pla		; 4
    382  f07a		       18		      clc		; 2
    383  f07b		       69 10		      adc	#16	; 2
    384  f07d				   .noQuickSand
    385  f07d		       18		      clc		; 2
    386  f07e		       84 f4		      sty	xPosQuickSand	; 3
    387  f080		       69 06		      adc	#6	; 2
    388  f082		       a8		      tay		; 2
    389  f083		       a2 06		      ldx	#6	; 2
    390  f085		       a5 9d		      lda	ladderFlag	; 3		     no swamp etc. when ladder
    391  f087		       49 ff		      eor	#$ff	; 2
    392  f089		       85 f6		      sta	temp1	; 3
    393  f08b				   .loopPF2Lst
    394  f08b		       b9 de fb 	      lda	PF2PatTab,y	; 4
    395  f08e		       95 a0		      sta	PF2Lst,x	; 4
    396  f090		       05 f6		      ora	temp1	; 3
    397  f092		       85 9f		      sta	PF2QuickSand	; 3
    398  f094		       88		      dey		; 2
    399  f095		       ca		      dex		; 2
    400  f096		       10 f3		      bpl	.loopPF2Lst	; 2³
    401  f098				   .stopQuickSand
    402  f098
    403  f098							; calculate x-positioning values:
    404  f098		       a2 02		      ldx	#2	; 2
    405  f09a		       a9 00		      lda	#0	; 2
    406  f09c					      IF	SCREENSAVER
    407  f09c		       a4 d1		      ldy	SS_Delay	; 3		     game running?
    408  f09e		       30 02		      bmi	.skipHarryPos	; 2³		       no, don't draw Harry
    409  f0a0				  -	      ELSE
    410  f0a0				  -	      ldy	noGameScroll	;		     TODO: bugfix, wall isn't drawn
    411  f0a0				  -	      bne	.skipHarryPos	; 2³		       no, don't draw Harry
    412  f0a0					      ENDIF
    413  f0a0
    414  f0a0				   .loopPos
    415  f0a0		       b5 e1		      lda	xPosHarry,x	; 4
    416  f0a2				   .skipHarryPos
    417  f0a2		       20 88 f3 	      jsr	CalcPosX	; 6
    418  f0a5		       95 95		      sta	HMFineLst,x	; 4
    419  f0a7		       94 98		      sty	HMCoarseLst,x	; 4
    420  f0a9		       86 db		      stx	hmblSum	; 3		     -> hmblSum = 0
    421  f0ab		       ca		      dex		; 2
    422  f0ac		       10 f2		      bpl	.loopPos	; 2³
    423  f0ae
    424  f0ae							; load branches x-positioning values:
    425  f0ae		       a6 eb		      ldx	treePat	; 3
    426  f0b0		       bd d6 fb 	      lda	BranchPosLTab,x	; 4
    427  f0b3		       85 9b		      sta	posLeftBranch	; 3
    428  f0b5		       bd da fb 	      lda	BranchPosRTab,x	; 4
    429  f0b8		       85 9c		      sta	posRightBranch	; 3
    430  f0ba
    431  f0ba							; copy bottom object data:
    432  f0ba		       a0 0e		      ldy	#14	; 2
    433  f0bc		       a2 06		      ldx	#6	; 2
    434  f0be				   .loopObjLst
    435  f0be		       b1 bb		      lda	(objColPtr),y	; 5
    436  f0c0					      IF	SCREENSAVER
    437  f0c0		       45 87		      eor	SS_XOR	; 3
    438  f0c2		       25 88		      and	SS_Mask	; 3
    439  f0c4				  -	      ELSE
    440  f0c4				  -	      FILL_NOP	4
    441  f0c4					      ENDIF
    442  f0c4		       95 a7		      sta	objColLst,x	; 4
    443  f0c6		       b1 b7		      lda	(objPatPtr),y	; 5
    444  f0c8		       95 ae		      sta	objPatLst,x	; 4
    445  f0ca		       88		      dey		; 2
    446  f0cb		       ca		      dex		; 2
    447  f0cc		       10 f0		      bpl	.loopObjLst	; 2³
    448  f0ce
    449  f0ce				   .waitTim
    450  f0ce		       ad 84 02 	      lda	INTIM	; 4
    451  f0d1		       d0 fb		      bne	.waitTim	; 2³
    452  f0d3		       85 02		      sta	WSYNC	; 3
    453  f0d5							;---------------------------------------
    454  f0d5		       85 2a		      sta	HMOVE	; 3
    455  f0d7		       85 01		      sta	VBLANK	; 3
    456  f0d9		       85 2c		      sta	CXCLR	; 3
    457  f0db		       85 f8		      sta	temp3	; 3		     don't show anything before score
    458  f0dd		       20 0a f3 	      jsr	ShowDigits	; 6		     draw score
    459  f0e0
    460  f0e0							; set digitPtrs for timer:
    461  f0e0		       a2 03		      ldx	#timerHi-scoreHi	; 2
    462  f0e2		       a0 02		      ldy	#2	; 2		     minutes
    463  f0e4		       20 b6 f3 	      jsr	BCD2DigitPtrs	; 6
    464  f0e7		       e8		      inx		; 2		     seconds
    465  f0e8		       a0 08		      ldy	#8	; 2
    466  f0ea		       20 b6 f3 	      jsr	BCD2DigitPtrs	; 6
    467  f0ed		       a5 80		      lda	livesPat	; 3		     show lives before time
    468  f0ef		       85 f8		      sta	temp3	; 3
    469  f0f1		       a9 58		      lda	#<Space	; 2
    470  f0f3		       85 c5		      sta	digitPtr	; 3
    471  f0f5		       a4 c7		      ldy	digitPtr+2	; 3
    472  f0f7		       d0 02		      bne	.noSpace	; 2³		      replaced leading zero in timer with space
    473  f0f9		       85 c7		      sta	digitPtr+2	; 3
    474  f0fb				   .noSpace
    475  f0fb		       a9 50		      lda	#<DoublePoint	; 2
    476  f0fd		       85 cb		      sta	digitPtr+6	; 3
    477  f0ff		       20 0a f3 	      jsr	ShowDigits	; 6		     draw lives and timer
    478  f102		       85 02		      sta	WSYNC	; 3
    479  f104							;---------------------------------------
    480  f104							; Here starts the main kernel. Actually there are nine(!)
    481  f104							; specialized kernel loops. Together with extra code before and
    482  f104							; after the loops, this makes the kernel very huge [~900 bytes).
    483  f104
    484  f104							; draw branches at top of the logs:
    485  f104		       85 2a		      sta	HMOVE	; 3
    486  f106		       a9 00		      lda	#$00	; 2
    487  f108		       85 26		      sta	VDELP1	; 3		     disable vertical delay for object
    488  f10a		       85 1b		      sta	GRP0	; 3
    489  f10c		       85 1c		      sta	GRP1	; 3
    490  f10e		       a5 8e		      lda	colorLst+5	; 3		     branches color (always BROWN-2)
    491  f110		       85 06		      sta	COLUP0	; 3
    492  f112		       85 07		      sta	COLUP1	; 3
    493  f114		       a9 02		      lda	#TWO_WIDE_COPIES	; 2		     draw four branches
    494  f116		       85 04		      sta	NUSIZ0	; 3
    495  f118		       85 05		      sta	NUSIZ1	; 3
    496  f11a		       a5 9b		      lda	posLeftBranch	; 3
    497  f11c		       29 0f		      and	#$0f	; 2
    498  f11e		       aa		      tax		; 2		     x = coarse x-positioning value of left branch
    499  f11f		       a5 9c		      lda	posRightBranch	; 3
    500  f121		       29 0f		      and	#$0f	; 2
    501  f123		       a8		      tay		; 2		     y = coarse x-positioning value of right branch
    502  f124		       85 02		      sta	WSYNC	; 3
    503  f126							;---------------------------------------
    504  f126		       85 2a		      sta	HMOVE	; 3
    505  f128		       ea		      nop		; 2
    506  f129				   .waitPos0
    507  f129		       ca		      dex		; 2
    508  f12a		       10 fd		      bpl	.waitPos0	; 2³
    509  f12c		       85 10		      sta	RESP0	; 3
    510  f12e		       a5 9b		      lda	posLeftBranch	; 3
    511  f130		       85 20		      sta	HMP0	; 3
    512  f132		       a5 9c		      lda	posRightBranch	; 3
    513  f134		       85 21		      sta	HMP1	; 3
    514  f136				   .waitPos1
    515  f136		       88		      dey		; 2
    516  f137		       10 fd		      bpl	.waitPos1	; 2³
    517  f139		       85 11		      sta	RESP1	; 3
    518  f13b		       85 02		      sta	WSYNC	; 3
    519  f13d							;---------------------------------------
    520  f13d		       85 2a		      sta	HMOVE	; 3
    521  f13f		       a9 05		      lda	#%101	; 2		     enable playfield priority, now..
    522  f141		       85 0a		      sta	CTRLPF	; 3		     ..the leaves overlap the branches
    523  f143		       a0 1f		      ldy	#31	; 2
    524  f145		       a5 eb		      lda	treePat	; 3
    525  f147		       0a		      asl		; 2
    526  f148		       0a		      asl		; 2
    527  f149		       aa		      tax		; 2
    528  f14a
    529  f14a							; Kernel 1 (31 lines): draw liana, branches and bottom of leaves:
    530  f14a				   .loopBranches
    531  f14a		       18		      clc		; 2
    532  f14b		       a5 db		      lda	hmblSum	; 3
    533  f14d		       65 dc		      adc	hmblAdd	; 3
    534  f14f		       85 db		      sta	hmblSum	; 3
    535  f151		       85 2b		      sta	HMCLR	; 3
    536  f153		       90 04		      bcc	.noMove0	; 2³
    537  f155		       a5 dd		      lda	hmblDir	; 3
    538  f157		       85 24		      sta	HMBL	; 3
    539  f159				   .noMove0
    540  f159		       a9 00		      lda	#0	; 2
    541  f15b		       c0 09		      cpy	#9	; 2		     draw branches in lower 9 lines
    542  f15d		       b0 05		      bcs	.noBranch	; 2³
    543  f15f		       98		      tya		; 2
    544  f160		       4a		      lsr		; 2
    545  f161		       b9 c5 fb 	      lda	BranchTab,y	; 4
    546  f164				   .noBranch
    547  f164		       85 02		      sta	WSYNC	; 3
    548  f166							;---------------------------------------
    549  f166		       85 2a		      sta	HMOVE	; 3
    550  f168		       85 1b		      sta	GRP0	; 3
    551  f16a		       85 1c		      sta	GRP1	; 3
    552  f16c		       b0 0a		      bcs	.noChangePF	; 2³		      two line resolution for leaves
    553  f16e		       bd ef f3 	      lda	PFLeavesTab,x	; 4		     x = 0..3
    554  f171		       e8		      inx		; 2
    555  f172		       85 0d		      sta	PF0	; 3
    556  f174		       85 0e		      sta	PF1	; 3
    557  f176		       85 0f		      sta	PF2	; 3
    558  f178				   .noChangePF
    559  f178		       88		      dey		; 2
    560  f179		       d0 cf		      bne	.loopBranches	; 2³
    561  f17b
    562  f17b							; prepare Kernel 2: draw liana, disable branches, draw logs:
    563  f17b		       a6 eb		      ldx	treePat	; 3
    564  f17d		       18		      clc		; 2
    565  f17e		       a5 db		      lda	hmblSum	; 3
    566  f180		       65 dc		      adc	hmblAdd	; 3
    567  f182		       85 db		      sta	hmblSum	; 3
    568  f184		       90 02		      bcc	.noMove1	; 2³
    569  f186		       a4 dd		      ldy	hmblDir	; 3
    570  f188				   .noMove1
    571  f188		       84 24		      sty	HMBL	; 3
    572  f18a		       a9 01		      lda	#%001	; 2
    573  f18c		       85 0a		      sta	CTRLPF	; 3		     disable playfield priority
    574  f18e		       bd ce fb 	      lda	PF1LogTab,x	; 4
    575  f191		       bc d2 fb 	      ldy	PF2LogTab,x	; 4
    576  f194		       a6 d4		      ldx	nusize1	; 3
    577  f196		       85 02		      sta	WSYNC	; 3
    578  f198							;---------------------------------------
    579  f198		       85 2a		      sta	HMOVE	; 3
    580  f19a		       85 0e		      sta	PF1	; 3		     draw outer logs
    581  f19c		       a5 8e		      lda	colorLst+5	; 3		     always BROWN-2
    582  f19e		       85 08		      sta	COLUPF	; 3
    583  f1a0		       a9 00		      lda	#0	; 2
    584  f1a2		       85 1b		      sta	GRP0	; 3
    585  f1a4		       85 1c		      sta	GRP1	; 3
    586  f1a6		       85 04		      sta	NUSIZ0	; 3
    587  f1a8		       85 0d		      sta	PF0	; 3
    588  f1aa		       84 0f		      sty	PF2	; 3		     draw inner logs
    589  f1ac		       86 05		      stx	NUSIZ1	; 3
    590  f1ae
    591  f1ae							; Kernel 2 (4 lines): draw liana, position Harry and other object:
    592  f1ae		       a2 01		      ldx	#1	; 2
    593  f1b0				   .loopLianaPos
    594  f1b0		       18		      clc		; 2
    595  f1b1		       a5 db		      lda	hmblSum	; 3
    596  f1b3		       65 dc		      adc	hmblAdd	; 3
    597  f1b5		       85 db		      sta	hmblSum	; 3
    598  f1b7		       a9 00		      lda	#$00	; 2
    599  f1b9		       90 02		      bcc	.noMove2	; 2³
    600  f1bb		       a5 dd		      lda	hmblDir	; 3
    601  f1bd				   .noMove2
    602  f1bd		       85 24		      sta	HMBL	; 3
    603  f1bf		       18		      clc		; 2		     precalc liana for next line
    604  f1c0		       a5 db		      lda	hmblSum	; 3
    605  f1c2		       65 dc		      adc	hmblAdd	; 3
    606  f1c4		       85 db		      sta	hmblSum	; 3
    607  f1c6		       a9 00		      lda	#$00	; 2
    608  f1c8		       90 02		      bcc	.noMove3	; 2³
    609  f1ca		       a5 dd		      lda	hmblDir	; 3
    610  f1cc				   .noMove3
    611  f1cc		       85 02		      sta	WSYNC	; 3
    612  f1ce							;---------------------------------------
    613  f1ce		       85 2a		      sta	HMOVE	; 3
    614  f1d0		       a0 00		      ldy	#0	; 2		     do the coarse positions
    615  f1d2		       94 f6		      sty	temp1,x	; 4
    616  f1d4		       b4 98		      ldy	HMCoarseLst,x	; 4		     position at the very left?
    617  f1d6		       d0 0a		      bne	.waitPos	; 2³		       no, skip
    618  f1d8		       a0 60		      ldy	#$60	; 2		      yes, use special code
    619  f1da		       94 f6		      sty	temp1,x	; 4
    620  f1dc		       95 10		      sta	RESP0,x	; 4
    621  f1de		       85 24		      sta	HMBL	; 3
    622  f1e0		       d0 08		      bne	.endPos0	; 3
    623  f1e2
    624  f1e2				   .waitPos
    625  f1e2		       88		      dey		; 2		     "normal" position
    626  f1e3		       d0 fd		      bne	.waitPos	; 2³
    627  f1e5		       8d 24 00 	      sta.w	HMBL	; 4
    628  f1e8		       95 10		      sta	RESP0,x	; 4
    629  f1ea				   .endPos0
    630  f1ea		       85 02		      sta	WSYNC	; 3
    631  f1ec							;---------------------------------------
    632  f1ec		       85 2a		      sta	HMOVE	; 3
    633  f1ee		       ca		      dex		; 2
    634  f1ef		       10 bf		      bpl	.loopLianaPos	; 2³
    635  f1f1
    636  f1f1		       20 a6 f3 	      jsr	DrawLiana	;31/33
    637  f1f4		       a5 95		      lda	HMFineLst	; 3
    638  f1f6		       85 20		      sta	HMP0	; 3		     do the fine positions
    639  f1f8		       a5 96		      lda	HMFineLst+1	; 3
    640  f1fa		       85 21		      sta	HMP1	; 3
    641  f1fc		       85 02		      sta	WSYNC	; 3
    642  f1fe							;---------------------------------------
    643  f1fe		       85 2a		      sta	HMOVE	; 3
    644  f200		       20 a6 f3 	      jsr	DrawLiana	;31/33
    645  f203		       a5 f6		      lda	temp1	; 3
    646  f205		       85 20		      sta	HMP0	; 3
    647  f207		       a5 f7		      lda	temp2	; 3
    648  f209		       85 21		      sta	HMP1	; 3
    649  f20b		       a5 e9		      lda	yPosHarry	; 3		     calculate offset for Harry's pattern
    650  f20d		       18		      clc		; 2
    651  f20e		       65 f2		      adc	patOfsHarry	; 3
    652  f210		       69 15		      adc	#21	; 2
    653  f212		       a8		      tay		; 2
    654  f213		       a5 e5		      lda	reflectHarry	; 3
    655  f215		       85 0b		      sta	REFP0	; 3
    656  f217		       85 02		      sta	WSYNC	; 3
    657  f219							;---------------------------------------
    658  f219		       85 2a		      sta	HMOVE	; 3
    659  f21b		       85 2c		      sta	CXCLR	; 3
    660  f21d		       a2 14		      ldx	#20	; 2
    661  f21f		       86 25		      stx	VDELP0	; 3		     disable vertical delay for Harry
    662  f221
    663  f221							; Kernel 3 (21 lines): draw liana and Harry:
    664  f221				   .loopLianaHarry
    665  f221		       18		      clc		; 2
    666  f222		       a5 db		      lda	hmblSum	; 3
    667  f224		       65 dc		      adc	hmblAdd	; 3
    668  f226		       85 db		      sta	hmblSum	; 3
    669  f228		       a9 00		      lda	#$00	; 2
    670  f22a		       85 2b		      sta	HMCLR	; 3
    671  f22c		       90 02		      bcc	.noMove4	; 2³
    672  f22e		       a5 dd		      lda	hmblDir	; 3
    673  f230				   .noMove4
    674  f230		       85 24		      sta	HMBL	; 3
    675  f232		       20 72 f3 	      jsr	DrawHarry	;27/37
    676  f235		       85 02		      sta	WSYNC	; 3
    677  f237							;---------------------------------------
    678  f237		       85 2a		      sta	HMOVE	; 3
    679  f239		       85 06		      sta	COLUP0	; 3
    680  f23b		       ca		      dex		; 2
    681  f23c		       10 e3		      bpl	.loopLianaHarry	; 2³
    682  f23e
    683  f23e		       86 25		      stx	VDELP0	; 3		     enable vertical delay for Harry
    684  f240		       e8		      inx		; 2
    685  f241		       86 1c		      stx	GRP1	; 3
    686  f243		       f0 06		      beq	.endLiana	; 3
    687  f245
    688  f245				   .skipHarry
    689  f245		       a9 00		      lda	#0	; 2
    690  f247		       85 1b		      sta	GRP0	; 3
    691  f249		       f0 20		      beq	.contendLiana	; 3
    692  f24b
    693  f24b				   .endLiana
    694  f24b		       a2 17		      ldx	#23	; 2
    695  f24d							; Kernel 4 (24 lines): draw end of liana, draw Harry:
    696  f24d				   .loopEndLiana
    697  f24d		       18		      clc		; 2
    698  f24e		       a5 db		      lda	hmblSum	; 3
    699  f250		       65 dc		      adc	hmblAdd	; 3
    700  f252		       85 db		      sta	hmblSum	; 3
    701  f254		       a9 00		      lda	#$00	; 2
    702  f256		       90 02		      bcc	.noMove5	; 2³
    703  f258		       a5 dd		      lda	hmblDir	; 3
    704  f25a				   .noMove5
    705  f25a		       85 24		      sta	HMBL	; 3
    706  f25c		       88		      dey		; 2
    707  f25d		       c0 16		      cpy	#HARRY_H	; 2
    708  f25f		       b0 e4		      bcs	.skipHarry	; 2³
    709  f261		       b1 b5		      lda	(harryPatPtr),y	; 5
    710  f263		       85 1b		      sta	GRP0	; 3
    711  f265		       b1 b9		      lda	(harryColPtr),y	; 5
    712  f267					      IF	SCREENSAVER
    713  f267		       45 87		      eor	SS_XOR	; 3
    714  f269		       25 88		      and	SS_Mask	; 3
    715  f26b				  -	      ELSE
    716  f26b				  -	      FILL_NOP	4
    717  f26b					      ENDIF
    718  f26b				   .contendLiana
    719  f26b		       85 02		      sta	WSYNC	; 3
    720  f26d							;---------------------------------------
    721  f26d		       85 2a		      sta	HMOVE	; 3
    722  f26f		       85 06		      sta	COLUP0	; 3
    723  f271		       a9 00		      lda	#DISABLE	; 2
    724  f273		       e4 92		      cpx	lianaBottom	; 3		     bottom of liana reached?
    725  f275		       b0 02		      bcs	.skipDisable	; 2³		       no, skip
    726  f277		       85 1f		      sta	ENABL	; 3		      yes, disable liana
    727  f279				   .skipDisable
    728  f279		       85 1c		      sta	GRP1	; 3
    729  f27b		       ca		      dex		; 2
    730  f27c		       10 cf		      bpl	.loopEndLiana	; 2³
    731  f27e
    732  f27e		       20 72 f3 	      jsr	DrawHarry	;27/37
    733  f281		       a6 d2		      ldx	CXP0FB-$30	; 3
    734  f283		       86 85		      stx	hitLiana	; 3
    735  f285		       85 02		      sta	WSYNC	; 3
    736  f287							;---------------------------------------
    737  f287		       85 2a		      sta	HMOVE	; 3
    738  f289		       85 06		      sta	COLUP0	; 3
    739  f28b		       a5 90		      lda	colorLst+7	; 3
    740  f28d		       85 08		      sta	COLUPF	; 3
    741  f28f		       a2 ff		      ldx	#$ff	; 2		     draw the jungle ground
    742  f291		       86 0d		      stx	PF0	; 3
    743  f293		       86 0e		      stx	PF1	; 3
    744  f295		       86 0f		      stx	PF2	; 3
    745  f297		       a5 91		      lda	colorLst+8	; 3
    746  f299		       85 09		      sta	COLUBK	; 3
    747  f29b		       e8		      inx		; 2
    748  f29c		       86 1c		      stx	GRP1	; 3
    749  f29e
    750  f29e		       a2 06		      ldx	#6	; 2
    751  f2a0							; Kernel 5: draw Harry, holes, top of object on the ground:
    752  f2a0				   .loopGround
    753  f2a0		       20 72 f3 	      jsr	DrawHarry	;27/37
    754  f2a3		       85 02		      sta	WSYNC	; 3
    755  f2a5							;---------------------------------------
    756  f2a5		       85 2a		      sta	HMOVE	; 3
    757  f2a7		       85 06		      sta	COLUP0	; 3
    758  f2a9		       b5 a7		      lda	objColLst,x	; 4
    759  f2ab		       85 07		      sta	COLUP1	; 3
    760  f2ad		       b5 ae		      lda	objPatLst,x	; 4		     draw object (crocodiles, logs, snake...)
    761  f2af		       85 1c		      sta	GRP1	; 3
    762  f2b1		       b5 a0		      lda	PF2Lst,x	; 4		     draw pits
    763  f2b3		       85 0f		      sta	PF2	; 3
    764  f2b5		       ca		      dex		; 2
    765  f2b6		       10 e8		      bpl	.loopGround	; 2³=31/32
    766  f2b8
    767  f2b8		       98		      tya		; 2		     calculate and save..
    768  f2b9		       38		      sec		; 2		     ..Harry's pattern..
    769  f2ba		       e9 08		      sbc	#8	; 2		     ..offset for kernel 7
    770  f2bc		       85 f6		      sta	temp1	; 3
    771  f2be
    772  f2be		       a2 00		      ldx	#0	; 2
    773  f2c0		       a0 07		      ldy	#7	; 2
    774  f2c2							; Kernel 6 (8 lines): draw bottom of object on the ground, holes in the ground:
    775  f2c2				   .loopHoles
    776  f2c2		       a9 00		      lda	#0	; 2
    777  f2c4		       85 1b		      sta	GRP0	; 3
    778  f2c6		       b1 bb		      lda	(objColPtr),y	; 5
    779  f2c8					      IF	SCREENSAVER
    780  f2c8		       45 87		      eor	SS_XOR	; 3
    781  f2ca		       25 88		      and	SS_Mask	; 3
    782  f2cc				  -	      ELSE
    783  f2cc				  -	      FILL_NOP	4
    784  f2cc					      ENDIF
    785  f2cc		       85 02		      sta	WSYNC	; 3
    786  f2ce							;---------------------------------------
    787  f2ce		       85 2a		      sta	HMOVE	; 3
    788  f2d0		       85 07		      sta	COLUP1	; 3
    789  f2d2		       b1 b7		      lda	(objPatPtr),y	; 5
    790  f2d4		       85 1c		      sta	GRP1	; 3
    791  f2d6		       88		      dey		; 2
    792  f2d7		       30 07		      bmi	.exitHoles	; 2³		      exit loop here
    793  f2d9		       b5 a0		      lda	PF2Lst,x	; 4
    794  f2db		       85 0f		      sta	PF2	; 3
    795  f2dd		       e8		      inx		; 2
    796  f2de		       d0 e2		      bne	.loopHoles	; 3		     loop always
    797  f2e0
    798  f2e0				   .exitHoles
    799  f2e0		       a9 00		      lda	#0	; 2
    800  f2e2		       85 1b		      sta	GRP0	; 3		     clear Harry again (JTZ: superfluous)
    801  f2e4		       a6 9a		      ldx	HMCoarseLst+2	; 3
    802  f2e6		       d0 02		      bne	.notZero	; 2³
    803  f2e8		       a9 60		      lda	#$60	; 2		     special HMOV when scorpion is at the very left
    804  f2ea				   .notZero
    805  f2ea		       85 f8		      sta	temp3	; 3
    806  f2ec
    807  f2ec							; check Harry's collisions (JTZ: superfluous code!)
    808  f2ec		       a5 d7		      lda	CXPPMM-$30	; 3		     Harry collided with other objects?
    809  f2ee		       0a		      asl		; 2
    810  f2ef		       a5 d2		      lda	CXP0FB-$30	; 3		     Harry collided with playfield?
    811  f2f1		       6a		      ror		; 2
    812  f2f2		       85 86		      sta	cxHarry	; 3		     store here (this variable isn't used somewhere else!)
    813  f2f4
    814  f2f4							; prepare some underground data:
    815  f2f4		       a5 e6		      lda	reflectScorpion	; 3		     set player 1 reflection
    816  f2f6		       85 0c		      sta	REFP1	; 3
    817  f2f8		       a5 9d		      lda	ladderFlag	; 3		     calculate playfield reflection
    818  f2fa		       29 04		      and	#%000100	; 2
    819  f2fc		       49 25		      eor	#%100101	; 2		     ball is 4 clocks wide (ladder)
    820  f2fe		       aa		      tax		; 2
    821  f2ff		       a4 8f		      ldy	colorLst+6	; 3		     underground color (always BROWN+2)
    822  f301		       a5 8d		      lda	colorLst+4	; 3		     hole, blackground and tar pit color
    823  f303		       85 02		      sta	WSYNC	; 3
    824  f305							;---------------------------------------
    825  f305		       85 2a		      sta	HMOVE	; 3
    826  f307		       4c 05 f4 	      jmp	ContKernel	; 3
    827  f30a
    828  f30a				   ShowDigits SUBROUTINE
    829  f30a		       85 02		      sta	WSYNC	; 3
    830  f30c							;---------------------------------------
    831  f30c		       85 2a		      sta	HMOVE	; 3
    832  f30e		       a5 89		      lda	colorLst	; 3
    833  f310		       85 06		      sta	COLUP0	; 3
    834  f312		       85 07		      sta	COLUP1	; 3
    835  f314		       a0 00		      ldy	#0	; 2
    836  f316		       84 0b		      sty	REFP0	; 3
    837  f318		       84 0c		      sty	REFP1	; 3
    838  f31a		       a2 13		      ldx	#$10|THREE_COPIES	; 2
    839  f31c		       86 04		      stx	NUSIZ0	; 3
    840  f31e		       85 10		      sta	RESP0	; 3
    841  f320		       85 11		      sta	RESP1	; 3
    842  f322		       86 21		      stx	HMP1	; 3
    843  f324		       85 02		      sta	WSYNC	; 3
    844  f326							;---------------------------------------
    845  f326		       85 2a		      sta	HMOVE	; 3
    846  f328		       86 05		      stx	NUSIZ1	; 3
    847  f32a		       c8		      iny		; 2
    848  f32b		       84 0a		      sty	CTRLPF	; 3		     enable playfield reflection
    849  f32d		       a9 07		      lda	#DIGIT_H-1	; 2
    850  f32f		       85 25		      sta	VDELP0	; 3
    851  f331		       85 26		      sta	VDELP1	; 3
    852  f333		       85 f7		      sta	temp2	; 3
    853  f335		       85 2b		      sta	HMCLR	; 3
    854  f337		       20 9f f3 	      jsr	SkipIny	;22		     just waste 22 cycles
    855  f33a		       a5 f8		      lda	temp3	; 3		     just waste three cycles
    856  f33c				   .loopDigits
    857  f33c		       a4 f7		      ldy	temp2	; 3
    858  f33e		       b1 cf		      lda	(digitPtr+10),y	; 5
    859  f340		       85 f6		      sta	temp1	; 3
    860  f342		       b1 cd		      lda	(digitPtr+8),y	; 5
    861  f344		       aa		      tax		; 2
    862  f345		       b1 c5		      lda	(digitPtr),y	; 5
    863  f347		       05 f8		      ora	temp3	; 3		     show lives when drawing time
    864  f349		       85 2a		      sta	HMOVE	; 3		     produce HMOVE blanks
    865  f34b		       85 1b		      sta	GRP0	; 3
    866  f34d		       b1 c7		      lda	(digitPtr+2),y	; 5
    867  f34f		       85 1c		      sta	GRP1	; 3
    868  f351		       b1 c9		      lda	(digitPtr+4),y	; 5
    869  f353		       85 1b		      sta	GRP0	; 3
    870  f355		       b1 cb		      lda	(digitPtr+6),y	; 5
    871  f357		       a4 f6		      ldy	temp1	; 3
    872  f359		       85 1c		      sta	GRP1	; 3
    873  f35b		       86 1b		      stx	GRP0	; 3
    874  f35d		       84 1c		      sty	GRP1	; 3
    875  f35f		       85 1b		      sta	GRP0	; 3
    876  f361		       c6 f7		      dec	temp2	; 5
    877  f363		       10 d7		      bpl	.loopDigits	; 2³
    878  f365
    879  f365		       85 02		      sta	WSYNC	; 3
    880  f367							;---------------------------------------
    881  f367		       85 2a		      sta	HMOVE	; 3
    882  f369		       a9 00		      lda	#0	; 2
    883  f36b		       85 1b		      sta	GRP0	; 3
    884  f36d		       85 1c		      sta	GRP1	; 3
    885  f36f		       85 1b		      sta	GRP0	; 3
    886  f371		       60		      rts		; 6
    887  f372
    888  f372				   DrawHarry  SUBROUTINE
    889  f372							; called from kernel:
    890  f372		       88		      dey		; 2
    891  f373		       c0 16		      cpy	#HARRY_H	; 2
    892  f375		       b0 0b		      bcs	.skipDraw	; 2³
    893  f377		       b1 b5		      lda	(harryPatPtr),y	; 5
    894  f379		       85 1b		      sta	GRP0	; 3
    895  f37b		       b1 b9		      lda	(harryColPtr),y	; 5
    896  f37d					      IF	SCREENSAVER
    897  f37d		       45 87		      eor	SS_XOR	; 3
    898  f37f		       25 88		      and	SS_Mask	; 3
    899  f381				  -	      ELSE
    900  f381				  -	      FILL_NOP	3
    901  f381					      ENDIF
    902  f381				   .exitDraw
    903  f381		       60		      rts		; 6 = 21/31
    904  f382
    905  f382				  -	      IF	SCREENSAVER = 0
    906  f382				  -			; do some missing nops:
    907  f382				  -	      FILL_NOP	2
    908  f382					      ENDIF
    909  f382
    910  f382				   .skipDraw		; 7
    911  f382		       a9 00		      lda	#0	; 2
    912  f384		       85 1b		      sta	GRP0	; 3
    913  f386		       f0 f9		      beq	.exitDraw	; 3
    914  f388
    915  f388				   CalcPosX   SUBROUTINE
    916  f388							; calculate coarse and fine x-positioning values:
    917  f388		       a8		      tay		; 2
    918  f389		       c8		      iny		; 2
    919  f38a		       98		      tya		; 2
    920  f38b		       29 0f		      and	#$0f	; 2
    921  f38d		       85 f6		      sta	temp1	; 3
    922  f38f		       98		      tya		; 2
    923  f390		       4a		      lsr		; 2
    924  f391		       4a		      lsr		; 2
    925  f392		       4a		      lsr		; 2
    926  f393		       4a		      lsr		; 2
    927  f394		       a8		      tay		; 2
    928  f395		       18		      clc		; 2
    929  f396		       65 f6		      adc	temp1	; 3
    930  f398		       c9 0f		      cmp	#$0f	; 2
    931  f39a		       90 03		      bcc	SkipIny	; 2³
    932  f39c		       e9 0f		      sbc	#$0f	; 2
    933  f39e		       c8		      iny		; 2
    934  f39f				   SkipIny
    935  f39f		       49 07		      eor	#$07	; 2
    936  f3a1		       0a		      asl		; 2
    937  f3a2		       0a		      asl		; 2
    938  f3a3		       0a		      asl		; 2
    939  f3a4		       0a		      asl		; 2
    940  f3a5		       60		      rts		; 6
    941  f3a6
    942  f3a6				   DrawLiana  SUBROUTINE
    943  f3a6		       18		      clc		; 2
    944  f3a7		       a5 db		      lda	hmblSum	; 3
    945  f3a9		       65 dc		      adc	hmblAdd	; 3
    946  f3ab		       85 db		      sta	hmblSum	; 3
    947  f3ad		       a9 00		      lda	#$00	; 2
    948  f3af		       90 02		      bcc	.noMove6	; 2³
    949  f3b1		       a5 dd		      lda	hmblDir	; 3
    950  f3b3				   .noMove6
    951  f3b3		       85 24		      sta	HMBL	; 3
    952  f3b5		       60		      rts		; 6 = 25/27
    953  f3b6
    954  f3b6				   BCD2DigitPtrs SUBROUTINE
    955  f3b6		       b5 d5		      lda	scoreHi,x	; 4
    956  f3b8		       29 f0		      and	#$f0	; 2
    957  f3ba		       4a		      lsr		; 2
    958  f3bb		       99 c5 00 	      sta	digitPtr,y	; 5
    959  f3be		       b5 d5		      lda	scoreHi,x	; 4
    960  f3c0		       29 0f		      and	#$0f	; 2
    961  f3c2		       0a		      asl		; 2
    962  f3c3		       0a		      asl		; 2
    963  f3c4		       0a		      asl		; 2
    964  f3c5		       99 c7 00 	      sta	digitPtr+2,y	; 5
    965  f3c8		       85 02		      sta	WSYNC	; 3
    966  f3ca		       85 2a		      sta	HMOVE	; 3
    967  f3cc		       60		      rts		; 6
    968  f3cd
    969  f3cd				   DecScoreLo SUBROUTINE
    970  f3cd		       a9 07		      lda	#$07	; 2
    971  f3cf		       85 16		      sta	AUDC1	; 3
    972  f3d1		       a9 99		      lda	#$99	; 2		  decrease scoreLo by 1
    973  f3d3				   DecScoreHi		;		  decrease scoreHi by 1
    974  f3d3		       f8		      sed		; 2
    975  f3d4		       18		      clc		; 2
    976  f3d5		       65 d7		      adc	scoreLo	; 3
    977  f3d7		       85 d7		      sta	scoreLo	; 3
    978  f3d9		       a5 d6		      lda	scoreMed	; 3
    979  f3db		       e9 00		      sbc	#$00	; 2
    980  f3dd		       85 d6		      sta	scoreMed	; 3
    981  f3df		       a5 d5		      lda	scoreHi	; 3
    982  f3e1		       e9 00		      sbc	#$00	; 2
    983  f3e3		       b0 06		      bcs	.notZero	; 2³
    984  f3e5		       a9 00		      lda	#$00	; 2		 limit score at zero
    985  f3e7		       85 d6		      sta	scoreMed	; 3
    986  f3e9		       85 d7		      sta	scoreLo	; 3
    987  f3eb				   .notZero
    988  f3eb		       85 d5		      sta	scoreHi	; 3
    989  f3ed		       d8		      cld		; 2
    990  f3ee		       60		      rts		; 6
    991  f3ef
    992  f3ef				   PFLeavesTab
    993  f3ef		       ff		      .byte.b	%11111111	; |XXXXXXXX|
    994  f3f0		       cf		      .byte.b	%11001111	; |XX	XXXX|
    995  f3f1		       83		      .byte.b	%10000011	; |X	  XX|
    996  f3f2		       01		      .byte.b	%00000001	; |	   X|
    997  f3f3
    998  f3f3		       7f		      .byte.b	%01111111	; | XXXXXXX|
    999  f3f4		       3d		      .byte.b	%00111101	; |  XXXX X|
   1000  f3f5		       18		      .byte.b	%00011000	; |   XX   |
   1001  f3f6		       00		      .byte.b	%00000000	; |	    |
   1002  f3f7
   1003  f3f7		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   1004  f3f8		       fe		      .byte.b	%11111110	; |XXXXXXX |
   1005  f3f9		       bc		      .byte.b	%10111100	; |X XXXX  |
   1006  f3fa		       18		      .byte.b	%00011000	; |   XX   |
   1007  f3fb
   1008  f3fb		       fe		      .byte.b	%11111110	; |XXXXXXX |
   1009  f3fc		       fc		      .byte.b	%11111100	; |XXXXXX  |
   1010  f3fd		       78		      .byte.b	%01111000	; | XXXX   |
   1011  f3fe		       30		      .byte.b	%00110000	; |  XX    |
   1012  f3ff
   1013  f3ff				   Kernel2    SUBROUTINE
   1014  f3ff				   .skipHarry1
   1015  f3ff		       a9 00		      lda	#0	; 2
   1016  f401		       85 1b		      sta	GRP0	; 3
   1017  f403		       f0 29		      beq	.conrHarry	; 3
   1018  f405
   1019  f405				   ContKernel
   1020  f405		       85 09		      sta	COLUBK	; 3
   1021  f407		       84 08		      sty	COLUPF	; 3
   1022  f409		       a9 00		      lda	#0	; 2
   1023  f40b		       85 1c		      sta	GRP1	; 3
   1024  f40d		       a9 ff		      lda	#$ff	; 2
   1025  f40f		       85 0e		      sta	PF1	; 3
   1026  f411		       a5 9f		      lda	PF2QuickSand	; 3
   1027  f413		       85 0f		      sta	PF2	; 3
   1028  f415		       86 0a		      stx	CTRLPF	; 3
   1029  f417		       a4 f6		      ldy	temp1	; 3
   1030  f419		       a9 90		      lda	#$90	; 2
   1031  f41b		       8d 24 00 	      sta.w	HMBL	; 4
   1032  f41e		       c0 16		      cpy	#HARRY_H	; 2
   1033  f420		       85 14		      sta	RESBL	; 3
   1034  f422		       b0 db		      bcs	.skipHarry1	; 2³+1
   1035  f424		       b1 b5		      lda	(harryPatPtr),y	; 5
   1036  f426		       85 1b		      sta	GRP0	; 3
   1037  f428		       b1 b9		      lda	(harryColPtr),y	; 5
   1038  f42a					      IF	SCREENSAVER
   1039  f42a		       45 87		      eor	SS_XOR	; 3
   1040  f42c		       25 88		      and	SS_Mask	; 3
   1041  f42e				  -	      ELSE
   1042  f42e				  -	      FILL_NOP	4
   1043  f42e					      ENDIF
   1044  f42e				   .conrHarry
   1045  f42e		       a6 9a		      ldx	HMCoarseLst+2	; 3
   1046  f430		       85 02		      sta	WSYNC	; 3
   1047  f432							;---------------------------------------
   1048  f432		       85 2a		      sta	HMOVE	; 3
   1049  f434		       85 06		      sta	COLUP0	; 3
   1050  f436		       f0 00		      beq	.wait1	; 2³
   1051  f438				   .wait1
   1052  f438		       f0 00		      beq	.wait2	; 2³
   1053  f43a				   .wait2
   1054  f43a		       a9 00		      lda	#0	; 2
   1055  f43c		       85 1c		      sta	GRP1	; 3
   1056  f43e				   .loopWait
   1057  f43e		       ca		      dex		; 2
   1058  f43f		       10 fd		      bpl	.loopWait	; 2³
   1059  f441		       8d 11 00 	      sta.w	RESP1	; 4
   1060  f444		       85 2b		      sta	HMCLR	; 3
   1061  f446		       85 02		      sta	WSYNC	; 3
   1062  f448							;---------------------------------------
   1063  f448		       85 2a		      sta	HMOVE	; 3
   1064  f44a		       88		      dey		; 2
   1065  f44b		       c0 16		      cpy	#HARRY_H	; 2
   1066  f44d		       b0 0c		      bcs	.skipHarry2	; 2³
   1067  f44f		       b1 b9		      lda	(harryColPtr),y	; 5
   1068  f451					      IF	SCREENSAVER
   1069  f451		       45 87		      eor	SS_XOR	; 3
   1070  f453		       25 88		      and	SS_Mask	; 3
   1071  f455				  -	      ELSE
   1072  f455				  -	      FILL_NOP	3
   1073  f455					      ENDIF
   1074  f455		       85 06		      sta	COLUP0	; 3
   1075  f457		       b1 b5		      lda	(harryPatPtr),y	; 5
   1076  f459		       85 1b		      sta	GRP0	; 3
   1077  f45b				   .skipHarry2
   1078  f45b		       a9 00		      lda	#0	; 2
   1079  f45d		       85 1c		      sta	GRP1	; 3
   1080  f45f		       a5 97		      lda	HMFineLst+2	; 3
   1081  f461		       85 21		      sta	HMP1	; 3		     position scorpion or wall
   1082  f463		       a2 0b		      ldx	#11	; 2
   1083  f465		       88		      dey		; 2
   1084  f466							; Kernel 7 (12 lines): draw top of ladder, draw Harry:
   1085  f466				   .loopLadderTop
   1086  f466		       88		      dey		; 2
   1087  f467		       c0 16		      cpy	#HARRY_H	; 2
   1088  f469		       b0 2a		      bcs	.skipHarry3	; 2³
   1089  f46b		       b1 b5		      lda	(harryPatPtr),y	; 5
   1090  f46d		       85 1b		      sta	GRP0	; 3
   1091  f46f		       b1 b9		      lda	(harryColPtr),y	; 5
   1092  f471					      IF	SCREENSAVER
   1093  f471		       45 87		      eor	SS_XOR	; 3
   1094  f473		       25 88		      and	SS_Mask	; 3
   1095  f475				  -	      ELSE
   1096  f475				  -	      FILL_NOP	4
   1097  f475					      ENDIF
   1098  f475				   .contHarry3
   1099  f475		       85 02		      sta	WSYNC	; 3
   1100  f477							;---------------------------------------
   1101  f477		       85 2a		      sta	HMOVE	; 3
   1102  f479		       85 06		      sta	COLUP0	; 3
   1103  f47b		       a9 00		      lda	#0	; 2
   1104  f47d		       85 1c		      sta	GRP1	; 3
   1105  f47f		       bd 95 fc 	      lda	LadderTab,x	; 4
   1106  f482		       25 9d		      and	ladderFlag	; 3
   1107  f484		       85 1f		      sta	ENABL	; 3
   1108  f486		       ca		      dex		; 2
   1109  f487		       30 18		      bmi	.exitLadderTop	; 2³		      exit loop
   1110  f489		       a5 f8		      lda	temp3	; 3
   1111  f48b		       85 2b		      sta	HMCLR	; 3
   1112  f48d		       85 21		      sta	HMP1	; 3		     position scorpion at the very left
   1113  f48f		       a9 0f		      lda	#15	; 2		     clear hmove value, prepare height of a later loop
   1114  f491		       85 f8		      sta	temp3	; 3
   1115  f493		       d0 d1		      bne	.loopLadderTop	; 3		     loop always
   1116  f495
   1117  f495				   .skipHarry3
   1118  f495		       a9 00		      lda	#0	; 2
   1119  f497		       85 1b		      sta	GRP0	; 3
   1120  f499		       f0 da		      beq	.contHarry3	; 3
   1121  f49b
   1122  f49b				   .skipHarry4
   1123  f49b		       a9 00		      lda	#0	; 2
   1124  f49d		       85 1b		      sta	GRP0	; 3
   1125  f49f		       f0 11		      beq	.contHarry4	; 3
   1126  f4a1
   1127  f4a1				   .exitLadderTop
   1128  f4a1		       88		      dey		; 2
   1129  f4a2		       84 f6		      sty	temp1	; 3
   1130  f4a4		       c0 16		      cpy	#HARRY_H	; 2
   1131  f4a6		       b0 f3		      bcs	.skipHarry4	; 2³
   1132  f4a8		       b1 b5		      lda	(harryPatPtr),y	; 5
   1133  f4aa		       85 1b		      sta	GRP0	; 3
   1134  f4ac		       b1 b9		      lda	(harryColPtr),y	; 5
   1135  f4ae					      IF	SCREENSAVER
   1136  f4ae		       45 87		      eor	SS_XOR	; 3
   1137  f4b0		       25 88		      and	SS_Mask	; 3
   1138  f4b2				  -	      ELSE
   1139  f4b2				  -	      FILL_NOP	4
   1140  f4b2					      ENDIF
   1141  f4b2				   .contHarry4
   1142  f4b2		       a0 0f		      ldy	#15	; 2
   1143  f4b4		       85 f7		      sta	temp2	; 3
   1144  f4b6		       b1 bd		      lda	(wallPatPtr),y	; 5
   1145  f4b8		       a2 00		      ldx	#ONE_COPY	; 2		     = 0
   1146  f4ba		       86 05		      stx	NUSIZ1	; 3
   1147  f4bc		       85 02		      sta	WSYNC	; 3
   1148  f4be							;---------------------------------------
   1149  f4be		       85 2a		      sta	HMOVE	; 3
   1150  f4c0		       85 1c		      sta	GRP1	; 3
   1151  f4c2		       a5 f7		      lda	temp2	; 3
   1152  f4c4		       85 06		      sta	COLUP0	; 3
   1153  f4c6		       86 0d		      stx	PF0	; 3		     clear playfield
   1154  f4c8		       a9 62		      lda	#DARK_RED	; 2		     wall color
   1155  f4ca					      IF	SCREENSAVER
   1156  f4ca		       25 88		      and	SS_Mask	; 3
   1157  f4cc				  -	      ELSE
   1158  f4cc				  -	      FILL_NOP	2
   1159  f4cc					      ENDIF
   1160  f4cc		       85 07		      sta	COLUP1	; 3
   1161  f4ce		       86 0e		      stx	PF1	; 3
   1162  f4d0		       86 0f		      stx	PF2	; 3
   1163  f4d2		       a5 9d		      lda	ladderFlag	; 3
   1164  f4d4		       85 1f		      sta	ENABL	; 3
   1165  f4d6		       88		      dey		; 2
   1166  f4d7		       84 f7		      sty	temp2	; 3
   1167  f4d9		       a6 f6		      ldx	temp1	; 3
   1168  f4db							; Kernel 8 (15 lines): draw Harry, ladder and wall:
   1169  f4db				   .loopLadder
   1170  f4db		       ca		      dex		; 2
   1171  f4dc		       8a		      txa		; 2
   1172  f4dd		       a8		      tay		; 2
   1173  f4de		       c0 16		      cpy	#HARRY_H	; 2
   1174  f4e0		       b0 55		      bcs	.skipHarry5	; 2³+1
   1175  f4e2		       b1 b5		      lda	(harryPatPtr),y	; 5
   1176  f4e4		       85 1b		      sta	GRP0	; 3
   1177  f4e6		       b1 b9		      lda	(harryColPtr),y	; 5
   1178  f4e8				   .contHarry5
   1179  f4e8					      IF	SCREENSAVER
   1180  f4e8		       45 87		      eor	SS_XOR	; 3
   1181  f4ea		       25 88		      and	SS_Mask	; 3
   1182  f4ec				  -	      ELSE
   1183  f4ec				  -	      bit	$00
   1184  f4ec				  -	      bit	$00
   1185  f4ec					      ENDIF
   1186  f4ec		       a4 f7		      ldy	temp2	; 3
   1187  f4ee		       85 2a		      sta	HMOVE	; 3
   1188  f4f0		       85 06		      sta	COLUP0	; 3
   1189  f4f2		       b1 bd		      lda	(wallPatPtr),y	; 5
   1190  f4f4		       85 1c		      sta	GRP1	; 3
   1191  f4f6		       b1 bf		      lda	(wallColPtr),y	; 5
   1192  f4f8					      IF	SCREENSAVER
   1193  f4f8		       25 88		      and	SS_Mask	; 3
   1194  f4fa				  -	      ELSE
   1195  f4fa				  -	      bit	$00
   1196  f4fa					      ENDIF
   1197  f4fa		       85 07		      sta	COLUP1	; 3
   1198  f4fc		       b9 95 fc 	      lda	LadderTab,y	; 4
   1199  f4ff		       25 9d		      and	ladderFlag	; 3
   1200  f501		       85 1f		      sta	ENABL	; 3
   1201  f503		       c6 f7		      dec	temp2	; 5
   1202  f505		       10 d4		      bpl	.loopLadder	; 2³+1
   1203  f507		       ea		      nop		; 2
   1204  f508							; Kernel 9 (16 lines): draw Harry, scorpion or the bottom of wall and ladder:
   1205  f508				   .loopUnderground
   1206  f508		       ca		      dex		; 2
   1207  f509		       8a		      txa		; 2
   1208  f50a		       a8		      tay		; 2
   1209  f50b		       c0 16		      cpy	#HARRY_H	; 2
   1210  f50d		       b0 2f		      bcs	.skipHarry6	; 2³
   1211  f50f		       b1 b5		      lda	(harryPatPtr),y	; 5
   1212  f511		       85 1b		      sta	GRP0	; 3
   1213  f513		       b1 b9		      lda	(harryColPtr),y	; 5
   1214  f515				   .contHarry6
   1215  f515					      IF	SCREENSAVER
   1216  f515		       45 87		      eor	SS_XOR	; 3
   1217  f517		       25 88		      and	SS_Mask	; 3
   1218  f519				  -	      ELSE
   1219  f519				  -	      bit	$00
   1220  f519				  -	      bit	$00
   1221  f519					      ENDIF
   1222  f519		       a4 f8		      ldy	temp3	; 3
   1223  f51b		       85 2a		      sta	HMOVE	; 3
   1224  f51d		       85 06		      sta	COLUP0	; 3
   1225  f51f		       b1 c1		      lda	(undrPatPtr),y	; 5
   1226  f521		       85 1c		      sta	GRP1	; 3
   1227  f523		       b1 c3		      lda	(undrColPtr),y	; 5
   1228  f525					      IF	SCREENSAVER
   1229  f525		       25 88		      and	SS_Mask	; 3
   1230  f527				  -	      ELSE
   1231  f527				  -	      bit	$00
   1232  f527					      ENDIF
   1233  f527		       85 07		      sta	COLUP1	; 3
   1234  f529		       b9 95 fc 	      lda	LadderTab,y	; 4
   1235  f52c		       25 9d		      and	ladderFlag	; 3
   1236  f52e		       8d 1f 00 	      sta.w	ENABL	; 4
   1237  f531		       c6 f8		      dec	temp3	; 5
   1238  f533		       10 d3		      bpl	.loopUnderground	; 2³
   1239  f535		       30 0f		      bmi	.exitKernel	; 3
   1240  f537
   1241  f537				   .skipHarry5
   1242  f537		       a9 00		      lda	#0	; 2
   1243  f539		       85 1b		      sta	GRP0	; 3
   1244  f53b		       ea		      nop		; 2
   1245  f53c		       f0 aa		      beq	.contHarry5	; 4		     page crossed!
   1246  f53e
   1247  f53e				   .skipHarry6
   1248  f53e		       a9 00		      lda	#0	; 2
   1249  f540		       85 1b		      sta	GRP0	; 3
   1250  f542		       ea		      nop		; 2
   1251  f543		       ea		      nop		; 2
   1252  f544		       f0 cf		      beq	.contHarry6	; 3
   1253  f546
   1254  f546				   .exitKernel
   1255  f546		       a2 ff		      ldx	#$ff	; 2
   1256  f548		       85 02		      sta	WSYNC	; 3
   1257  f54a							;---------------------------------------
   1258  f54a		       85 2a		      sta	HMOVE	; 3
   1259  f54c		       86 0d		      stx	PF0	; 3		     fill playfield registers
   1260  f54e		       86 0e		      stx	PF1	; 3
   1261  f550		       86 0f		      stx	PF2	; 3
   1262  f552		       e8		      inx		; 2		     x = 0
   1263  f553		       86 1f		      stx	ENABL	; 3		     clear ball and graphics registers
   1264  f555		       86 1b		      stx	GRP0	; 3
   1265  f557		       86 1c		      stx	GRP1	; 3
   1266  f559		       86 1b		      stx	GRP0	; 3
   1267  f55b
   1268  f55b							; show animated copyright:
   1269  f55b		       86 f8		      stx	temp3	; 3		     show nothing before copyright
   1270  f55d		       a0 08		      ldy	#COPYRIGHT_H/2	; 2
   1271  f55f		       a5 9e		      lda	noGameScroll	; 3
   1272  f561		       a6 e0		      ldx	soundIdx	; 3
   1273  f563		       f0 02		      beq	.noSound0	; 2³
   1274  f565		       a9 00		      lda	#0	; 2
   1275  f567				   .noSound0
   1276  f567		       4a		      lsr		; 2
   1277  f568		       4a		      lsr		; 2
   1278  f569		       4a		      lsr		; 2
   1279  f56a		       c9 14		      cmp	#20	; 2		     scroll-animation
   1280  f56c		       b0 09		      bcs	.ok	; 2³
   1281  f56e		       a0 00		      ldy	#0	; 2
   1282  f570		       c9 0c		      cmp	#12	; 2
   1283  f572		       90 03		      bcc	.ok	; 2³
   1284  f574		       e9 0c		      sbc	#12	; 2
   1285  f576		       a8		      tay		; 2
   1286  f577				   .ok
   1287  f577		       98		      tya		; 2
   1288  f578		       18		      clc		; 2
   1289  f579		       69 a8		      adc	#<CopyRight5-COPYRIGHT_H/2	; 2
   1290  f57b		       a2 0a		      ldx	#12-2	; 2
   1291  f57d				   .loopCopyright
   1292  f57d		       85 02		      sta	WSYNC	; 3
   1293  f57f		       85 2a		      sta	HMOVE	; 3
   1294  f581		       95 c5		      sta	digitPtr,x	; 4
   1295  f583		       38		      sec		; 2
   1296  f584		       e9 10		      sbc	#COPYRIGHT_H	; 2
   1297  f586		       ca		      dex		; 2
   1298  f587		       ca		      dex		; 2
   1299  f588		       10 f3		      bpl	.loopCopyright	; 2³
   1300  f58a
   1301  f58a		       a5 8d		      lda	colorLst+4	; 3
   1302  f58c		       85 08		      sta	COLUPF	; 3
   1303  f58e		       20 0a f3 	      jsr	ShowDigits	; 6
   1304  f591		       a5 9e		      lda	noGameScroll	; 3		     game running?
   1305  f593		       f0 06		      beq	.endCopyright	; 2³		       yes, no more scrolling
   1306  f595		       c6 9e		      dec	noGameScroll	; 5		      no, scoll message
   1307  f597		       d0 02		      bne	.endCopyright	; 2³
   1308  f599		       c6 9e		      dec	noGameScroll	; 5		     avoid #0
   1309  f59b				   .endCopyright
   1310  f59b
   1311  f59b							; start timer and vertical blank:
   1312  f59b				  -	      IF	NTSC
   1313  f59b				  -	      lda	#32	; 2
   1314  f59b					      ELSE
   1315  f59b		       a9 3c		      lda	#60
   1316  f59d					      ENDIF
   1317  f59d		       a2 82		      ldx	#%10000010	; 2
   1318  f59f		       85 02		      sta	WSYNC	; 3
   1319  f5a1		       8d 96 02 	      sta	TIM64T	; 4
   1320  f5a4		       86 01		      stx	VBLANK	; 3
   1321  f5a6
   1322  f5a6							; check for killed Harry:
   1323  f5a6		       a5 e0		      lda	soundIdx	; 3
   1324  f5a8		       c9 52		      cmp	#SOUND_FALLING-1	; 2		     dead tune at end of playing?
   1325  f5aa		       d0 2a		      bne	.slipDecrease	; 2³		       no, skip decrease
   1326  f5ac							; Harry is loosing a live:
   1327  f5ac		       a5 80		      lda	livesPat	; 3		     any more lives?
   1328  f5ae		       f0 26		      beq	.slipDecrease	; 2³		       no, skip decrease
   1329  f5b0				  -	      IF	TRAINER
   1330  f5b0				  -	      FILL_NOP	4
   1331  f5b0					      ELSE
   1332  f5b0		       0a		      asl		; 2		      yes, decrease lives
   1333  f5b1		       0a		      asl		; 2
   1334  f5b2		       85 80		      sta	livesPat	; 3
   1335  f5b4					      ENDIF
   1336  f5b4		       a9 00		      lda	#NOREFLECT	; 2
   1337  f5b6		       85 e5		      sta	reflectHarry	; 3
   1338  f5b8		       85 9e		      sta	noGameScroll	; 3
   1339  f5ba		       85 2c		      sta	CXCLR	; 3
   1340  f5bc		       a0 df		      ldy	#$d0|NO_MOVE	; 2		     upper Harry restart y-position
   1341  f5be		       84 e8		      sty	oldJoystick	; 3		     clear joystick
   1342  f5c0		       a9 14		      lda	#20	; 2
   1343  f5c2		       85 e1		      sta	xPosHarry	; 3
   1344  f5c4		       a2 20		      ldx	#JUMP_LEN	; 2
   1345  f5c6		       a5 e9		      lda	yPosHarry	; 3
   1346  f5c8		       c9 47		      cmp	#71	; 2		     Harry at underground?
   1347  f5ca		       90 06		      bcc	LF5D2	; 2³		       no, skip
   1348  f5cc		       a0 40		      ldy	#64	; 2		      yes, lower Harry restart y-position
   1349  f5ce		       a9 4c		      lda	#SCREENWIDTH/2-4	; 2		     position scorpion at center..
   1350  f5d0		       85 e3		      sta	xPosScorpion	; 3		     ..when Harry restarts at underground
   1351  f5d2				   LF5D2
   1352  f5d2		       86 e7		      stx	jumpIndex	; 3
   1353  f5d4		       84 e9		      sty	yPosHarry	; 3
   1354  f5d6				   .slipDecrease
   1355  f5d6
   1356  f5d6							; *** sound routines: ***
   1357  f5d6		       a0 00		      ldy	#0	; 2
   1358  f5d8		       a6 e0		      ldx	soundIdx	; 3
   1359  f5da		       f0 15		      beq	.noSound	; 2³
   1360  f5dc		       e6 f3		      inc	soundDelay	; 5
   1361  f5de		       a5 f3		      lda	soundDelay	; 3
   1362  f5e0		       29 03		      and	#$03	; 2		     next note every 4th frame
   1363  f5e2		       d0 02		      bne	.skipNext	; 2³
   1364  f5e4		       e6 e0		      inc	soundIdx	; 5		     play next note
   1365  f5e6				   .skipNext
   1366  f5e6		       bd 35 fc 	      lda	SoundTab-1,x	; 4
   1367  f5e9		       10 02		      bpl	.contSound	; 2³
   1368  f5eb		       84 e0		      sty	soundIdx	; 3		     stop current sound
   1369  f5ed				   .contSound
   1370  f5ed		       85 17		      sta	AUDF0	; 3
   1371  f5ef		       a0 01		      ldy	#1	; 2
   1372  f5f1				   .noSound
   1373  f5f1		       84 15		      sty	AUDC0	; 3
   1374  f5f3		       a9 04		      lda	#4	; 2
   1375  f5f5		       85 19		      sta	AUDV0	; 3
   1376  f5f7
   1377  f5f7							; check if Harry has fallen into a hole or pit:
   1378  f5f7		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1379  f5f9		       d0 46		      bne	.exitBounds	; 2³+1	       yes, skip bounds check
   1380  f5fb		       a5 e9		      lda	yPosHarry	; 3
   1381  f5fd		       c9 20		      cmp	#JUNGLE_GROUND	; 2		     Harry at ground?
   1382  f5ff		       d0 40		      bne	.exitBounds	; 2³		       no, skip bounds check
   1383  f601		       a6 94		      ldx	sceneType	; 3
   1384  f603		       e0 04		      cpx	#CROCO_SCENE	; 2		     croco scene?
   1385  f605		       d0 07		      bne	.noCroco1	; 2³		       no, skip
   1386  f607		       24 d3		      bit	frameCnt	; 3		     open croco jaws?
   1387  f609		       10 09		      bpl	.contCroco	; 2³		       yes, skip
   1388  f60b		       ca		      dex		; 2		      no, use other values
   1389  f60c		       d0 06		      bne	.contCroco	; 3
   1390  f60e
   1391  f60e				   .noCroco1
   1392  f60e		       e0 03		      cpx	#HOLE3_SCENE+2	; 2		     scene with hole(s) or ???? ?
   1393  f610		       90 02		      bcc	.contCroco	; 2³		       yes, skip
   1394  f612		       a2 02		      ldx	#HOLE3_SCENE+1	; 2		      no, limit scene type
   1395  f614				   .contCroco
   1396  f614		       8a		      txa		; 2
   1397  f615		       0a		      asl		; 2
   1398  f616		       0a		      asl		; 2
   1399  f617		       0a		      asl		; 2
   1400  f618		       aa		      tax		; 2
   1401  f619		       a0 03		      ldy	#3	; 2		     check up to 4 bounds
   1402  f61b				   .loopBounds
   1403  f61b		       bd d7 fc 	      lda	HoleBoundsTab,x	; 4
   1404  f61e		       f0 21		      beq	.exitBounds	; 2³		      no more bounds!
   1405  f620		       18		      clc		; 2
   1406  f621		       65 f4		      adc	xPosQuickSand	; 3
   1407  f623		       c5 e1		      cmp	xPosHarry	; 3		     Harry left of hole/pit?
   1408  f625		       b0 0a		      bcs	.inBounds	; 2³		       yes, bound ok
   1409  f627		       bd d8 fc 	      lda	HoleBoundsTab+1,x	; 4
   1410  f62a		       38		      sec		; 2
   1411  f62b		       e5 f4		      sbc	xPosQuickSand	; 3
   1412  f62d		       c5 e1		      cmp	xPosHarry	; 3		     Harry right of hole/pit?
   1413  f62f		       b0 07		      bcs	.outOfBounds	; 2³		       no, Harry is falling into
   1414  f631				   .inBounds
   1415  f631		       e8		      inx		; 2
   1416  f632		       e8		      inx		; 2
   1417  f633		       88		      dey		; 2
   1418  f634		       10 e5		      bpl	.loopBounds	; 2³
   1419  f636		       30 09		      bmi	.exitBounds	; 3
   1420  f638
   1421  f638				   .outOfBounds
   1422  f638		       e6 e9		      inc	yPosHarry	; 5		     Harry is falling down
   1423  f63a		       a2 20		      ldx	#JUMP_LEN	; 2
   1424  f63c		       86 e7		      stx	jumpIndex	; 3
   1425  f63e		       ca		      dex		; 2
   1426  f63f		       86 e8		      stx	oldJoystick	; 3		     x=$1f -> no direction
   1427  f641				   .exitBounds
   1428  f641		       a5 f5		      lda	jumpMode	; 3		     JTZ: superfluous code?
   1429  f643		       d0 13		      bne	.waitTim	; 2³
   1430  f645		       24 85		      bit	hitLiana	; 3		     collison with liana
   1431  f647		       50 0f		      bvc	.waitTim	; 2³		       no, skip
   1432  f649		       a5 e7		      lda	jumpIndex	; 3		     currently jumping?
   1433  f64b		       f0 0b		      beq	.waitTim	; 2³		       no, skip
   1434  f64d		       a6 ea		      ldx	atLiana	; 3		     Harry already at liana?
   1435  f64f		       d0 07		      bne	.waitTim	; 2³		       yes, skip
   1436  f651		       86 e7		      stx	jumpIndex	; 3		      no, stop jump
   1437  f653		       e8		      inx		; 2
   1438  f654		       86 ea		      stx	atLiana	; 3		     enter "liana mode"
   1439  f656		       86 e0		      stx	soundIdx	; 3		     start tarzan sound (=0)
   1440  f658
   1441  f658							; wait for end of vertical blank:
   1442  f658				   .waitTim
   1443  f658		       ad 84 02 	      lda	INTIM	; 4
   1444  f65b		       d0 fb		      bne	.waitTim	; 2³
   1445  f65d
   1446  f65d							; start vertical sync:
   1447  f65d		       85 16		      sta	AUDC1	; 3
   1448  f65f		       a0 82		      ldy	#%10000010	; 2		     enable vertical sync and dump ports (JTZ: why?)
   1449  f661		       84 02		      sty	WSYNC	; 3
   1450  f663		       84 00		      sty	VSYNC	; 3
   1451  f665		       84 02		      sty	WSYNC	; 3
   1452  f667		       84 02		      sty	WSYNC	; 3
   1453  f669		       84 02		      sty	WSYNC	; 3
   1454  f66b		       85 00		      sta	VSYNC	; 3
   1455  f66d
   1456  f66d					      IF	SCREENSAVER
   1457  f66d							; process screensaver code:
   1458  f66d		       e6 d2		      inc	SS_DelayLo	; 5
   1459  f66f		       d0 07		      bne	.skipSS_Delay	; 2³
   1460  f671		       e6 d1		      inc	SS_Delay	; 5
   1461  f673		       d0 03		      bne	.skipSS_Delay	; 2³
   1462  f675		       38		      sec		; 2
   1463  f676		       66 d1		      ror	SS_Delay	; 5
   1464  f678				   .skipSS_Delay
   1465  f678		       a0 ff		      ldy	#$ff	; 2
   1466  f67a		       ad 82 02 	      lda	SWCHB	; 4
   1467  f67d		       29 08		      and	#BW_MASK	; 2
   1468  f67f		       d0 02		      bne	.colorMode	; 2³
   1469  f681		       a0 0f		      ldy	#$0f	; 2
   1470  f683				   .colorMode
   1471  f683		       98		      tya		; 2
   1472  f684		       a0 00		      ldy	#$00	; 2		     disable changing colors
   1473  f686		       24 d1		      bit	SS_Delay	; 3
   1474  f688		       10 04		      bpl	.noScreenSaver	; 2³
   1475  f68a		       29 f7		      and	#$f7	; 2		     avoid bright colors in screensaver mode
   1476  f68c		       a4 d1		      ldy	SS_Delay	; 3
   1477  f68e				   .noScreenSaver
   1478  f68e		       84 87		      sty	SS_XOR	; 3
   1479  f690		       06 87		      asl	SS_XOR	; 5
   1480  f692		       85 88		      sta	SS_Mask	; 3
   1481  f694				  -	      ELSE
   1482  f694				  -	      FILL_NOP	39
   1483  f694					      ENDIF
   1484  f694
   1485  f694							; start timer for vertical sync:
   1486  f694				  -	      IF	NTSC
   1487  f694				  -	      lda	#47	; 2
   1488  f694					      ELSE
   1489  f694		       a9 4f		      lda	#79
   1490  f696					      ENDIF
   1491  f696		       85 02		      sta	WSYNC	; 3
   1492  f698		       8d 96 02 	      sta	TIM64T	; 4
   1493  f69b
   1494  f69b							; read joystick:
   1495  f69b		       ad 80 02 	      lda	SWCHA	; 4
   1496  f69e		       4a		      lsr		; 2
   1497  f69f		       4a		      lsr		; 2
   1498  f6a0		       4a		      lsr		; 2
   1499  f6a1		       4a		      lsr		; 2
   1500  f6a2		       85 83		      sta	joystick	; 3
   1501  f6a4		       c9 0f		      cmp	#NO_MOVE	; 2
   1502  f6a6		       f0 0c		      beq	.noMove	; 2³
   1503  f6a8		       a2 00		      ldx	#0	; 2
   1504  f6aa					      IF	SCREENSAVER
   1505  f6aa		       86 d1		      stx	SS_Delay	; 3		     reset screensaver
   1506  f6ac				  -	      ELSE
   1507  f6ac				  -	      FILL_NOP	2
   1508  f6ac					      ENDIF
   1509  f6ac		       a5 d8		      lda	timerHi	; 3
   1510  f6ae		       c9 20		      cmp	#STARTTIME	; 2		     timer at 20:00?
   1511  f6b0		       d0 02		      bne	.noMove	; 2³		       no, skip
   1512  f6b2		       86 9e		      stx	noGameScroll	; 3		      yes, game is running
   1513  f6b4				   .noMove
   1514  f6b4
   1515  f6b4							; read RESET switch:
   1516  f6b4		       ad 82 02 	      lda	SWCHB	; 4
   1517  f6b7		       4a		      lsr		; 2		     RESET pressed?
   1518  f6b8		       b0 05		      bcs	.noReset	; 2³		       no, skip
   1519  f6ba					      IF	SCREENSAVER
   1520  f6ba		       a2 d1		      ldx	#SS_Delay	; 2		      yes, load init-values offset..
   1521  f6bc				  -	      ELSE
   1522  f6bc				  -	      ldx	#frameCnt	; 2		      yes, load init-values offset..
   1523  f6bc					      ENDIF
   1524  f6bc		       4c 04 f0 	      jmp	Reset	; 3		     ..and jump to Reset
   1525  f6bf
   1526  f6bf				   .noReset
   1527  f6bf		       a5 9e		      lda	noGameScroll	; 3		     game running?
   1528  f6c1		       f0 03		      beq	.processHarry	; 2³		       yes, process Harry
   1529  f6c3		       4c dc f9 	      jmp	ProcessObjects	; 3		      no, skip Harry, goto objects
   1530  f6c6
   1531  f6c6							; *** process Harry: ***
   1532  f6c6				   .processHarry
   1533  f6c6		       e6 d3		      inc	frameCnt	; 5
   1534  f6c8		       a5 82		      lda	random2	; 3
   1535  f6ca		       0a		      asl		; 2
   1536  f6cb		       45 82		      eor	random2	; 3
   1537  f6cd		       0a		      asl		; 2
   1538  f6ce		       26 82		      rol	random2	; 5
   1539  f6d0		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1540  f6d2		       d0 43		      bne	.endDoJump	; 2³+1	       no, skip continue jump
   1541  f6d4		       a6 e7		      ldx	jumpIndex	; 3		     currently jumping?
   1542  f6d6		       f0 3f		      beq	.endDoJump	; 2³+1	       no, skip continue jump
   1543  f6d8		       a5 e9		      lda	yPosHarry	; 3		      yes, calculate..
   1544  f6da		       38		      sec		; 2		     ..new y-position of Harry
   1545  f6db		       fd ca fe 	      sbc	JumpTab-1,x	; 4
   1546  f6de		       85 e9		      sta	yPosHarry	; 3
   1547  f6e0		       e6 e7		      inc	jumpIndex	; 5
   1548  f6e2		       a5 e7		      lda	jumpIndex	; 3
   1549  f6e4		       c9 21		      cmp	#JUMP_LEN+1	; 2
   1550  f6e6		       90 04		      bcc	.indexOk	; 2³
   1551  f6e8		       a9 20		      lda	#JUMP_LEN	; 2
   1552  f6ea		       85 e7		      sta	jumpIndex	; 3
   1553  f6ec				   .indexOk
   1554  f6ec
   1555  f6ec		       a6 e9		      ldx	yPosHarry	; 3
   1556  f6ee		       e0 20		      cpx	#JUNGLE_GROUND	; 2		     Harry at jungle ground?
   1557  f6f0		       f0 1f		      beq	.stopJump	; 2³+1	       yes, stop any jump
   1558  f6f2		       a4 9d		      ldy	ladderFlag	; 3		     ladder in scene?
   1559  f6f4		       f0 0d		      beq	.skipFalling	; 2³+1	       no, skip falling
   1560  f6f6		       e0 22		      cpx	#JUNGLE_GROUND+2	; 2
   1561  f6f8		       d0 09		      bne	.skipFalling	; 2³+1
   1562  f6fa		       a9 53		      lda	#SOUND_FALLING	; 2		     Harry is falling into a hole
   1563  f6fc		       85 e0		      sta	soundIdx	; 3		     start falling-sound
   1564  f6fe		       a9 00		      lda	#$00	; 2
   1565  f700		       20 d3 f3 	      jsr	DecScoreHi	; 6		     subtract 100 points from score
   1566  f703				   .skipFalling
   1567  f703		       e0 56		      cpx	#UNDER_GROUND	; 2		     is Harry at underground bottom?
   1568  f705		       f0 0a		      beq	.stopJump	; 2³		       yes, stop any jump
   1569  f707		       e0 36		      cpx	#54	; 2		     has Harry reached the falling limit?
   1570  f709		       d0 0c		      bne	.endDoJump	; 2³		       no, skip
   1571  f70b		       98		      tya		; 2		     ladder in scene?
   1572  f70c		       d0 09		      bne	.endDoJump	; 2³		       no, skip kill
   1573  f70e		       4c cc fc 	      jmp	KilledHarry	; 3		      yes, Harry is killed
   1574  f711
   1575  f711				   .stopJump
   1576  f711		       a9 00		      lda	#0	; 2
   1577  f713		       85 e7		      sta	jumpIndex	; 3
   1578  f715		       85 f5		      sta	jumpMode	; 3
   1579  f717				   .endDoJump
   1580  f717
   1581  f717							; countdown timer:
   1582  f717		       c6 da		      dec	timerLo	; 5
   1583  f719		       10 1f		      bpl	.inTime	; 2³
   1584  f71b		       a9 3b		      lda	#FRAMERATE-1	; 2
   1585  f71d		       85 da		      sta	timerLo	; 3
   1586  f71f		       f8		      sed		; 2
   1587  f720		       a5 d9		      lda	timerMed	; 3
   1588  f722		       38		      sec		; 2
   1589  f723		       e9 01		      sbc	#$01	; 2
   1590  f725		       b0 02		      bcs	.contMinute	; 2³
   1591  f727		       a9 59		      lda	#$59	; 2		     start next minute
   1592  f729				   .contMinute
   1593  f729		       85 d9		      sta	timerMed	; 3
   1594  f72b		       a5 d8		      lda	timerHi	; 3
   1595  f72d				  -	      IF	TRAINER
   1596  f72d				  -	      lda	#$19	; 2
   1597  f72d					      ELSE
   1598  f72d		       e9 00		      sbc	#$00	; 2
   1599  f72f					      ENDIF
   1600  f72f		       85 d8		      sta	timerHi	; 3
   1601  f731		       d8		      cld		; 2
   1602  f732		       a5 d8		      lda	timerHi	; 3		     any more..
   1603  f734		       05 d9		      ora	timerMed	; 3		     ..time left?
   1604  f736		       d0 02		      bne	.inTime	; 2³		       yes, continue
   1605  f738		       c6 9e		      dec	noGameScroll	; 5		      no, stop game
   1606  f73a				   .inTime
   1607  f73a
   1608  f73a							; check collisions between Harry and object:
   1609  f73a		       a5 d7		      lda	CXPPMM-$30	; 3		     Harry collided?
   1610  f73c		       30 06		      bmi	.contCollision	; 2³		       yes, process collisions
   1611  f73e		       a9 00		      lda	#0	; 2		      no, skip collisions
   1612  f740		       85 f2		      sta	patOfsHarry	; 3
   1613  f742		       f0 65		      beq	.endCollision	; 3
   1614  f744
   1615  f744				   .contCollision
   1616  f744		       a5 e9		      lda	yPosHarry	; 3
   1617  f746		       c9 40		      cmp	#64	; 2		     Harry at underground?
   1618  f748		       b0 62		      bcs	.checkWallHit	; 2³		       yes, check wall
   1619  f74a		       a5 ea		      lda	atLiana	; 3		      no, Harry at liana?
   1620  f74c		       d0 5b		      bne	.endCollision	; 2³		       yes, skip
   1621  f74e		       a5 94		      lda	sceneType	; 3
   1622  f750		       c9 04		      cmp	#CROCO_SCENE	; 2		     croco in scene?
   1623  f752		       f0 55		      beq	.endCollision	; 2³		       yes, skip
   1624  f754		       c9 05		      cmp	#TREASURE_SCENE	; 2		     treasue in scene?
   1625  f756		       d0 29		      bne	.noTreasure1	; 2³		       no, skip
   1626  f758		       20 a9 fc 	      jsr	CheckTreasures	; 6		      yes, check if treasure was found before
   1627  f75b		       d0 4c		      bne	.endCollision	; 2³
   1628  f75d		       95 ed		      sta	treasureBits,x	; 4		     clear treasure bit
   1629  f75f		       c6 f1		      dec	treasureCnt	; 5		     all treasures found
   1630  f761		       10 02		      bpl	.incScore	; 2³		       no, skip
   1631  f763		       c6 9e		      dec	noGameScroll	; 5		      yes, game finished!!!
   1632  f765
   1633  f765							; treasure found, increase score:
   1634  f765				   .incScore
   1635  f765		       a5 93		      lda	objectType	; 3
   1636  f767		       29 03		      and	#$03	; 2
   1637  f769		       0a		      asl		; 2
   1638  f76a		       0a		      asl		; 2
   1639  f76b		       0a		      asl		; 2
   1640  f76c		       0a		      asl		; 2
   1641  f76d		       69 20		      adc	#$20	; 2		     add at least 2000 points
   1642  f76f		       f8		      sed		; 2
   1643  f770		       65 d6		      adc	scoreMed	; 3
   1644  f772		       85 d6		      sta	scoreMed	; 3
   1645  f774		       a9 00		      lda	#$00	; 2
   1646  f776		       65 d5		      adc	scoreHi	; 3
   1647  f778		       85 d5		      sta	scoreHi	; 3
   1648  f77a		       d8		      cld		; 2
   1649  f77b		       a9 25		      lda	#SOUND_TREASURE	; 2
   1650  f77d		       85 e0		      sta	soundIdx	; 3
   1651  f77f		       d0 28		      bne	.endCollision	; 3
   1652  f781
   1653  f781				   .noTreasure1
   1654  f781		       a5 93		      lda	objectType	; 3
   1655  f783		       c9 06		      cmp	#ID_FIRE	; 2		     fire or cobra?
   1656  f785		       90 03		      bcc	.hitLogs	; 2³		       no, hit by rolling logs
   1657  f787				   .noWallHit
   1658  f787		       4c cc fc 	      jmp	KilledHarry	; 3		     Harry is killed
   1659  f78a
   1660  f78a				   .hitLogs
   1661  f78a		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1662  f78c		       f0 04		      beq	.notAtLadder	; 2³		       no, skip push
   1663  f78e		       e6 ec		      inc	climbPos	; 5		      yes, push down Harry
   1664  f790		       d0 14		      bne	.decScore	; 3
   1665  f792
   1666  f792				   .notAtLadder
   1667  f792		       a5 e9		      lda	yPosHarry	; 3
   1668  f794		       c9 21		      cmp	#JUNGLE_GROUND+1	; 2
   1669  f796		       b0 11		      bcs	.endCollision	; 2³
   1670  f798		       a9 05		      lda	#5	; 2
   1671  f79a		       85 f2		      sta	patOfsHarry	; 3
   1672  f79c		       a5 93		      lda	objectType	; 3
   1673  f79e		       29 04		      and	#$04	; 2
   1674  f7a0		       d0 04		      bne	.decScore	; 2³
   1675  f7a2		       a9 0f		      lda	#NO_MOVE	; 2
   1676  f7a4		       85 83		      sta	joystick	; 3
   1677  f7a6				   .decScore
   1678  f7a6		       20 cd f3 	      jsr	DecScoreLo	; 6
   1679  f7a9				   .endCollision
   1680  f7a9		       4c d0 f7 	      jmp	.swingLiana	; 3
   1681  f7ac
   1682  f7ac				   .checkWallHit
   1683  f7ac		       a5 bd		      lda	wallPatPtr	; 3
   1684  f7ae		       c9 b0		      cmp	#<Wall	; 2		     wall displayed in scene?
   1685  f7b0		       d0 d5		      bne	.noWallHit	; 2³		       no, skip
   1686  f7b2		       a9 01		      lda	#$01	; 2		      yes, make some noise
   1687  f7b4		       85 16		      sta	AUDC1	; 3
   1688  f7b6		       a5 e1		      lda	xPosHarry	; 3		     determine where Harry hit the wall
   1689  f7b8		       c9 8c		      cmp	#140	; 2		     right wall from the right?
   1690  f7ba		       b0 08		      bcs	.hitFromRight	; 2³		       yes, continue
   1691  f7bc		       c9 0d		      cmp	#13	; 2		     left wall from the left?
   1692  f7be		       90 0a		      bcc	.hitFromLeft	; 2³		       yes, continue
   1693  f7c0		       c9 50		      cmp	#80	; 2		     left or right wall?
   1694  f7c2		       b0 06		      bcs	.hitFromLeft	; 2³
   1695  f7c4				   .hitFromRight
   1696  f7c4		       e6 e1		      inc	xPosHarry	; 5		     bounce back one pixel and..
   1697  f7c6		       a2 07		      ldx	#MOVE_RIGHT	; 2		     ..change direction to right
   1698  f7c8		       d0 04		      bne	.contWallHit	; 3
   1699  f7ca
   1700  f7ca				   .hitFromLeft
   1701  f7ca		       c6 e1		      dec	xPosHarry	; 5		     bounce back one pixel and..
   1702  f7cc		       a2 0b		      ldx	#MOVE_LEFT	; 2		     ..change direction to left
   1703  f7ce				   .contWallHit
   1704  f7ce		       86 e8		      stx	oldJoystick	; 3
   1705  f7d0
   1706  f7d0							; let the liana swing:
   1707  f7d0				   .swingLiana
   1708  f7d0							; calculate absolute position:
   1709  f7d0		       a5 df		      lda	lianaPosLo	; 3
   1710  f7d2		       0a		      asl		; 2
   1711  f7d3		       a5 de		      lda	lianaPosHi	; 3
   1712  f7d5		       2a		      rol		; 2
   1713  f7d6		       10 02		      bpl	.skipNeg	; 2³
   1714  f7d8		       49 ff		      eor	#$ff	; 2
   1715  f7da				   .skipNeg
   1716  f7da		       85 dc		      sta	hmblAdd	; 3		     store absolute value (-> angle of liana)
   1717  f7dc		       a0 f0		      ldy	#$f0	; 2		     liana moves right
   1718  f7de				  -	      IF	OPTIMIZE
   1719  f7de				  -	      bcs	.skipMoveLeft	; 2³
   1720  f7de				  -	      FILL_NOP	2
   1721  f7de					      ELSE
   1722  f7de		       a5 de		      lda	lianaPosHi	; 3
   1723  f7e0		       30 02		      bmi	.skipMoveLeft	; 2³
   1724  f7e2					      ENDIF
   1725  f7e2		       a0 10		      ldy	#$10	; 2		     liana moves left
   1726  f7e4				   .skipMoveLeft
   1727  f7e4		       84 dd		      sty	hmblDir	; 3
   1728  f7e6		       38		      sec		; 2
   1729  f7e7		       a9 8f		      lda	#143	; 2
   1730  f7e9		       e5 dc		      sbc	hmblAdd	; 3
   1731  f7eb		       18		      clc		; 2
   1732  f7ec		       65 df		      adc	lianaPosLo	; 3
   1733  f7ee		       85 df		      sta	lianaPosLo	; 3
   1734  f7f0		       90 06		      bcc	.skipAddHi	; 2³
   1735  f7f2		       a5 de		      lda	lianaPosHi	; 3
   1736  f7f4		       69 03		      adc	#3	; 2
   1737  f7f6		       85 de		      sta	lianaPosHi	; 3
   1738  f7f8				   .skipAddHi
   1739  f7f8							; calculate bottom of liana:
   1740  f7f8		       a5 dc		      lda	hmblAdd	; 3		     this are no exactly maths,..
   1741  f7fa		       4a		      lsr		; 2		     ..but who cares, as long..
   1742  f7fb		       4a		      lsr		; 2		     ..as it's looking ok :)
   1743  f7fc		       4a		      lsr		; 2
   1744  f7fd		       c9 05		      cmp	#6-1	; 2
   1745  f7ff		       b0 02		      bcs	.limitBottom	; 2³		      limit bottom of liana to 6
   1746  f801		       a9 06		      lda	#6	; 2
   1747  f803				   .limitBottom
   1748  f803		       69 04		      adc	#4	; 2
   1749  f805		       85 92		      sta	lianaBottom	; 3
   1750  f807
   1751  f807							; check for a new jump:
   1752  f807		       a5 e7		      lda	jumpIndex	; 3		     currently jumping?
   1753  f809		       f0 04		      beq	.notJumping	; 2³		       no,
   1754  f80b		       c9 03		      cmp	#3	; 2		     jump just started?
   1755  f80d		       90 21		      bcc	.saveDir	; 2³		       yes, save joystick direction
   1756  f80f				   .notJumping
   1757  f80f		       05 ec		      ora	climbPos	; 3		     Harry at ladder..
   1758  f811		       05 f2		      ora	patOfsHarry	; 3		     ..or Harry kneeing..
   1759  f813		       05 ea		      ora	atLiana	; 3		     ..or Harry at liana?
   1760  f815		       d0 1d		      bne	.noFire	; 2³		       yes, skip new jump
   1761  f817		       a5 dc		      lda	INPT4-$30	; 3
   1762  f819		       29 80		      and	#%10000000	; 2
   1763  f81b		       c5 84		      cmp	fireButton	; 3
   1764  f81d		       85 84		      sta	fireButton	; 3
   1765  f81f		       f0 13		      beq	.noFire	; 2³
   1766  f821		       aa		      tax		; 2
   1767  f822		       30 10		      bmi	.noFire	; 2³
   1768  f824							; start jump:
   1769  f824		       a9 01		      lda	#1	; 2		     start jumping sequence
   1770  f826		       85 e7		      sta	jumpIndex	; 3
   1771  f828					      IF	SCREENSAVER
   1772  f828		       85 d1		      sta	SS_Delay	; 3
   1773  f82a				  -	      ELSE
   1774  f82a				  -	      FILL_NOP	2
   1775  f82a					      ENDIF
   1776  f82a		       a9 20		      lda	#SOUND_JUMP	; 2
   1777  f82c		       85 e0		      sta	soundIdx	; 3
   1778  f82e		       c6 e9		      dec	yPosHarry	; 5		     move Harry up
   1779  f830				   .saveDir
   1780  f830		       a5 83		      lda	joystick	; 3
   1781  f832		       85 e8		      sta	oldJoystick	; 3
   1782  f834				   .noFire
   1783  f834
   1784  f834							; check for jumping of liana:
   1785  f834		       a5 ea		      lda	atLiana	; 3		     Harry at liana?
   1786  f836		       f0 18		      beq	.skipJumpOff	; 2³		       no, skip jump of liana
   1787  f838		       a5 83		      lda	joystick	; 3
   1788  f83a		       29 02		      and	#~[$f0|MOVE_DOWN]	; 2		     joystick down?
   1789  f83c		       d0 12		      bne	.skipJumpOff	; 2³		       no, skip
   1790  f83e		       85 ea		      sta	atLiana	; 3		      yes, leave "liana mode"
   1791  f840		       a9 10		      lda	#JUMP_LEN/2	; 2		     start jump down
   1792  f842		       85 e7		      sta	jumpIndex	; 3
   1793  f844		       85 f5		      sta	jumpMode	; 3
   1794  f846		       a0 07		      ldy	#MOVE_RIGHT	; 2
   1795  f848		       a5 dd		      lda	hmblDir	; 3		     jump in liana direction
   1796  f84a		       30 02		      bmi	.jumpRight	; 2³
   1797  f84c		       a0 0b		      ldy	#MOVE_LEFT	; 2
   1798  f84e				   .jumpRight
   1799  f84e		       84 e8		      sty	oldJoystick	; 3
   1800  f850				   .skipJumpOff
   1801  f850
   1802  f850							; check for starting climbing ladder:
   1803  f850		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1804  f852		       d0 30		      bne	.endStartClimb	; 2³		       yes, skip
   1805  f854		       a5 9d		      lda	ladderFlag	; 3		     ladder in scene?
   1806  f856		       f0 2c		      beq	.endStartClimb	; 2³		       no, skip
   1807  f858		       a5 e1		      lda	xPosHarry	; 3
   1808  f85a		       38		      sec		; 2
   1809  f85b		       e9 44		      sbc	#68	; 2
   1810  f85d		       c9 0f		      cmp	#15	; 2		     Harry at x-position of ladder (+/-7)?
   1811  f85f		       b0 23		      bcs	.endStartClimb	; 2³		       no, skip
   1812  f861		       a5 e9		      lda	yPosHarry	; 3		      yes,
   1813  f863		       c9 54		      cmp	#84	; 2		     Harry near bottom of underground
   1814  f865		       90 09		      bcc	.skipClimbUp	; 2³		       no, skip
   1815  f867		       a5 83		      lda	joystick	; 3		      yes,
   1816  f869		       4a		      lsr		; 2		     joystick up?
   1817  f86a		       b0 04		      bcs	.skipClimbUp	; 2³		       no, skip
   1818  f86c		       a9 15		      lda	#LADDER_BOTTOM-1	; 2		      yes, start climbing up the ladder
   1819  f86e		       d0 0e		      bne	.contClimbUp	; 3
   1820  f870
   1821  f870				   .skipClimbUp
   1822  f870		       a5 e9		      lda	yPosHarry	; 3
   1823  f872		       c9 20		      cmp	#JUNGLE_GROUND	; 2		     Harry at jungle-ground?
   1824  f874		       d0 0e		      bne	.endStartClimb	; 2³		       no, skip
   1825  f876		       a5 83		      lda	joystick	; 3
   1826  f878		       29 02		      and	#~[$f0|MOVE_DOWN]	; 2		     joystick down?
   1827  f87a		       d0 08		      bne	.endStartClimb	; 2³		       no, skip
   1828  f87c		       a9 0c		      lda	#LADDER_TOP+1	; 2		      yes, start climbing down the ladder
   1829  f87e				   .contClimbUp
   1830  f87e		       85 ec		      sta	climbPos	; 3
   1831  f880		       a9 4c		      lda	#SCREENWIDTH/2-4	; 2		     set x-position of..
   1832  f882		       85 e1		      sta	xPosHarry	; 3		     ..Harry at ladder
   1833  f884				   .endStartClimb
   1834  f884
   1835  f884							; move Harry when swinging at liana:
   1836  f884		       a5 ea		      lda	atLiana	; 3		     Harry at liana?
   1837  f886		       f0 17		      beq	.skipSwingHarry	; 2³		       no, skip moving Harry
   1838  f888							; set x-position of Harry:
   1839  f888		       a5 dc		      lda	hmblAdd	; 3
   1840  f88a		       4a		      lsr		; 2
   1841  f88b		       4a		      lsr		; 2
   1842  f88c		       18		      clc		; 2
   1843  f88d		       a4 dd		      ldy	hmblDir	; 3
   1844  f88f		       30 03		      bmi	.isNeg	; 2³
   1845  f891		       49 ff		      eor	#$ff	; 2		     negate
   1846  f893		       38		      sec		; 2
   1847  f894				   .isNeg
   1848  f894		       69 4b		      adc	#75	; 2
   1849  f896		       85 e1		      sta	xPosHarry	; 3
   1850  f898							; set y-position of Harry:
   1851  f898		       a9 29		      lda	#$29	; 2
   1852  f89a		       38		      sec		; 2
   1853  f89b		       e5 92		      sbc	lianaBottom	; 3
   1854  f89d		       85 e9		      sta	yPosHarry	; 3
   1855  f89f				   .skipSwingHarry
   1856  f89f
   1857  f89f							; check Harry climbing ladder:
   1858  f89f		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1859  f8a1		       f0 3d		      beq	.endClimbLadder	; 2³		       no, skip
   1860  f8a3		       a9 00		      lda	#0	; 2
   1861  f8a5		       85 e7		      sta	jumpIndex	; 3
   1862  f8a7		       a5 d3		      lda	frameCnt	; 3
   1863  f8a9		       29 07		      and	#$07	; 2		     climb every 8th frame
   1864  f8ab		       d0 28		      bne	.skipAnimClimb	; 2³
   1865  f8ad		       a5 83		      lda	joystick	; 3
   1866  f8af		       4a		      lsr		; 2		     joystick up?
   1867  f8b0		       b0 02		      bcs	.notClimbUp	; 2³		       no, skip
   1868  f8b2		       c6 ec		      dec	climbPos	; 5		      yes, climb up
   1869  f8b4				   .notClimbUp
   1870  f8b4		       4a		      lsr		; 2		     joystick down?
   1871  f8b5		       b0 02		      bcs	.notClimbDown	; 2³		       no, skip
   1872  f8b7		       e6 ec		      inc	climbPos	; 5		      yes, climb down
   1873  f8b9				   .notClimbDown
   1874  f8b9		       a5 ec		      lda	climbPos	; 3
   1875  f8bb		       c9 0b		      cmp	#LADDER_TOP	; 2		     top reached?
   1876  f8bd		       b0 06		      bcs	.skipLadderTop	; 2³		       no, skip
   1877  f8bf		       a9 0f		      lda	#NO_MOVE	; 2
   1878  f8c1		       85 e8		      sta	oldJoystick	; 3
   1879  f8c3		       a9 0b		      lda	#LADDER_TOP	; 2
   1880  f8c5				   .skipLadderTop
   1881  f8c5		       c9 16		      cmp	#LADDER_BOTTOM	; 2		     bottom reached?
   1882  f8c7		       90 0a		      bcc	.skipLadderBottom	; 2³		       no, skip
   1883  f8c9		       a9 00		      lda	#0	; 2		     remove Harry from ladder
   1884  f8cb		       a2 05		      ldx	#ID_STANDING	; 2
   1885  f8cd		       86 e4		      stx	patIdHarry	; 3
   1886  f8cf		       a2 56		      ldx	#SCREENWIDTH/2+6	; 2
   1887  f8d1		       86 e9		      stx	yPosHarry	; 3
   1888  f8d3				   .skipLadderBottom
   1889  f8d3		       85 ec		      sta	climbPos	; 3
   1890  f8d5				   .skipAnimClimb
   1891  f8d5		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   1892  f8d7		       f0 07		      beq	.endClimbLadder	; 2³		       no, skip
   1893  f8d9		       0a		      asl		; 2		      yes, calculate y-position of Harry
   1894  f8da		       38		      sec		; 2
   1895  f8db		       2a		      rol		; 2
   1896  f8dc		       69 01		      adc	#1	; 2
   1897  f8de		       85 e9		      sta	yPosHarry	; 3
   1898  f8e0				   .endClimbLadder
   1899  f8e0
   1900  f8e0							; animate running Harry:
   1901  f8e0		       a5 ea		      lda	atLiana	; 3		     Harry at liana?
   1902  f8e2		       d0 63		      bne	.endHarryId	; 2³+1	       yes, skip running
   1903  f8e4		       a5 ec		      lda	climbPos	; 3
   1904  f8e6		       c9 0c		      cmp	#LADDER_TOP+1	; 2		     Harry at ladder bottom?
   1905  f8e8		       b0 5d		      bcs	.endHarryId	; 2³+1	       no, skip running
   1906  f8ea		       a5 d3		      lda	frameCnt	; 3		     animate Harry (every 4th frame)
   1907  f8ec		       29 03		      and	#$03	; 2
   1908  f8ee		       aa		      tax		; 2
   1909  f8ef		       4a		      lsr		; 2
   1910  f8f0		       b0 55		      bcs	.endHarryId	; 2³+1
   1911  f8f2		       a5 e8		      lda	oldJoystick	; 3
   1912  f8f4		       a4 e7		      ldy	jumpIndex	; 3		     currently jumping?
   1913  f8f6		       d0 02		      bne	.isJumping	; 2³		       yes, use old joystick input
   1914  f8f8		       a5 83		      lda	joystick	; 3		      no, use new joystick input
   1915  f8fa				   .isJumping
   1916  f8fa		       4a		      lsr		; 2
   1917  f8fb		       4a		      lsr		; 2
   1918  f8fc		       4a		      lsr		; 2		     joystick left?
   1919  f8fd		       b0 0f		      bcs	.skipLeft	; 2³+1	       no, skip
   1920  f8ff		       c6 e1		      dec	xPosHarry	; 5
   1921  f901		       a0 08		      ldy	#REFLECT	; 2
   1922  f903		       84 e5		      sty	reflectHarry	; 3
   1923  f905		       e0 00		      cpx	#0	; 2		     4th frame?
   1924  f907		       d0 02		      bne	.skipAnimLeft	; 2³		       no, skip animation
   1925  f909		       c6 e4		      dec	patIdHarry	; 5
   1926  f90b				   .skipAnimLeft
   1927  f90b		       4c 1d f9 	      jmp	.endAnimHarry	; 3
   1928  f90e
   1929  f90e				   .skipLeft
   1930  f90e		       4a		      lsr		; 2		     joystick right?
   1931  f90f		       b0 0c		      bcs	.endAnimHarry	; 2³		       no, skip
   1932  f911		       e6 e1		      inc	xPosHarry	; 5
   1933  f913		       a0 00		      ldy	#NOREFLECT	; 2
   1934  f915		       84 e5		      sty	reflectHarry	; 3
   1935  f917		       e0 00		      cpx	#0	; 2		     4th frame?
   1936  f919		       d0 02		      bne	.endAnimHarry	; 2³		       no, skip animation
   1937  f91b		       c6 e4		      dec	patIdHarry	; 5
   1938  f91d				   .endAnimHarry
   1939  f91d
   1940  f91d							; goto next scene, if Harry has reached border of current scene:
   1941  f91d		       a2 00		      ldx	#0	; 2		     move one scene
   1942  f91f		       a5 e9		      lda	yPosHarry	; 3
   1943  f921		       c9 40		      cmp	#64	; 2		     Harry at underground?
   1944  f923		       90 02		      bcc	.oneScene	; 2³		       yes, move one scene
   1945  f925		       a2 02		      ldx	#2	; 2		      no, move three scenes
   1946  f927				   .oneScene
   1947  f927		       a5 e1		      lda	xPosHarry	; 3
   1948  f929		       c9 08		      cmp	#XMIN_HARRY	; 2
   1949  f92b		       b0 07		      bcs	.notAtLeft	; 2³
   1950  f92d		       20 ab fa 	      jsr	LeftRandom	; 6
   1951  f930		       a9 94		      lda	#XMAX_HARRY	; 2
   1952  f932		       85 e1		      sta	xPosHarry	; 3
   1953  f934				   .notAtLeft
   1954  f934		       c9 95		      cmp	#XMAX_HARRY+1	; 2
   1955  f936		       90 07		      bcc	.notAtRight	; 2³
   1956  f938		       20 ad fe 	      jsr	RightRandom	; 6
   1957  f93b		       a9 08		      lda	#XMIN_HARRY	; 2
   1958  f93d		       85 e1		      sta	xPosHarry	; 3
   1959  f93f				   .notAtRight
   1960  f93f		       a5 e4		      lda	patIdHarry	; 3		     illegal animation id?
   1961  f941		       10 04		      bpl	.endHarryId	; 2³		       no, skip
   1962  f943		       a9 04		      lda	#ID_RUNNING4	; 2		      yes, start new animation sequence
   1963  f945		       85 e4		      sta	patIdHarry	; 3
   1964  f947				   .endHarryId
   1965  f947
   1966  f947							; move the scorpion towards harry:
   1967  f947		       a5 9d		      lda	ladderFlag	; 3		     ladder in scene?
   1968  f949		       d0 1d		      bne	.noMoveScorpion	; 2³		       yes, skip scorpion
   1969  f94b		       a2 00		      ldx	#NOREFLECT	; 2
   1970  f94d		       a5 e1		      lda	xPosHarry	; 3
   1971  f94f		       38		      sec		; 2
   1972  f950		       e5 e3		      sbc	xPosScorpion	; 3
   1973  f952		       f0 14		      beq	.noMoveScorpion	; 2³
   1974  f954		       b0 02		      bcs	.rightOfScorpion	; 2³
   1975  f956		       a2 08		      ldx	#REFLECT	; 2
   1976  f958				   .rightOfScorpion
   1977  f958		       a5 d3		      lda	frameCnt	; 3
   1978  f95a		       29 07		      and	#$07	; 2		     move scorpion every 8th frame
   1979  f95c		       d0 08		      bne	.endMoveScorpion	; 2³
   1980  f95e		       e6 e3		      inc	xPosScorpion	; 5
   1981  f960		       b0 04		      bcs	.endMoveScorpion	; 2³
   1982  f962		       c6 e3		      dec	xPosScorpion	; 5
   1983  f964		       c6 e3		      dec	xPosScorpion	; 5
   1984  f966				   .endMoveScorpion
   1985  f966		       86 e6		      stx	reflectScorpion	; 3
   1986  f968				   .noMoveScorpion
   1987  f968
   1988  f968		       a5 ec		      lda	climbPos	; 3
   1989  f96a		       c9 0b		      cmp	#LADDER_TOP	; 2		     Harry at ladder top?
   1990  f96c		       d0 17		      bne	.notAtTop	; 2³		       no, skip horizontal move
   1991  f96e		       a5 83		      lda	joystick	; 3
   1992  f970		       29 0c		      and	#JOY_HORZ	; 2
   1993  f972		       c9 0c		      cmp	#JOY_HORZ	; 2		     joystick left or right?
   1994  f974		       f0 0f		      beq	.notAtTop	; 2³		       no, skip
   1995  f976		       a5 83		      lda	joystick	; 3
   1996  f978		       85 e8		      sta	oldJoystick	; 3
   1997  f97a		       a9 01		      lda	#1	; 2
   1998  f97c		       85 e7		      sta	jumpIndex	; 3
   1999  f97e		       4a		      lsr		; 2
   2000  f97f		       85 ec		      sta	climbPos	; 3		     remove Harry from ladder (=0)
   2001  f981		       a9 1f		      lda	#31	; 2		     ..and remark this state
   2002  f983		       85 e9		      sta	yPosHarry	; 3
   2003  f985				   .notAtTop
   2004  f985		       a6 e4		      ldx	patIdHarry	; 3
   2005  f987		       a5 83		      lda	joystick	; 3
   2006  f989		       29 0c		      and	#JOY_HORZ	; 2
   2007  f98b		       c9 0c		      cmp	#JOY_HORZ	; 2		     joystick left or right??
   2008  f98d		       d0 02		      bne	.skipStanding	; 2³		       yes, skip
   2009  f98f		       a2 05		      ldx	#ID_STANDING	; 2		      no, draw standing Harry
   2010  f991				   .skipStanding
   2011  f991		       a5 e9		      lda	yPosHarry	; 3
   2012  f993		       c9 1f		      cmp	#31	; 2		     Harry just jumping of top of ladder?
   2013  f995		       d0 04		      bne	.notOfTop	; 2³		       no, skip
   2014  f997		       a2 03		      ldx	#3	; 2		      yes, draw diffenret shape
   2015  f999		       d0 16		      bne	.contPatId	; 3
   2016  f99b
   2017  f99b				   .notOfTop
   2018  f99b		       c9 56		      cmp	#UNDER_GROUND	; 2
   2019  f99d		       f0 12		      beq	.contPatId	; 2³
   2020  f99f		       c9 20		      cmp	#JUNGLE_GROUND	; 2
   2021  f9a1		       f0 0e		      beq	.contPatId	; 2³
   2022  f9a3		       a2 00		      ldx	#ID_KNEEING	; 2
   2023  f9a5		       90 0a		      bcc	.contPatId	; 2³
   2024  f9a7		       c9 3c		      cmp	#60	; 2
   2025  f9a9		       b0 06		      bcs	.contPatId	; 2³
   2026  f9ab		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   2027  f9ad		       d0 02		      bne	.contPatId	; 2³		       yes, skip
   2028  f9af		       a2 05		      ldx	#ID_STANDING	; 2		      no, draw standing Harry
   2029  f9b1				   .contPatId
   2030  f9b1		       a5 ea		      lda	atLiana	; 3		     Harry at liana?
   2031  f9b3		       f0 02		      beq	.skipStanding2	; 2³		       no, skip
   2032  f9b5		       a2 06		      ldx	#ID_SWINGING	; 2		      yes, draw swinging Harry
   2033  f9b7				   .skipStanding2
   2034  f9b7		       a5 ec		      lda	climbPos	; 3		     Harry at ladder?
   2035  f9b9		       f0 06		      beq	.noAnimClimb	; 2³		       no, skip
   2036  f9bb		       29 01		      and	#%1	; 2		      yes, animate climbing
   2037  f9bd		       18		      clc		; 2
   2038  f9be		       69 07		      adc	#ID_CLIMBING	; 2
   2039  f9c0		       aa		      tax		; 2
   2040  f9c1				   .noAnimClimb
   2041  f9c1		       a5 f2		      lda	patOfsHarry	; 3		     Harry hit by logs (kneeing)?
   2042  f9c3		       f0 02		      beq	.skipKneeing	; 2³		       no, skip
   2043  f9c5		       a2 00		      ldx	#ID_KNEEING	; 2		      yes, draw kneeing Harry
   2044  f9c7				   .skipKneeing
   2045  f9c7		       86 e4		      stx	patIdHarry	; 3
   2046  f9c9		       bd c2 fe 	      lda	HarryPtrTab,x	; 4
   2047  f9cc		       85 b5		      sta	harryPatPtr	; 3
   2048  f9ce		       a9 fb		      lda	#>Harry0	; 2
   2049  f9d0		       85 b6		      sta	harryPatPtr+1	; 3
   2050  f9d2		       a9 21		      lda	#<RunColTab	; 2
   2051  f9d4		       e0 07		      cpx	#ID_SWINGING+1	; 2
   2052  f9d6		       90 02		      bcc	.runColors	; 2³
   2053  f9d8		       a9 0b		      lda	#<ClimbColTab	; 2
   2054  f9da				   .runColors
   2055  f9da		       85 b9		      sta	harryColPtr	; 3
   2056  f9dc
   2057  f9dc				   ProcessObjects SUBROUTINE
   2058  f9dc		       a5 93		      lda	objectType	; 3
   2059  f9de		       aa		      tax		; 2
   2060  f9df		       a4 94		      ldy	sceneType	; 3
   2061  f9e1		       b9 a1 fc 	      lda	LianaTab,y	; 4
   2062  f9e4		       85 1f		      sta	ENABL	; 3
   2063  f9e6		       c0 05		      cpy	#TREASURE_SCENE	; 2		     treasure in scene?
   2064  f9e8		       d0 10		      bne	.noTreasure	; 2³		       yes, skip
   2065  f9ea		       20 a9 fc 	      jsr	CheckTreasures	; 6
   2066  f9ed		       f0 04		      beq	.withTreasure	; 2³
   2067  f9ef		       a2 0c		      ldx	#ID_NOTHING	; 2
   2068  f9f1		       d0 07		      bne	.noTreasure	; 3
   2069  f9f3
   2070  f9f3				   .withTreasure
   2071  f9f3		       a5 93		      lda	objectType	; 3
   2072  f9f5		       29 03		      and	#$03	; 2
   2073  f9f7		       09 08		      ora	#$08	; 2		     treasures only
   2074  f9f9		       aa		      tax		; 2
   2075  f9fa				   .noTreasure
   2076  f9fa
   2077  f9fa							; animate some treasures and hazards:
   2078  f9fa		       a5 82		      lda	random2	; 3
   2079  f9fc		       3d d9 ff 	      and	AnimateTab,x	; 4
   2080  f9ff		       85 f6		      sta	temp1	; 3
   2081  fa01		       bd eb fe 	      lda	ObjectPtrTab,x	; 4
   2082  fa04		       18		      clc		; 2
   2083  fa05		       65 f6		      adc	temp1	; 3
   2084  fa07		       85 b7		      sta	objPatPtr	; 3
   2085  fa09
   2086  fa09		       bd cd ff 	      lda	NuSize1Tab,x	; 4
   2087  fa0c		       85 d4		      sta	nusize1	; 3		     save number of object copies
   2088  fa0e		       bd c1 ff 	      lda	Color1PtrTab,x	; 4
   2089  fa11		       85 bb		      sta	objColPtr	; 3
   2090  fa13							; special processing for crocodiles:
   2091  fa13		       a4 94		      ldy	sceneType	; 3
   2092  fa15		       b9 ee ff 	      lda	CrocoTab,y	; 4
   2093  fa18		       f0 16		      beq	.noCroco	; 2³
   2094  fa1a		       a9 60		      lda	#<Croco0	; 2
   2095  fa1c		       24 d3		      bit	frameCnt	; 3		     open croco jaws?
   2096  fa1e		       10 02		      bpl	.skipClosed	; 2³		       yes, skip
   2097  fa20		       a9 70		      lda	#<Croco1	; 2		      no, use other shape
   2098  fa22				   .skipClosed
   2099  fa22		       85 b7		      sta	objPatPtr	; 3
   2100  fa24		       a9 30		      lda	#<CrocoColor	; 2
   2101  fa26		       85 bb		      sta	objColPtr	; 3
   2102  fa28		       a5 93		      lda	objectType	; 3
   2103  fa2a		       85 1f		      sta	ENABL	; 3
   2104  fa2c		       a9 03		      lda	#THREE_COPIES	; 2
   2105  fa2e		       85 d4		      sta	nusize1	; 3
   2106  fa30				   .noCroco
   2107  fa30		       a5 9e		      lda	noGameScroll	; 3		     game running?
   2108  fa32		       d0 2c		      bne	.skipLogs	; 2³		       no, skip
   2109  fa34		       b9 ee ff 	      lda	CrocoTab,y	; 4		     crocos in scene?
   2110  fa37		       d0 27		      bne	.skipLogs	; 2³		       no, skip
   2111  fa39		       c0 05		      cpy	#TREASURE_SCENE	; 2		     treasure in scene?
   2112  fa3b		       f0 23		      beq	.skipLogs	; 2³		       yes, skip
   2113  fa3d
   2114  fa3d							; animate, bounce and move rolling logs:
   2115  fa3d		       a5 e2		      lda	xPosObject	; 3
   2116  fa3f		       0a		      asl		; 2
   2117  fa40		       0a		      asl		; 2
   2118  fa41		       0a		      asl		; 2
   2119  fa42		       29 30		      and	#$30	; 2		     rolling logs bounce for..
   2120  fa44		       c9 30		      cmp	#$30	; 2		     ..2 pixel every 8th x-position
   2121  fa46		       29 10		      and	#$10	; 2
   2122  fa48		       65 b7		      adc	objPatPtr	; 3
   2123  fa4a		       85 b7		      sta	objPatPtr	; 3
   2124  fa4c		       a5 d3		      lda	frameCnt	; 3
   2125  fa4e		       4a		      lsr		; 2		     move logs every 2nd frame
   2126  fa4f		       b0 0f		      bcs	.skipLogs	; 2³
   2127  fa51		       a5 93		      lda	objectType	; 3
   2128  fa53		       c9 04		      cmp	#ID_STATIONARY	; 2		     rolling logs scene?
   2129  fa55		       b0 09		      bcs	.skipLogs	; 2³		       no, skip move
   2130  fa57		       a6 e2		      ldx	xPosObject	; 3
   2131  fa59		       d0 02		      bne	.skipResetLogs	; 2³
   2132  fa5b		       a2 a0		      ldx	#SCREENWIDTH	; 2
   2133  fa5d				   .skipResetLogs
   2134  fa5d		       ca		      dex		; 2
   2135  fa5e		       86 e2		      stx	xPosObject	; 3
   2136  fa60				   .skipLogs
   2137  fa60
   2138  fa60							; set score pointers, replace leading zeros with space:
   2139  fa60		       20 bf fc 	      jsr	SetDigitPtrs	; 6
   2140  fa63		       e8		      inx		; 2		     x = 0
   2141  fa64				   .loopSpace
   2142  fa64		       b5 c5		      lda	digitPtr,x	; 4
   2143  fa66		       d0 0a		      bne	.exitSpace	; 2³
   2144  fa68		       a9 58		      lda	#<Space	; 2
   2145  fa6a		       95 c5		      sta	digitPtr,x	; 4
   2146  fa6c		       e8		      inx		; 2
   2147  fa6d		       e8		      inx		; 2
   2148  fa6e		       e0 09		      cpx	#9	; 2
   2149  fa70		       90 f2		      bcc	.loopSpace	; 2³
   2150  fa72				   .exitSpace
   2151  fa72		       4c 0f f0 	      jmp	MainLoop	; 3
   2152  fa75
   2153  fa75
   2154  fa75				   InitGame   SUBROUTINE
   2155  fa75		       a2 01		      ldx	#1	; 2
   2156  fa77		       86 82		      stx	random2	; 3
   2157  fa79				   .loopInitSound
   2158  fa79		       a9 04		      lda	#$04	; 2		     init both sound channels
   2159  fa7b		       95 19		      sta	AUDV0,x	; 4
   2160  fa7d		       a9 10		      lda	#$10	; 2
   2161  fa7f		       95 17		      sta	AUDF0,x	; 4
   2162  fa81		       ca		      dex		; 2
   2163  fa82		       10 f5		      bpl	.loopInitSound	; 2³
   2164  fa84
   2165  fa84		       86 9e		      stx	noGameScroll	; 3		     game is stopped
   2166  fa86		       85 e1		      sta	xPosHarry	; 3
   2167  fa88		       0a		      asl		; 2
   2168  fa89		       85 e9		      sta	yPosHarry	; 3
   2169  fa8b		       85 d6		      sta	scoreMed	; 3		     = $20
   2170  fa8d				  -	      IF	STARTTIME != $20
   2171  fa8d				  -	      lda	#STARTTIME
   2172  fa8d					      ENDIF
   2173  fa8d		       85 d8		      sta	timerHi	; 3
   2174  fa8f
   2175  fa8f		       a2 1b		      ldx	#27	; 2
   2176  fa91				   .loopInit
   2177  fa91		       bd 91 fe 	      lda	InitTab,x	; 4
   2178  fa94		       95 b5		      sta	harryPatPtr,x	; 4
   2179  fa96		       ca		      dex		; 2
   2180  fa97		       10 f8		      bpl	.loopInit	; 2³
   2181  fa99
   2182  fa99		       a9 3b		      lda	#FRAMERATE-1	; 2
   2183  fa9b		       85 da		      sta	timerLo	; 3
   2184  fa9d		       a9 1f		      lda	#31	; 2
   2185  fa9f		       85 f1		      sta	treasureCnt	; 3
   2186  faa1		       a9 a0		      lda	#%10100000	; 2		     3 lives
   2187  faa3		       85 80		      sta	livesPat	; 3
   2188  faa5		       a9 c4		      lda	#RAND_SEED	; 2		     set starting scene
   2189  faa7		       85 81		      sta	random	; 3
   2190  faa9		       d0 13		      bne	ContRandom	; 3
   2191  faab
   2192  faab				   LeftRandom SUBROUTINE
   2193  faab							; generate new random scene on the left:
   2194  faab				   .loopRandom
   2195  faab							; random' = random >> 1 | (bit4^bit5^bit6^bit0) * $80
   2196  faab		       a5 81		      lda	random	; 3
   2197  faad		       0a		      asl		; 2
   2198  faae		       45 81		      eor	random	; 3
   2199  fab0		       0a		      asl		; 2
   2200  fab1		       45 81		      eor	random	; 3
   2201  fab3		       0a		      asl		; 2
   2202  fab4		       0a		      asl		; 2
   2203  fab5		       2a		      rol		; 2
   2204  fab6		       45 81		      eor	random	; 3
   2205  fab8		       4a		      lsr		; 2
   2206  fab9		       66 81		      ror	random	; 5
   2207  fabb		       ca		      dex		; 2
   2208  fabc		       10 ed		      bpl	.loopRandom	; 2³
   2209  fabe				   ContRandom
   2210  fabe		       a9 7c		      lda	#124	; 2		     x-position of logs, fire, cobra or treasure
   2211  fac0		       85 e2		      sta	xPosObject	; 3
   2212  fac2		       a5 81		      lda	random	; 3
   2213  fac4		       4a		      lsr		; 2
   2214  fac5		       4a		      lsr		; 2
   2215  fac6		       4a		      lsr		; 2
   2216  fac7		       48		      pha		; 3
   2217  fac8		       29 07		      and	#%111	; 2
   2218  faca		       85 94		      sta	sceneType	; 3		     bits 3..5
   2219  facc		       68		      pla		; 4
   2220  facd		       4a		      lsr		; 2
   2221  face		       4a		      lsr		; 2
   2222  facf		       4a		      lsr		; 2
   2223  fad0		       85 eb		      sta	treePat	; 3		     bits 6 & 7
   2224  fad2		       a5 81		      lda	random	; 3
   2225  fad4		       29 07		      and	#%111	; 2
   2226  fad6		       85 93		      sta	objectType	; 3		     bits 0..2
   2227  fad8		       a2 4c		      ldx	#SCREENWIDTH/2-4	; 2		     center x-position of scorpion
   2228  fada		       a0 00		      ldy	#NOLADDER	; 2
   2229  fadc		       a5 94		      lda	sceneType	; 3
   2230  fade		       c9 02		      cmp	#HOLE3_SCENE+1	; 2		     scene with hole(s)?
   2231  fae0		       b0 0b		      bcs	.setFlag	; 2³		       no, skip
   2232  fae2		       a0 ff		      ldy	#WITHLADDER	; 2		      yes, enable ladder
   2233  fae4		       a2 11		      ldx	#17	; 2		     left wall x-position
   2234  fae6		       a5 81		      lda	random	; 3
   2235  fae8		       0a		      asl		; 2		     position of the wall? (bit 7)
   2236  fae9		       90 02		      bcc	.setFlag	; 2³		       left, skip
   2237  faeb		       a2 88		      ldx	#136	; 2		      right wall x-position
   2238  faed				   .setFlag
   2239  faed		       84 9d		      sty	ladderFlag	; 3
   2240  faef		       86 e3		      stx	xPosScorpion	; 3		     also used for wall position
   2241  faf1
   2242  faf1		       a6 94		      ldx	sceneType	; 3
   2243  faf3		       bd ee ff 	      lda	CrocoTab,x	; 4
   2244  faf6		       f0 04		      beq	.noCrocos	; 2³
   2245  faf8		       a9 3c		      lda	#60	; 2		     x-position crocos
   2246  fafa		       85 e2		      sta	xPosObject	; 3
   2247  fafc				   .noCrocos
   2248  fafc		       60		      rts		; 6
   2249  fafd
   2250  fafd
   2251  fb00		       00 00 00 	      align	256
   2252  fb00
   2253  fb00				   Harry0
   2254  fb00		       00		      .byte.b	%00000000	; |	    |
   2255  fb01		       00		      .byte.b	%00000000	; |	    |
   2256  fb02		       00		      .byte.b	%00000000	; |	    |
   2257  fb03		       00		      .byte.b	%00000000	; |	    |
   2258  fb04		       00		      .byte.b	%00000000	; |	    |
   2259  fb05		       33		      .byte.b	%00110011	; |  XX  XX|
   2260  fb06		       72		      .byte.b	%01110010	; | XXX  X |
   2261  fb07		       da		      .byte.b	%11011010	; |XX XX X |
   2262  fb08		       1e		      .byte.b	%00011110	; |   XXXX |
   2263  fb09		       1c		      .byte.b	%00011100	; |   XXX  |
   2264  fb0a		       18		      .byte.b	%00011000	; |   XX   |
   2265  fb0b		       58		      .byte.b	%01011000	; | X XX   |
   2266  fb0c		       58		      .byte.b	%01011000	; | X XX   |
   2267  fb0d		       7c		      .byte.b	%01111100	; | XXXXX  |
   2268  fb0e		       3e		      .byte.b	%00111110	; |  XXXXX |
   2269  fb0f		       1a		      .byte.b	%00011010	; |   XX X |
   2270  fb10		       18		      .byte.b	%00011000	; |   XX   |
   2271  fb11		       10		      .byte.b	%00010000	; |   X    |
   2272  fb12		       18		      .byte.b	%00011000	; |   XX   |
   2273  fb13		       18		      .byte.b	%00011000	; |   XX   |
   2274  fb14		       18		      .byte.b	%00011000	; |   XX   |
   2275  fb15		       00		      .byte.b	%00000000	; |	    |
   2276  fb16				   Harry1
   2277  fb16		       00		      .byte.b	%00000000	; |	    |
   2278  fb17		       80		      .byte.b	%10000000	; |X	    |
   2279  fb18		       80		      .byte.b	%10000000	; |X	    |
   2280  fb19		       c3		      .byte.b	%11000011	; |XX	  XX|
   2281  fb1a		       62		      .byte.b	%01100010	; | XX   X |
   2282  fb1b		       62		      .byte.b	%01100010	; | XX   X |
   2283  fb1c		       36		      .byte.b	%00110110	; |  XX XX |
   2284  fb1d		       3e		      .byte.b	%00111110	; |  XXXXX |
   2285  fb1e		       1c		      .byte.b	%00011100	; |   XXX  |
   2286  fb1f		       18		      .byte.b	%00011000	; |   XX   |
   2287  fb20		       18		      .byte.b	%00011000	; |   XX   |
   2288  fb21		       3c		      .byte.b	%00111100	; |  XXXX  |
   2289  fb22		       3e		      .byte.b	%00111110	; |  XXXXX |
   2290  fb23		       3a		      .byte.b	%00111010	; |  XXX X |
   2291  fb24		       38		      .byte.b	%00111000	; |  XXX   |
   2292  fb25		       18		      .byte.b	%00011000	; |   XX   |
   2293  fb26		       18		      .byte.b	%00011000	; |   XX   |
   2294  fb27		       10		      .byte.b	%00010000	; |   X    |
   2295  fb28		       18		      .byte.b	%00011000	; |   XX   |
   2296  fb29		       18		      .byte.b	%00011000	; |   XX   |
   2297  fb2a		       18		      .byte.b	%00011000	; |   XX   |
   2298  fb2b		       00		      .byte.b	%00000000	; |	    |
   2299  fb2c				   Harry2
   2300  fb2c		       10		      .byte.b	%00010000	; |   X    |
   2301  fb2d		       20		      .byte.b	%00100000	; |  X     |
   2302  fb2e		       22		      .byte.b	%00100010	; |  X   X |
   2303  fb2f		       24		      .byte.b	%00100100	; |  X  X  |
   2304  fb30		       34		      .byte.b	%00110100	; |  XX X  |
   2305  fb31		       32		      .byte.b	%00110010	; |  XX  X |
   2306  fb32		       16		      .byte.b	%00010110	; |   X XX |
   2307  fb33		       1e		      .byte.b	%00011110	; |   XXXX |
   2308  fb34		       1c		      .byte.b	%00011100	; |   XXX  |
   2309  fb35		       18		      .byte.b	%00011000	; |   XX   |
   2310  fb36		       18		      .byte.b	%00011000	; |   XX   |
   2311  fb37		       1c		      .byte.b	%00011100	; |   XXX  |
   2312  fb38		       1c		      .byte.b	%00011100	; |   XXX  |
   2313  fb39		       18		      .byte.b	%00011000	; |   XX   |
   2314  fb3a		       18		      .byte.b	%00011000	; |   XX   |
   2315  fb3b		       18		      .byte.b	%00011000	; |   XX   |
   2316  fb3c		       18		      .byte.b	%00011000	; |   XX   |
   2317  fb3d		       10		      .byte.b	%00010000	; |   X    |
   2318  fb3e		       18		      .byte.b	%00011000	; |   XX   |
   2319  fb3f		       18		      .byte.b	%00011000	; |   XX   |
   2320  fb40		       18		      .byte.b	%00011000	; |   XX   |
   2321  fb41		       00		      .byte.b	%00000000	; |	    |
   2322  fb42				   Harry3
   2323  fb42		       0c		      .byte.b	%00001100	; |	XX  |
   2324  fb43		       08		      .byte.b	%00001000	; |	X   |
   2325  fb44		       28		      .byte.b	%00101000	; |  X X   |
   2326  fb45		       28		      .byte.b	%00101000	; |  X X   |
   2327  fb46		       3e		      .byte.b	%00111110	; |  XXXXX |
   2328  fb47		       0a		      .byte.b	%00001010	; |	X X |
   2329  fb48		       0e		      .byte.b	%00001110	; |	XXX |
   2330  fb49		       1c		      .byte.b	%00011100	; |   XXX  |
   2331  fb4a		       18		      .byte.b	%00011000	; |   XX   |
   2332  fb4b		       18		      .byte.b	%00011000	; |   XX   |
   2333  fb4c		       1c		      .byte.b	%00011100	; |   XXX  |
   2334  fb4d		       1c		      .byte.b	%00011100	; |   XXX  |
   2335  fb4e		       18		      .byte.b	%00011000	; |   XX   |
   2336  fb4f		       18		      .byte.b	%00011000	; |   XX   |
   2337  fb50		       18		      .byte.b	%00011000	; |   XX   |
   2338  fb51		       18		      .byte.b	%00011000	; |   XX   |
   2339  fb52		       18		      .byte.b	%00011000	; |   XX   |
   2340  fb53		       10		      .byte.b	%00010000	; |   X    |
   2341  fb54		       18		      .byte.b	%00011000	; |   XX   |
   2342  fb55		       18		      .byte.b	%00011000	; |   XX   |
   2343  fb56		       18		      .byte.b	%00011000	; |   XX   |
   2344  fb57		       00		      .byte.b	%00000000	; |	    |
   2345  fb58				   Harry4
   2346  fb58		       00		      .byte.b	%00000000	; |	    |
   2347  fb59		       02		      .byte.b	%00000010	; |	  X |
   2348  fb5a		       43		      .byte.b	%01000011	; | X	  XX|
   2349  fb5b		       44		      .byte.b	%01000100	; | X	 X  |
   2350  fb5c		       74		      .byte.b	%01110100	; | XXX X  |
   2351  fb5d		       14		      .byte.b	%00010100	; |   X X  |
   2352  fb5e		       1c		      .byte.b	%00011100	; |   XXX  |
   2353  fb5f		       1c		      .byte.b	%00011100	; |   XXX  |
   2354  fb60		       18		      .byte.b	%00011000	; |   XX   |
   2355  fb61		       18		      .byte.b	%00011000	; |   XX   |
   2356  fb62		       18		      .byte.b	%00011000	; |   XX   |
   2357  fb63		       3c		      .byte.b	%00111100	; |  XXXX  |
   2358  fb64		       3e		      .byte.b	%00111110	; |  XXXXX |
   2359  fb65		       3a		      .byte.b	%00111010	; |  XXX X |
   2360  fb66		       38		      .byte.b	%00111000	; |  XXX   |
   2361  fb67		       18		      .byte.b	%00011000	; |   XX   |
   2362  fb68		       18		      .byte.b	%00011000	; |   XX   |
   2363  fb69		       10		      .byte.b	%00010000	; |   X    |
   2364  fb6a		       18		      .byte.b	%00011000	; |   XX   |
   2365  fb6b		       18		      .byte.b	%00011000	; |   XX   |
   2366  fb6c		       18		      .byte.b	%00011000	; |   XX   |
   2367  fb6d		       00		      .byte.b	%00000000	; |	    |
   2368  fb6e				   Harry5
   2369  fb6e		       18		      .byte.b	%00011000	; |   XX   |
   2370  fb6f		       10		      .byte.b	%00010000	; |   X    |
   2371  fb70		       1c		      .byte.b	%00011100	; |   XXX  |
   2372  fb71		       18		      .byte.b	%00011000	; |   XX   |
   2373  fb72		       18		      .byte.b	%00011000	; |   XX   |
   2374  fb73		       18		      .byte.b	%00011000	; |   XX   |
   2375  fb74		       18		      .byte.b	%00011000	; |   XX   |
   2376  fb75		       18		      .byte.b	%00011000	; |   XX   |
   2377  fb76		       18		      .byte.b	%00011000	; |   XX   |
   2378  fb77		       18		      .byte.b	%00011000	; |   XX   |
   2379  fb78		       18		      .byte.b	%00011000	; |   XX   |
   2380  fb79		       18		      .byte.b	%00011000	; |   XX   |
   2381  fb7a		       1c		      .byte.b	%00011100	; |   XXX  |
   2382  fb7b		       1e		      .byte.b	%00011110	; |   XXXX |
   2383  fb7c		       1a		      .byte.b	%00011010	; |   XX X |
   2384  fb7d		       18		      .byte.b	%00011000	; |   XX   |
   2385  fb7e		       18		      .byte.b	%00011000	; |   XX   |
   2386  fb7f		       10		      .byte.b	%00010000	; |   X    |
   2387  fb80		       18		      .byte.b	%00011000	; |   XX   |
   2388  fb81		       18		      .byte.b	%00011000	; |   XX   |
   2389  fb82		       18		      .byte.b	%00011000	; |   XX   |
   2390  fb83		       00		      .byte.b	%00000000	; |	    |
   2391  fb84				   Harry6
   2392  fb84		       00		      .byte.b	%00000000	; |	    |
   2393  fb85		       00		      .byte.b	%00000000	; |	    |
   2394  fb86		       00		      .byte.b	%00000000	; |	    |
   2395  fb87		       00		      .byte.b	%00000000	; |	    |
   2396  fb88		       00		      .byte.b	%00000000	; |	    |
   2397  fb89		       00		      .byte.b	%00000000	; |	    |
   2398  fb8a		       63		      .byte.b	%01100011	; | XX   XX|
   2399  fb8b		       f2		      .byte.b	%11110010	; |XXXX  X |
   2400  fb8c		       f6		      .byte.b	%11110110	; |XXXX XX |
   2401  fb8d		       dc		      .byte.b	%11011100	; |XX XXX  |
   2402  fb8e		       c0		      .byte.b	%11000000	; |XX	    |
   2403  fb8f		       c0		      .byte.b	%11000000	; |XX	    |
   2404  fb90		       c0		      .byte.b	%11000000	; |XX	    |
   2405  fb91		       c0		      .byte.b	%11000000	; |XX	    |
   2406  fb92		       c0		      .byte.b	%11000000	; |XX	    |
   2407  fb93		       f0		      .byte.b	%11110000	; |XXXX    |
   2408  fb94		       d0		      .byte.b	%11010000	; |XX X    |
   2409  fb95		       90		      .byte.b	%10010000	; |X  X    |
   2410  fb96		       d0		      .byte.b	%11010000	; |XX X    |
   2411  fb97		       d0		      .byte.b	%11010000	; |XX X    |
   2412  fb98		       c0		      .byte.b	%11000000	; |XX	    |
   2413  fb99		       00		      .byte.b	%00000000	; |	    |
   2414  fb9a				   Harry7
   2415  fb9a		       30		      .byte.b	%00110000	; |  XX    |
   2416  fb9b		       10		      .byte.b	%00010000	; |   X    |
   2417  fb9c		       10		      .byte.b	%00010000	; |   X    |
   2418  fb9d		       10		      .byte.b	%00010000	; |   X    |
   2419  fb9e		       16		      .byte.b	%00010110	; |   X XX |
   2420  fb9f		       14		      .byte.b	%00010100	; |   X X  |
   2421  fba0		       14		      .byte.b	%00010100	; |   X X  |
   2422  fba1		       16		      .byte.b	%00010110	; |   X XX |
   2423  fba2		       12		      .byte.b	%00010010	; |   X  X |
   2424  fba3		       16		      .byte.b	%00010110	; |   X XX |
   2425  fba4		       1e		      .byte.b	%00011110	; |   XXXX |
   2426  fba5		       1c		      .byte.b	%00011100	; |   XXX  |
   2427  fba6		       18		      .byte.b	%00011000	; |   XX   |
   2428  fba7		       38		      .byte.b	%00111000	; |  XXX   |
   2429  fba8		       38		      .byte.b	%00111000	; |  XXX   |
   2430  fba9		       3c		      .byte.b	%00111100	; |  XXXX  |
   2431  fbaa		       1e		      .byte.b	%00011110	; |   XXXX |
   2432  fbab		       1a		      .byte.b	%00011010	; |   XX X |
   2433  fbac		       02		      .byte.b	%00000010	; |	  X |
   2434  fbad		       18		      .byte.b	%00011000	; |   XX   |
   2435  fbae		       18		      .byte.b	%00011000	; |   XX   |
   2436  fbaf		       18		      .byte.b	%00011000	; |   XX   |
   2437  fbb0				   Harry8
   2438  fbb0		       0c		      .byte.b	%00001100	; |	XX  |
   2439  fbb1		       08		      .byte.b	%00001000	; |	X   |
   2440  fbb2		       08		      .byte.b	%00001000	; |	X   |
   2441  fbb3		       08		      .byte.b	%00001000	; |	X   |
   2442  fbb4		       68		      .byte.b	%01101000	; | XX X   |
   2443  fbb5		       28		      .byte.b	%00101000	; |  X X   |
   2444  fbb6		       28		      .byte.b	%00101000	; |  X X   |
   2445  fbb7		       68		      .byte.b	%01101000	; | XX X   |
   2446  fbb8		       48		      .byte.b	%01001000	; | X	X   |
   2447  fbb9		       68		      .byte.b	%01101000	; | XX X   |
   2448  fbba		       78		      .byte.b	%01111000	; | XXXX   |
   2449  fbbb		       38		      .byte.b	%00111000	; |  XXX   |
   2450  fbbc		       18		      .byte.b	%00011000	; |   XX   |
   2451  fbbd		       1c		      .byte.b	%00011100	; |   XXX  |
   2452  fbbe		       1c		      .byte.b	%00011100	; |   XXX  |
   2453  fbbf		       3c		      .byte.b	%00111100	; |  XXXX  |
   2454  fbc0		       78		      .byte.b	%01111000	; | XXXX   |
   2455  fbc1		       58		      .byte.b	%01011000	; | X XX   |
   2456  fbc2		       40		      .byte.b	%01000000	; | X	    |
   2457  fbc3		       18		      .byte.b	%00011000	; |   XX   |
   2458  fbc4		       18		      .byte.b	%00011000	; |   XX   |
   2459  fbc5
   2460  fbc5				   BranchTab
   2461  fbc5		       18		      .byte.b	%00011000	; |   XX   |
   2462  fbc6		       7e		      .byte.b	%01111110	; | XXXXXX |
   2463  fbc7		       db		      .byte.b	%11011011	; |XX XX XX|
   2464  fbc8		       99		      .byte.b	%10011001	; |X  XX  X|
   2465  fbc9		       99		      .byte.b	%10011001	; |X  XX  X|
   2466  fbca		       99		      .byte.b	%10011001	; |X  XX  X|
   2467  fbcb		       99		      .byte.b	%10011001	; |X  XX  X|
   2468  fbcc		       99		      .byte.b	%10011001	; |X  XX  X|
   2469  fbcd		       99		      .byte.b	%10011001	; |X  XX  X|
   2470  fbce				   PF1LogTab
   2471  fbce		       80		      .byte.b	%10000000	; |X	    |
   2472  fbcf		       20		      .byte.b	%00100000	; |  X     |
   2473  fbd0		       08		      .byte.b	%00001000	; |	X   |
   2474  fbd1		       04		      .byte.b	%00000100	; |	 X  |
   2475  fbd2				   PF2LogTab
   2476  fbd2		       01		      .byte.b	%00000001	; |	   X|
   2477  fbd3		       04		      .byte.b	%00000100	; |	 X  |
   2478  fbd4		       10		      .byte.b	%00010000	; |   X    |
   2479  fbd5		       20		      .byte.b	%00100000	; |  X     |
   2480  fbd6
   2481  fbd6							; values for positioning branches (fine and coarse):
   2482  fbd6				   BranchPosLTab
   2483  fbd6		       43 c3 34 f4	      .byte.b	$43, $c3, $34, $f4
   2484  fbda				   BranchPosRTab
   2485  fbda		       f2 72 00 40	      .byte.b	$f2, $72, $00, $40
   2486  fbde
   2487  fbde							; pattern for different the jungle grounds:
   2488  fbde				   PF2PatTab
   2489  fbde				   OneHole
   2490  fbde		       7f		      .byte.b	%01111111	; | XXXXXXX|	     one hole
   2491  fbdf		       7f		      .byte.b	%01111111	; | XXXXXXX|
   2492  fbe0		       7f		      .byte.b	%01111111	; | XXXXXXX|
   2493  fbe1		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2494  fbe2		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2495  fbe3		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2496  fbe4		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2497  fbe5		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2498  fbe6				   ThreeHoles
   2499  fbe6		       78		      .byte.b	%01111000	; | XXXX   |	     three holes
   2500  fbe7		       78		      .byte.b	%01111000	; | XXXX   |
   2501  fbe8		       78		      .byte.b	%01111000	; | XXXX   |
   2502  fbe9		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2503  fbea		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2504  fbeb		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2505  fbec		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2506  fbed		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2507  fbee				   Pit
   2508  fbee		       00		      .byte.b	%00000000	; |	    |	     pits
   2509  fbef		       01		      .byte.b	%00000001	; |	   X|
   2510  fbf0		       03		      .byte.b	%00000011	; |	  XX|
   2511  fbf1		       0f		      .byte.b	%00001111	; |	XXXX|
   2512  fbf2		       7f		      .byte.b	%01111111	; | XXXXXXX|
   2513  fbf3		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2514  fbf4		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2515  fbf5		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2516  fbf6
   2517  fbf6		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2518  fbf7		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2519  fbf8		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2520  fbf9		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2521  fbfa		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2522  fbfb		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2523  fbfc		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2524  fbfd		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2525  fbfe
   2526  fbfe		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2527  fbff		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2528  fc00		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2529  fc01		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2530  fc02		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2531  fc03		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2532  fc04		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2533  fc05		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2534  fc06
   2535  fc06				   QuickSandSize
   2536  fc06		       00 04 08 10*	      .byte.b	0, 4, 8, 16, 28
   2537  fc0b
   2538  fc0b							; Harry's colors while climbing:
   2539  fc0b				   ClimbColTab
   2540  fc0b		       52		      .byte.b	DARK_GREEN
   2541  fc0c		       52		      .byte.b	DARK_GREEN
   2542  fc0d		       52		      .byte.b	DARK_GREEN
   2543  fc0e		       52		      .byte.b	DARK_GREEN
   2544  fc0f		       52		      .byte.b	DARK_GREEN
   2545  fc10		       52		      .byte.b	DARK_GREEN
   2546  fc11		       52		      .byte.b	DARK_GREEN
   2547  fc12		       52		      .byte.b	DARK_GREEN
   2548  fc13		       52		      .byte.b	DARK_GREEN
   2549  fc14		       52		      .byte.b	DARK_GREEN
   2550  fc15		       52		      .byte.b	DARK_GREEN
   2551  fc16		       52		      .byte.b	DARK_GREEN
   2552  fc17		       78		      .byte.b	YELLOW_GREEN
   2553  fc18		       78		      .byte.b	YELLOW_GREEN
   2554  fc19		       78		      .byte.b	YELLOW_GREEN
   2555  fc1a		       78		      .byte.b	YELLOW_GREEN
   2556  fc1b		       78		      .byte.b	YELLOW_GREEN
   2557  fc1c		       78		      .byte.b	YELLOW_GREEN
   2558  fc1d		       4a		      .byte.b	PINK
   2559  fc1e		       4a		      .byte.b	PINK
   2560  fc1f		       4a		      .byte.b	PINK
   2561  fc20		       22		      .byte.b	BROWN
   2562  fc21							; Harry's colors while running:
   2563  fc21				   RunColTab
   2564  fc21		       52		      .byte.b	DARK_GREEN
   2565  fc22		       52		      .byte.b	DARK_GREEN
   2566  fc23		       52		      .byte.b	DARK_GREEN
   2567  fc24		       52		      .byte.b	DARK_GREEN
   2568  fc25		       52		      .byte.b	DARK_GREEN
   2569  fc26		       52		      .byte.b	DARK_GREEN
   2570  fc27		       52		      .byte.b	DARK_GREEN
   2571  fc28		       52		      .byte.b	DARK_GREEN
   2572  fc29		       52		      .byte.b	DARK_GREEN
   2573  fc2a		       52		      .byte.b	DARK_GREEN
   2574  fc2b		       78		      .byte.b	YELLOW_GREEN
   2575  fc2c		       78		      .byte.b	YELLOW_GREEN
   2576  fc2d		       78		      .byte.b	YELLOW_GREEN
   2577  fc2e		       78		      .byte.b	YELLOW_GREEN
   2578  fc2f		       78		      .byte.b	YELLOW_GREEN
   2579  fc30		       78		      .byte.b	YELLOW_GREEN
   2580  fc31		       78		      .byte.b	YELLOW_GREEN
   2581  fc32		       4a		      .byte.b	PINK
   2582  fc33		       4a		      .byte.b	PINK
   2583  fc34		       4a		      .byte.b	PINK
   2584  fc35		       22		      .byte.b	BROWN
   2585  fc36
   2586  fc36				   SoundTab
   2587  fc36		       13 13 13 13*	      .byte.b	$13, $13, $13, $13, $13, $13, $13, $09, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $0b
   2588  fc46		       0b 0b 0b 0b*	      .byte.b	$0b, $0b, $0b, $0b, $09, $0b, $09, $0b, $0b, $0b, $0b, $0b, $0b, $0b, $8b, $06
   2589  fc56		       04 03 02 84	      .byte.b	$04, $03, $02, $84
   2590  fc5a		       13 13 0e 0b*	      .byte.b	$13, $13, $0e, $0b, $09, $09, $09, $0b, $09, $09, $09, $89
   2591  fc66		       1d 1d 1d 1d*	      .byte.b	$1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1d, $1a, $1a, $19, $19, $19, $19, $19
   2592  fc76		       19 1d 1d 1d*	      .byte.b	$19, $1d, $1d, $1d, $1d, $1d, $14, $15, $14, $15, $14, $15, $14, $15, $14, $15
   2593  fc86		       14 95		      .byte.b	$14, $95
   2594  fc88		       18 19 1a 1b*	      .byte.b	$18, $19, $1a, $1b, $1c, $1d, $1e, $9f
   2595  fc90
   2596  fc90				   QuickSandTab
   2597  fc90		       00		      .byte.b	%00000000	; |	    |
   2598  fc91		       0f		      .byte.b	%00001111	; |	XXXX|
   2599  fc92		       0f		      .byte.b	%00001111	; |	XXXX|
   2600  fc93		       00		      .byte.b	%00000000	; |	    |
   2601  fc94		       0f		      .byte.b	%00001111	; |	XXXX|		     next byte (0) overlaps
   2602  fc95
   2603  fc95				   LadderTab
   2604  fc95		       80 80 82 02	      .byte.b	BLACKPIT|DISABLE, BLACKPIT|DISABLE, BLACKPIT|ENABLE, BLUEPIT|ENABLE
   2605  fc99		       00 80 82 02	      .byte.b	BLUEPIT |DISABLE, BLACKPIT|DISABLE, BLACKPIT|ENABLE, BLUEPIT|ENABLE
   2606  fc9d		       00 00 02 02	      .byte.b	DISABLE, DISABLE, ENABLE, ENABLE	; some bytes overlap
   2607  fca1				   LianaTab
   2608  fca1		       00 00 02 02*	      .byte.b	DISABLE, DISABLE, ENABLE, ENABLE, ENABLE, DISABLE, ENABLE, DISABLE
   2609  fca9
   2610  fca9				   CheckTreasures
   2611  fca9		       a5 81		      lda	random	; 3
   2612  fcab		       2a		      rol		; 2
   2613  fcac		       2a		      rol		; 2
   2614  fcad		       2a		      rol		; 2
   2615  fcae		       29 03		      and	#$03	; 2
   2616  fcb0		       aa		      tax		; 2		     bits 7 & 8
   2617  fcb1		       a4 93		      ldy	objectType	; 3
   2618  fcb3		       b9 f8 fe 	      lda	TreasureMask,y	; 4
   2619  fcb6		       a8		      tay		; 2
   2620  fcb7		       35 ed		      and	treasureBits,x	; 4
   2621  fcb9		       08		      php		; 3
   2622  fcba		       98		      tya		; 2
   2623  fcbb		       15 ed		      ora	treasureBits,x	; 4
   2624  fcbd		       28		      plp		; 4
   2625  fcbe		       60		      rts		; 6
   2626  fcbf
   2627  fcbf				   SetDigitPtrs SUBROUTINE
   2628  fcbf		       a2 02		      ldx	#2	; 2		     -> 8
   2629  fcc1				   .loopSet
   2630  fcc1		       8a		      txa		; 2
   2631  fcc2		       0a		      asl		; 2
   2632  fcc3		       0a		      asl		; 2
   2633  fcc4		       a8		      tay		; 2
   2634  fcc5		       20 b6 f3 	      jsr	BCD2DigitPtrs	; 6
   2635  fcc8		       ca		      dex		; 2
   2636  fcc9		       10 f6		      bpl	.loopSet	; 2³
   2637  fccb		       60		      rts		; 6
   2638  fccc
   2639  fccc				   KilledHarry SUBROUTINE
   2640  fccc		       a9 31		      lda	#SOUND_DEAD	; 2
   2641  fcce		       85 e0		      sta	soundIdx	; 3
   2642  fcd0		       a9 84		      lda	#$84	; 2		     start copyright..
   2643  fcd2		       85 9e		      sta	noGameScroll	; 3		     ..animation
   2644  fcd4		       4c dc f9 	      jmp	ProcessObjects	; 3
   2645  fcd7
   2646  fcd7							; the bounds of the holes and pits where Harry falls down:
   2647  fcd7				   HoleBoundsTab
   2648  fcd7		       48 4f 00 00*	      .byte.b	72, 79, 0, 0, 0, 0, 0, 0	; single hole
   2649  fcdf		       2c 37 48 4f*	      .byte.b	44, 55, 72, 79, 96,107, 0, 0	; triple hole
   2650  fce7		       2c 6b 00 00*	      .byte.b	44,107, 0, 0, 0, 0, 0, 0	; pit
   2651  fcef		       2c 37 40 47*	      .byte.b	44, 55, 64, 71, 80, 87, 96,107	; closed croco jaws
   2652  fcf7		       2c 3d 40 4d*	      .byte.b	44, 61, 64, 77, 80, 93, 96,107	; open croco jaws
   2653  fcff
   2654  fd00		       00		      align	256
   2655  fd00
   2656  fd00				   Log0
   2657  fd00		       00		      .byte.b	%00000000	; |	    |
   2658  fd01		       18		      .byte.b	%00011000	; |   XX   |
   2659  fd02		       24		      .byte.b	%00100100	; |  X  X  |
   2660  fd03		       5a		      .byte.b	%01011010	; | X XX X |
   2661  fd04		       5a		      .byte.b	%01011010	; | X XX X |
   2662  fd05		       5a		      .byte.b	%01011010	; | X XX X |
   2663  fd06		       66		      .byte.b	%01100110	; | XX  XX |
   2664  fd07		       7e		      .byte.b	%01111110	; | XXXXXX |
   2665  fd08		       5e		      .byte.b	%01011110	; | X XXXX |
   2666  fd09		       76		      .byte.b	%01110110	; | XXX XX |
   2667  fd0a		       7e		      .byte.b	%01111110	; | XXXXXX |
   2668  fd0b		       5e		      .byte.b	%01011110	; | X XXXX |
   2669  fd0c		       76		      .byte.b	%01110110	; | XXX XX |
   2670  fd0d		       3c		      .byte.b	%00111100	; |  XXXX  |
   2671  fd0e		       18		      .byte.b	%00011000	; |   XX   |
   2672  fd0f		       00		      .byte.b	%00000000	; |	    |
   2673  fd10				   Log1
   2674  fd10		       00		      .byte.b	%00000000	; |	    |
   2675  fd11		       18		      .byte.b	%00011000	; |   XX   |
   2676  fd12		       24		      .byte.b	%00100100	; |  X  X  |
   2677  fd13		       5a		      .byte.b	%01011010	; | X XX X |
   2678  fd14		       5a		      .byte.b	%01011010	; | X XX X |
   2679  fd15		       5a		      .byte.b	%01011010	; | X XX X |
   2680  fd16		       66		      .byte.b	%01100110	; | XX  XX |
   2681  fd17		       7e		      .byte.b	%01111110	; | XXXXXX |
   2682  fd18		       7a		      .byte.b	%01111010	; | XXXX X |
   2683  fd19		       6e		      .byte.b	%01101110	; | XX XXX |
   2684  fd1a		       7e		      .byte.b	%01111110	; | XXXXXX |
   2685  fd1b		       7a		      .byte.b	%01111010	; | XXXX X |
   2686  fd1c		       6e		      .byte.b	%01101110	; | XX XXX |
   2687  fd1d		       3c		      .byte.b	%00111100	; |  XXXX  |
   2688  fd1e		       18		      .byte.b	%00011000	; |   XX   |
   2689  fd1f		       00		      .byte.b	%00000000	; |	    |
   2690  fd20				   Fire0
   2691  fd20		       00		      .byte.b	%00000000	; |	    |
   2692  fd21		       c3		      .byte.b	%11000011	; |XX	  XX|
   2693  fd22		       e7		      .byte.b	%11100111	; |XXX  XXX|
   2694  fd23		       7e		      .byte.b	%01111110	; | XXXXXX |
   2695  fd24		       3c		      .byte.b	%00111100	; |  XXXX  |
   2696  fd25		       18		      .byte.b	%00011000	; |   XX   |
   2697  fd26		       3c		      .byte.b	%00111100	; |  XXXX  |
   2698  fd27		       7c		      .byte.b	%01111100	; | XXXXX  |
   2699  fd28		       7c		      .byte.b	%01111100	; | XXXXX  |
   2700  fd29		       78		      .byte.b	%01111000	; | XXXX   |
   2701  fd2a		       38		      .byte.b	%00111000	; |  XXX   |
   2702  fd2b		       38		      .byte.b	%00111000	; |  XXX   |
   2703  fd2c		       30		      .byte.b	%00110000	; |  XX    |
   2704  fd2d		       30		      .byte.b	%00110000	; |  XX    |
   2705  fd2e		       10		      .byte.b	%00010000	; |   X    |
   2706  fd2f		       10		      .byte.b	%00010000	; |   X    |
   2707  fd30				   Fire1
   2708  fd30		       00		      .byte.b	%00000000	; |	    |
   2709  fd31		       c3		      .byte.b	%11000011	; |XX	  XX|
   2710  fd32		       e7		      .byte.b	%11100111	; |XXX  XXX|
   2711  fd33		       7e		      .byte.b	%01111110	; | XXXXXX |
   2712  fd34		       3c		      .byte.b	%00111100	; |  XXXX  |
   2713  fd35		       18		      .byte.b	%00011000	; |   XX   |
   2714  fd36		       3c		      .byte.b	%00111100	; |  XXXX  |
   2715  fd37		       3e		      .byte.b	%00111110	; |  XXXXX |
   2716  fd38		       3e		      .byte.b	%00111110	; |  XXXXX |
   2717  fd39		       1e		      .byte.b	%00011110	; |   XXXX |
   2718  fd3a		       1c		      .byte.b	%00011100	; |   XXX  |
   2719  fd3b		       1c		      .byte.b	%00011100	; |   XXX  |
   2720  fd3c		       0c		      .byte.b	%00001100	; |	XX  |
   2721  fd3d		       0c		      .byte.b	%00001100	; |	XX  |
   2722  fd3e		       08		      .byte.b	%00001000	; |	X   |
   2723  fd3f		       08		      .byte.b	%00001000	; |	X   |
   2724  fd40				   Cobra0
   2725  fd40		       00		      .byte.b	%00000000	; |	    |
   2726  fd41		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2727  fd42		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2728  fd43		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2729  fd44		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2730  fd45		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2731  fd46		       60		      .byte.b	%01100000	; | XX     |
   2732  fd47		       10		      .byte.b	%00010000	; |   X    |
   2733  fd48		       08		      .byte.b	%00001000	; |	X   |
   2734  fd49		       0c		      .byte.b	%00001100	; |	XX  |
   2735  fd4a		       0c		      .byte.b	%00001100	; |	XX  |
   2736  fd4b		       08		      .byte.b	%00001000	; |	X   |
   2737  fd4c		       38		      .byte.b	%00111000	; |  XXX   |
   2738  fd4d		       30		      .byte.b	%00110000	; |  XX    |
   2739  fd4e		       40		      .byte.b	%01000000	; | X	    |
   2740  fd4f		       00		      .byte.b	%00000000	; |	    |
   2741  fd50				   Cobra1
   2742  fd50		       00		      .byte.b	%00000000	; |	    |
   2743  fd51		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2744  fd52		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2745  fd53		       f9		      .byte.b	%11111001	; |XXXXX  X|
   2746  fd54		       fa		      .byte.b	%11111010	; |XXXXX X |
   2747  fd55		       fa		      .byte.b	%11111010	; |XXXXX X |
   2748  fd56		       60		      .byte.b	%01100000	; | XX     |
   2749  fd57		       10		      .byte.b	%00010000	; |   X    |
   2750  fd58		       08		      .byte.b	%00001000	; |	X   |
   2751  fd59		       0c		      .byte.b	%00001100	; |	XX  |
   2752  fd5a		       0c		      .byte.b	%00001100	; |	XX  |
   2753  fd5b		       08		      .byte.b	%00001000	; |	X   |
   2754  fd5c		       38		      .byte.b	%00111000	; |  XXX   |
   2755  fd5d		       30		      .byte.b	%00110000	; |  XX    |
   2756  fd5e		       80		      .byte.b	%10000000	; |X	    |
   2757  fd5f		       00		      .byte.b	%00000000	; |	    |
   2758  fd60				   Croco0
   2759  fd60		       00		      .byte.b	%00000000	; |	    |
   2760  fd61		       00		      .byte.b	%00000000	; |	    |
   2761  fd62		       00		      .byte.b	%00000000	; |	    |
   2762  fd63		       00		      .byte.b	%00000000	; |	    |
   2763  fd64		       00		      .byte.b	%00000000	; |	    |
   2764  fd65		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2765  fd66		       ab		      .byte.b	%10101011	; |X X X XX|
   2766  fd67		       03		      .byte.b	%00000011	; |	  XX|
   2767  fd68		       03		      .byte.b	%00000011	; |	  XX|
   2768  fd69		       0b		      .byte.b	%00001011	; |	X XX|
   2769  fd6a		       2e		      .byte.b	%00101110	; |  X XXX |
   2770  fd6b		       ba		      .byte.b	%10111010	; |X XXX X |
   2771  fd6c		       e0		      .byte.b	%11100000	; |XXX     |
   2772  fd6d		       80		      .byte.b	%10000000	; |X	    |
   2773  fd6e		       00		      .byte.b	%00000000	; |	    |
   2774  fd6f		       00		      .byte.b	%00000000	; |	    |
   2775  fd70				   Croco1
   2776  fd70		       00		      .byte.b	%00000000	; |	    |
   2777  fd71		       00		      .byte.b	%00000000	; |	    |
   2778  fd72		       00		      .byte.b	%00000000	; |	    |
   2779  fd73		       00		      .byte.b	%00000000	; |	    |
   2780  fd74		       00		      .byte.b	%00000000	; |	    |
   2781  fd75		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2782  fd76		       ab		      .byte.b	%10101011	; |X X X XX|
   2783  fd77		       55		      .byte.b	%01010101	; | X X X X|
   2784  fd78		       ff		      .byte.b	%11111111	; |XXXXXXXX|
   2785  fd79		       06		      .byte.b	%00000110	; |	 XX |
   2786  fd7a		       04		      .byte.b	%00000100	; |	 X  |
   2787  fd7b		       00		      .byte.b	%00000000	; |	    |
   2788  fd7c		       00		      .byte.b	%00000000	; |	    |
   2789  fd7d		       00		      .byte.b	%00000000	; |	    |
   2790  fd7e		       00		      .byte.b	%00000000	; |	    |
   2791  fd7f		       00		      .byte.b	%00000000	; |	    |
   2792  fd80				   MoneyBag
   2793  fd80		       00		      .byte.b	%00000000	; |	    |
   2794  fd81		       3e		      .byte.b	%00111110	; |  XXXXX |
   2795  fd82		       77		      .byte.b	%01110111	; | XXX XXX|
   2796  fd83		       77		      .byte.b	%01110111	; | XXX XXX|
   2797  fd84		       63		      .byte.b	%01100011	; | XX   XX|
   2798  fd85		       7b		      .byte.b	%01111011	; | XXXX XX|
   2799  fd86		       63		      .byte.b	%01100011	; | XX   XX|
   2800  fd87		       6f		      .byte.b	%01101111	; | XX XXXX|
   2801  fd88		       63		      .byte.b	%01100011	; | XX   XX|
   2802  fd89		       36		      .byte.b	%00110110	; |  XX XX |
   2803  fd8a		       36		      .byte.b	%00110110	; |  XX XX |
   2804  fd8b		       1c		      .byte.b	%00011100	; |   XXX  |
   2805  fd8c		       08		      .byte.b	%00001000	; |	X   |
   2806  fd8d		       1c		      .byte.b	%00011100	; |   XXX  |
   2807  fd8e		       36		      .byte.b	%00110110	; |  XX XX |
   2808  fd8f		       00		      .byte.b	%00000000	; |	    |
   2809  fd90				   Scorpion0
   2810  fd90		       85		      .byte.b	%10000101	; |X	 X X|
   2811  fd91		       32		      .byte.b	%00110010	; |  XX  X |
   2812  fd92		       3d		      .byte.b	%00111101	; |  XXXX X|
   2813  fd93		       78		      .byte.b	%01111000	; | XXXX   |
   2814  fd94		       f8		      .byte.b	%11111000	; |XXXXX   |
   2815  fd95		       c6		      .byte.b	%11000110	; |XX	 XX |
   2816  fd96		       82		      .byte.b	%10000010	; |X	  X |
   2817  fd97		       90		      .byte.b	%10010000	; |X  X    |
   2818  fd98		       88		      .byte.b	%10001000	; |X	X   |
   2819  fd99		       d8		      .byte.b	%11011000	; |XX XX   |
   2820  fd9a		       70		      .byte.b	%01110000	; | XXX    |
   2821  fd9b		       00		      .byte.b	%00000000	; |	    |
   2822  fd9c		       00		      .byte.b	%00000000	; |	    |
   2823  fd9d		       00		      .byte.b	%00000000	; |	    |
   2824  fd9e		       00		      .byte.b	%00000000	; |	    |
   2825  fd9f		       00		      .byte.b	%00000000	; |	    |
   2826  fda0				   Scorpion1
   2827  fda0		       49		      .byte.b	%01001001	; | X	X  X|
   2828  fda1		       33		      .byte.b	%00110011	; |  XX  XX|
   2829  fda2		       3c		      .byte.b	%00111100	; |  XXXX  |
   2830  fda3		       78		      .byte.b	%01111000	; | XXXX   |
   2831  fda4		       fa		      .byte.b	%11111010	; |XXXXX X |
   2832  fda5		       c4		      .byte.b	%11000100	; |XX	 X  |
   2833  fda6		       92		      .byte.b	%10010010	; |X  X  X |
   2834  fda7		       88		      .byte.b	%10001000	; |X	X   |
   2835  fda8		       d8		      .byte.b	%11011000	; |XX XX   |
   2836  fda9		       70		      .byte.b	%01110000	; | XXX    |
   2837  fdaa		       00		      .byte.b	%00000000	; |	    |
   2838  fdab		       00		      .byte.b	%00000000	; |	    |
   2839  fdac		       00		      .byte.b	%00000000	; |	    |
   2840  fdad		       00		      .byte.b	%00000000	; |	    |
   2841  fdae		       00		      .byte.b	%00000000	; |	    |
   2842  fdaf		       00		      .byte.b	%00000000	; |	    |
   2843  fdb0				   Wall
   2844  fdb0		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2845  fdb1		       ba		      .byte.b	%10111010	; |X XXX X |
   2846  fdb2		       ba		      .byte.b	%10111010	; |X XXX X |
   2847  fdb3		       ba		      .byte.b	%10111010	; |X XXX X |
   2848  fdb4		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2849  fdb5		       ee		      .byte.b	%11101110	; |XXX XXX |
   2850  fdb6		       ee		      .byte.b	%11101110	; |XXX XXX |
   2851  fdb7		       ee		      .byte.b	%11101110	; |XXX XXX |
   2852  fdb8		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2853  fdb9		       ba		      .byte.b	%10111010	; |X XXX X |
   2854  fdba		       ba		      .byte.b	%10111010	; |X XXX X |
   2855  fdbb		       ba		      .byte.b	%10111010	; |X XXX X |
   2856  fdbc		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2857  fdbd		       ee		      .byte.b	%11101110	; |XXX XXX |
   2858  fdbe		       ee		      .byte.b	%11101110	; |XXX XXX |
   2859  fdbf		       ee		      .byte.b	%11101110	; |XXX XXX |
   2860  fdc0				   Bar0
   2861  fdc0		       00		      .byte.b	%00000000	; |	    |
   2862  fdc1		       f8		      .byte.b	%11111000	; |XXXXX   |
   2863  fdc2		       fc		      .byte.b	%11111100	; |XXXXXX  |
   2864  fdc3		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2865  fdc4		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2866  fdc5		       7e		      .byte.b	%01111110	; | XXXXXX |
   2867  fdc6		       3e		      .byte.b	%00111110	; |  XXXXX |
   2868  fdc7		       00		      .byte.b	%00000000	; |	    |
   2869  fdc8		       10		      .byte.b	%00010000	; |   X    |
   2870  fdc9		       00		      .byte.b	%00000000	; |	    |
   2871  fdca		       54		      .byte.b	%01010100	; | X X X  |
   2872  fdcb		       00		      .byte.b	%00000000	; |	    |
   2873  fdcc		       92		      .byte.b	%10010010	; |X  X  X |
   2874  fdcd		       00		      .byte.b	%00000000	; |	    |
   2875  fdce		       10		      .byte.b	%00010000	; |   X    |
   2876  fdcf		       00		      .byte.b	%00000000	; |	    |
   2877  fdd0				   Bar1
   2878  fdd0		       00		      .byte.b	%00000000	; |	    |
   2879  fdd1		       f8		      .byte.b	%11111000	; |XXXXX   |
   2880  fdd2		       fc		      .byte.b	%11111100	; |XXXXXX  |
   2881  fdd3		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2882  fdd4		       fe		      .byte.b	%11111110	; |XXXXXXX |
   2883  fdd5		       7e		      .byte.b	%01111110	; | XXXXXX |
   2884  fdd6		       3e		      .byte.b	%00111110	; |  XXXXX |
   2885  fdd7		       00		      .byte.b	%00000000	; |	    |
   2886  fdd8		       00		      .byte.b	%00000000	; |	    |
   2887  fdd9		       28		      .byte.b	%00101000	; |  X X   |
   2888  fdda		       00		      .byte.b	%00000000	; |	    |
   2889  fddb		       54		      .byte.b	%01010100	; | X X X  |
   2890  fddc		       00		      .byte.b	%00000000	; |	    |
   2891  fddd		       10		      .byte.b	%00010000	; |   X    |
   2892  fdde		       00		      .byte.b	%00000000	; |	    |
   2893  fddf		       00		      .byte.b	%00000000	; |	    |
   2894  fde0				   Ring
   2895  fde0		       00		      .byte.b	%00000000	; |	    |
   2896  fde1		       00		      .byte.b	%00000000	; |	    |
   2897  fde2		       38		      .byte.b	%00111000	; |  XXX   |
   2898  fde3		       6c		      .byte.b	%01101100	; | XX XX  |
   2899  fde4		       44		      .byte.b	%01000100	; | X	 X  |
   2900  fde5		       44		      .byte.b	%01000100	; | X	 X  |
   2901  fde6		       44		      .byte.b	%01000100	; | X	 X  |
   2902  fde7		       6c		      .byte.b	%01101100	; | XX XX  |
   2903  fde8		       38		      .byte.b	%00111000	; |  XXX   |
   2904  fde9		       10		      .byte.b	%00010000	; |   X    |
   2905  fdea		       38		      .byte.b	%00111000	; |  XXX   |
   2906  fdeb		       7c		      .byte.b	%01111100	; | XXXXX  |
   2907  fdec		       38		      .byte.b	%00111000	; |  XXX   |
   2908  fded		       00		      .byte.b	%00000000	; |	    |
   2909  fdee		       00		      .byte.b	%00000000	; |	    |
   2910  fdef		       00		      .byte.b	%00000000	; |	    |
   2911  fdf0				   Nothing
   2912  fdf0		       00		      .byte.b	%00000000	; |	    |
   2913  fdf1		       00		      .byte.b	%00000000	; |	    |
   2914  fdf2		       00		      .byte.b	%00000000	; |	    |
   2915  fdf3		       00		      .byte.b	%00000000	; |	    |
   2916  fdf4		       00		      .byte.b	%00000000	; |	    |
   2917  fdf5		       00		      .byte.b	%00000000	; |	    |
   2918  fdf6		       00		      .byte.b	%00000000	; |	    |
   2919  fdf7		       00		      .byte.b	%00000000	; |	    |
   2920  fdf8		       00		      .byte.b	%00000000	; |	    |
   2921  fdf9		       00		      .byte.b	%00000000	; |	    |
   2922  fdfa		       00		      .byte.b	%00000000	; |	    |
   2923  fdfb		       00		      .byte.b	%00000000	; |	    |
   2924  fdfc		       00		      .byte.b	%00000000	; |	    |
   2925  fdfd		       00		      .byte.b	%00000000	; |	    |
   2926  fdfe		       00		      .byte.b	%00000000	; |	    |
   2927  fdff		       00		      .byte.b	%00000000	; |	    |
   2928  fe00
   2929  fe00					      align	256
   2930  fe00
   2931  fe00				  -	      IF	OPTIMIZE
   2932  fe00				  -LogColor
   2933  fe00				  -	      .byte	BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN
   2934  fe00				  -	      .byte	BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN
   2935  fe00				  -	      FILL_NOP	1	; JTZ: the logs are only 15 lines tall
   2936  fe00				  -.pcFire
   2937  fe00				  -FireColor  =	.pcFire - 1
   2938  fe00				  -	      .byte	BROWN-2, BROWN-2, BROWN-2, BROWN-2, ORANGE, ORANGE, ORANGE
   2939  fe00				  -	      .byte	$2e, $2e, $2e, $2e, $2e, $2e, $2e
   2940  fe00				  -	      FILL_NOP	2	; JTZ: the fire is only 14 lines tall
   2941  fe00				  -.pcCobra
   2942  fe00				  -CobraColor =	.pcCobra-1
   2943  fe00				  -	      .byte	BLACK, GREY-2, BLACK, GREY-2, BLACK, BLACK, BLACK
   2944  fe00				  -	      .byte	BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, DARK_RED
   2945  fe00				  -	      FILL_NOP	2	; JTZ: the cobra is only 14 bytes tall
   2946  fe00				  -.pcCroco
   2947  fe00				  -CrocoColor =	.pcCroco-5
   2948  fe00				  -	      .byte	DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2
   2949  fe00				  -	      .byte	DARK_GREEN-2
   2950  fe00				  -	      FILL_NOP	7	; JTZ: the crocos are only 9 lines tall
   2951  fe00				  -.pcMoneyBag
   2952  fe00				  -MoneyBagColor =	.pcMoneyBag-1
   2953  fe00				  -	      .byte	GREY-2, GREY-2, GREY-2, GREY-2, GREY-2, GREY-2, GREY-2
   2954  fe00				  -	      .byte	GREY-2, GREY-2, GREY-2, GREY-2, BROWN, GREY-2, GREY-2
   2955  fe00				  -	      FILL_NOP	2	; JTZ: the moneybag is only 9 lines tall
   2956  fe00				  -ScorpionColor
   2957  fe00				  -	      .byte	WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE
   2958  fe00				  -	      .byte	WHITE, WHITE, WHITE
   2959  fe00				  -	      FILL_NOP	5	; JTZ: the scorpion is only 11 lines tall
   2960  fe00					      ELSE
   2961  fe00				   LogColor
   2962  fe00		       22 22 22 22*	      .byte.b	BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN
   2963  fe08		       22 22 22 22*	      .byte.b	BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN, BROWN
   2964  fe10				   FireColor
   2965  fe10		       20 20 20 20*	      .byte.b	BROWN-2, BROWN-2, BROWN-2, BROWN-2, BROWN-2, ORANGE, ORANGE, ORANGE
   2966  fe18		       2e 2e 2e 2e*	      .byte.b	$2e, $2e, $2e, $2e, $2e, $2e, $2e, $2e
   2967  fe20				   CobraColor
   2968  fe20		       00 00 04 00*	      .byte.b	BLACK, BLACK, GREY-2, BLACK, GREY-2, BLACK, BLACK, BLACK
   2969  fe28		       00 00 00 00*	      .byte.b	BLACK, BLACK, BLACK, BLACK, BLACK, BLACK, DARK_RED, DARK_RED
   2970  fe30				   CrocoColor
   2971  fe30		       50 50 50 50*	      .byte.b	DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2
   2972  fe38		       50 50 50 50*	      .byte.b	DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2, DARK_GREEN-2
   2973  fe40				   MoneyBagColor
   2974  fe40		       04 04 04 04*	      .byte.b	GREY-2, GREY-2, GREY-2, GREY-2, GREY-2, GREY-2, GREY-2, GREY-2
   2975  fe48		       04 04 04 04*	      .byte.b	GREY-2, GREY-2, GREY-2, GREY-2, BROWN, GREY-2, GREY-2, GREY-2
   2976  fe50				   ScorpionColor
   2977  fe50		       0e 0e 0e 0e*	      .byte.b	WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE
   2978  fe58		       0e 0e 0e 0e*	      .byte.b	WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE
   2979  fe60					      ENDIF
   2980  fe60				   WallColor
   2981  fe60		       06 62 62 62*	      .byte.b	GREY, DARK_RED, DARK_RED, DARK_RED, GREY, DARK_RED, DARK_RED, DARK_RED
   2982  fe68		       06 62 62 62*	      .byte.b	GREY, DARK_RED, DARK_RED, DARK_RED, GREY, DARK_RED
   2983  fe6e				   RingColor
   2984  fe6e		       62 62		      .byte.b	DARK_RED, DARK_RED
   2985  fe70				   GoldBarColor
   2986  fe70		       2e 2e 2e 2e*	      .byte.b	YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW, YELLOW
   2987  fe78		       0e 0e 0e 0e*	      .byte.b	WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE
   2988  fe80		       0e		      .byte.b	WHITE
   2989  fe81				   SilverBarColor
   2990  fe81		       06 06 06 06*	      .byte.b	GREY, GREY, GREY, GREY, GREY, GREY, GREY, WHITE
   2991  fe89		       0e 0e 0e 0e*	      .byte.b	WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE, WHITE
   2992  fe91
   2993  fe91				   InitTab
   2994  fe91		       6e fb		      .word.w	Harry5	; harryPatPtr
   2995  fe93		       00 fd		      .word.w	Log0	; objPatPtr
   2996  fe95		       21 fc		      .word.w	RunColTab	; harryColPtr
   2997  fe97		       00 fe		      .word.w	LogColor	; objColPtr
   2998  fe99		       b0 fd		      .word.w	Wall
   2999  fe9b		       60 fe		      .word.w	WallColor
   3000  fe9d		       b0 fd		      .word.w	Wall
   3001  fe9f		       60 fe		      .word.w	WallColor
   3002  fea1		       58 ff		      .word.w	Space
   3003  fea3		       58 ff		      .word.w	Space
   3004  fea5		       10 ff		      .word.w	Two
   3005  fea7		       00 ff		      .word.w	Zero
   3006  fea9		       00 ff		      .word.w	Zero
   3007  feab		       00 ff		      .word.w	Zero
   3008  fead
   3009  fead
   3010  fead				   RightRandom SUBROUTINE
   3011  fead							; generate new random scene on the right:
   3012  fead				   .loopRandom
   3013  fead							; random' = random << 1 | (bit3^bit4^bit5^bit7)
   3014  fead		       a5 81		      lda	random	; 3
   3015  feaf		       0a		      asl		; 2
   3016  feb0		       45 81		      eor	random	; 3
   3017  feb2		       0a		      asl		; 2
   3018  feb3		       45 81		      eor	random	; 3
   3019  feb5		       0a		      asl		; 2
   3020  feb6		       0a		      asl		; 2
   3021  feb7		       45 81		      eor	random	; 3
   3022  feb9		       0a		      asl		; 2
   3023  feba		       26 81		      rol	random	; 5
   3024  febc		       ca		      dex		; 2
   3025  febd		       10 ee		      bpl	.loopRandom	; 2³
   3026  febf		       4c be fa 	      jmp	ContRandom	; 3
   3027  fec2
   3028  fec2							; low pointer to harry data:
   3029  fec2				   HarryPtrTab
   3030  fec2		       00		      .byte.b	<Harry0
   3031  fec3		       16		      .byte.b	<Harry1
   3032  fec4		       2c		      .byte.b	<Harry2
   3033  fec5		       42		      .byte.b	<Harry3
   3034  fec6		       58		      .byte.b	<Harry4
   3035  fec7		       6e		      .byte.b	<Harry5
   3036  fec8		       84		      .byte.b	<Harry6
   3037  fec9		       9a		      .byte.b	<Harry7
   3038  feca		       b0		      .byte.b	<Harry8
   3039  fecb
   3040  fecb				   JumpTab
   3041  fecb							; increase/decrease y-position of jumping Harry:
   3042  fecb		       01 01 01 01*	      .byte.b	1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1
   3043  fedb		       ff 00 00 00*	      .byte.b	-1, 0, 0, 0,-1, 0, 0,-1, 0,-1,-1,-1,-1,-1,-1,-1
   3044  feeb
   3045  feeb				   ObjectPtrTab
   3046  feeb		       00		      .byte.b	<Log0
   3047  feec		       00		      .byte.b	<Log0
   3048  feed		       00		      .byte.b	<Log0
   3049  feee		       00		      .byte.b	<Log0
   3050  feef		       00		      .byte.b	<Log0
   3051  fef0		       00		      .byte.b	<Log0
   3052  fef1		       20		      .byte.b	<Fire0
   3053  fef2		       40		      .byte.b	<Cobra0
   3054  fef3		       80		      .byte.b	<MoneyBag
   3055  fef4		       c0		      .byte.b	<Bar0	; silver bar
   3056  fef5		       c0		      .byte.b	<Bar0	; gold bar
   3057  fef6		       e0		      .byte.b	<Ring
   3058  fef7		       f0		      .byte.b	<Nothing
   3059  fef8
   3060  fef8				   TreasureMask
   3061  fef8		       80		      .byte.b	%10000000
   3062  fef9		       40		      .byte.b	%01000000
   3063  fefa		       20		      .byte.b	%00100000
   3064  fefb		       10		      .byte.b	%00010000
   3065  fefc		       08		      .byte.b	%00001000
   3066  fefd		       04		      .byte.b	%00000100
   3067  fefe		       02		      .byte.b	%00000010
   3068  feff		       01		      .byte.b	%00000001
   3069  ff00
   3070  ff00					      align	256
   3071  ff00
   3072  ff00				   Zero
   3073  ff00		       3c		      .byte.b	%00111100	; |  XXXX  |
   3074  ff01		       66		      .byte.b	%01100110	; | XX  XX |
   3075  ff02		       66		      .byte.b	%01100110	; | XX  XX |
   3076  ff03		       66		      .byte.b	%01100110	; | XX  XX |
   3077  ff04		       66		      .byte.b	%01100110	; | XX  XX |
   3078  ff05		       66		      .byte.b	%01100110	; | XX  XX |
   3079  ff06		       66		      .byte.b	%01100110	; | XX  XX |
   3080  ff07		       3c		      .byte.b	%00111100	; |  XXXX  |
   3081  ff08				   One
   3082  ff08		       3c		      .byte.b	%00111100	; |  XXXX  |
   3083  ff09		       18		      .byte.b	%00011000	; |   XX   |
   3084  ff0a		       18		      .byte.b	%00011000	; |   XX   |
   3085  ff0b		       18		      .byte.b	%00011000	; |   XX   |
   3086  ff0c		       18		      .byte.b	%00011000	; |   XX   |
   3087  ff0d		       18		      .byte.b	%00011000	; |   XX   |
   3088  ff0e		       38		      .byte.b	%00111000	; |  XXX   |
   3089  ff0f		       18		      .byte.b	%00011000	; |   XX   |
   3090  ff10				   Two
   3091  ff10		       7e		      .byte.b	%01111110	; | XXXXXX |
   3092  ff11		       60		      .byte.b	%01100000	; | XX     |
   3093  ff12		       60		      .byte.b	%01100000	; | XX     |
   3094  ff13		       3c		      .byte.b	%00111100	; |  XXXX  |
   3095  ff14		       06		      .byte.b	%00000110	; |	 XX |
   3096  ff15		       06		      .byte.b	%00000110	; |	 XX |
   3097  ff16		       46		      .byte.b	%01000110	; | X	 XX |
   3098  ff17		       3c		      .byte.b	%00111100	; |  XXXX  |
   3099  ff18				   Three
   3100  ff18		       3c		      .byte.b	%00111100	; |  XXXX  |
   3101  ff19		       46		      .byte.b	%01000110	; | X	 XX |
   3102  ff1a		       06		      .byte.b	%00000110	; |	 XX |
   3103  ff1b		       0c		      .byte.b	%00001100	; |	XX  |
   3104  ff1c		       0c		      .byte.b	%00001100	; |	XX  |
   3105  ff1d		       06		      .byte.b	%00000110	; |	 XX |
   3106  ff1e		       46		      .byte.b	%01000110	; | X	 XX |
   3107  ff1f		       3c		      .byte.b	%00111100	; |  XXXX  |
   3108  ff20				   Four
   3109  ff20		       0c		      .byte.b	%00001100	; |	XX  |
   3110  ff21		       0c		      .byte.b	%00001100	; |	XX  |
   3111  ff22		       0c		      .byte.b	%00001100	; |	XX  |
   3112  ff23		       7e		      .byte.b	%01111110	; | XXXXXX |
   3113  ff24		       4c		      .byte.b	%01001100	; | X	XX  |
   3114  ff25		       2c		      .byte.b	%00101100	; |  X XX  |
   3115  ff26		       1c		      .byte.b	%00011100	; |   XXX  |
   3116  ff27		       0c		      .byte.b	%00001100	; |	XX  |
   3117  ff28				   Five
   3118  ff28		       7c		      .byte.b	%01111100	; | XXXXX  |
   3119  ff29		       46		      .byte.b	%01000110	; | X	 XX |
   3120  ff2a		       06		      .byte.b	%00000110	; |	 XX |
   3121  ff2b		       06		      .byte.b	%00000110	; |	 XX |
   3122  ff2c		       7c		      .byte.b	%01111100	; | XXXXX  |
   3123  ff2d		       60		      .byte.b	%01100000	; | XX     |
   3124  ff2e		       60		      .byte.b	%01100000	; | XX     |
   3125  ff2f		       7e		      .byte.b	%01111110	; | XXXXXX |
   3126  ff30				   Six
   3127  ff30		       3c		      .byte.b	%00111100	; |  XXXX  |
   3128  ff31		       66		      .byte.b	%01100110	; | XX  XX |
   3129  ff32		       66		      .byte.b	%01100110	; | XX  XX |
   3130  ff33		       66		      .byte.b	%01100110	; | XX  XX |
   3131  ff34		       7c		      .byte.b	%01111100	; | XXXXX  |
   3132  ff35		       60		      .byte.b	%01100000	; | XX     |
   3133  ff36		       62		      .byte.b	%01100010	; | XX   X |
   3134  ff37		       3c		      .byte.b	%00111100	; |  XXXX  |
   3135  ff38				   Seven
   3136  ff38		       18		      .byte.b	%00011000	; |   XX   |
   3137  ff39		       18		      .byte.b	%00011000	; |   XX   |
   3138  ff3a		       18		      .byte.b	%00011000	; |   XX   |
   3139  ff3b		       18		      .byte.b	%00011000	; |   XX   |
   3140  ff3c		       0c		      .byte.b	%00001100	; |	XX  |
   3141  ff3d		       06		      .byte.b	%00000110	; |	 XX |
   3142  ff3e		       42		      .byte.b	%01000010	; | X	  X |
   3143  ff3f		       7e		      .byte.b	%01111110	; | XXXXXX |
   3144  ff40				   Eight
   3145  ff40		       3c		      .byte.b	%00111100	; |  XXXX  |
   3146  ff41		       66		      .byte.b	%01100110	; | XX  XX |
   3147  ff42		       66		      .byte.b	%01100110	; | XX  XX |
   3148  ff43		       3c		      .byte.b	%00111100	; |  XXXX  |
   3149  ff44		       3c		      .byte.b	%00111100	; |  XXXX  |
   3150  ff45		       66		      .byte.b	%01100110	; | XX  XX |
   3151  ff46		       66		      .byte.b	%01100110	; | XX  XX |
   3152  ff47		       3c		      .byte.b	%00111100	; |  XXXX  |
   3153  ff48				   Nine
   3154  ff48		       3c		      .byte.b	%00111100	; |  XXXX  |
   3155  ff49		       46		      .byte.b	%01000110	; | X	 XX |
   3156  ff4a		       06		      .byte.b	%00000110	; |	 XX |
   3157  ff4b		       3e		      .byte.b	%00111110	; |  XXXXX |
   3158  ff4c		       66		      .byte.b	%01100110	; | XX  XX |
   3159  ff4d		       66		      .byte.b	%01100110	; | XX  XX |
   3160  ff4e		       66		      .byte.b	%01100110	; | XX  XX |
   3161  ff4f		       3c		      .byte.b	%00111100	; |  XXXX  |
   3162  ff50				   DoublePoint
   3163  ff50		       00		      .byte.b	%00000000	; |	    |
   3164  ff51		       18		      .byte.b	%00011000	; |   XX   |
   3165  ff52		       18		      .byte.b	%00011000	; |   XX   |
   3166  ff53		       00		      .byte.b	%00000000	; |	    |
   3167  ff54		       00		      .byte.b	%00000000	; |	    |
   3168  ff55		       18		      .byte.b	%00011000	; |   XX   |
   3169  ff56		       18		      .byte.b	%00011000	; |   XX   |
   3170  ff57		       00		      .byte.b	%00000000	; |	    |
   3171  ff58				   Space
   3172  ff58		       00		      .byte.b	%00000000	; |	    |
   3173  ff59		       00		      .byte.b	%00000000	; |	    |
   3174  ff5a		       00		      .byte.b	%00000000	; |	    |
   3175  ff5b		       00		      .byte.b	%00000000	; |	    |
   3176  ff5c		       00		      .byte.b	%00000000	; |	    |
   3177  ff5d		       00		      .byte.b	%00000000	; |	    |
   3178  ff5e		       00		      .byte.b	%00000000	; |	    |
   3179  ff5f		       00		      .byte.b	%00000000	; |	    |
   3180  ff60				   CopyRight0
   3181  ff60		       00		      .byte.b	%00000000	; |	    |
   3182  ff61		       00		      .byte.b	%00000000	; |	    |
   3183  ff62		       f7		      .byte.b	%11110111	; |XXXX XXX|
   3184  ff63		       95		      .byte.b	%10010101	; |X  X X X|
   3185  ff64		       87		      .byte.b	%10000111	; |X	 XXX|
   3186  ff65		       80		      .byte.b	%10000000	; |X	    |
   3187  ff66		       90		      .byte.b	%10010000	; |X  X    |
   3188  ff67		       f0		      .byte.b	%11110000	; |XXXX    |
   3189  ff68		       ad		      .byte.b	%10101101	; |X X XX X|
   3190  ff69		       a9		      .byte.b	%10101001	; |X X X  X|
   3191  ff6a		       e9		      .byte.b	%11101001	; |XXX X  X|
   3192  ff6b		       a9		      .byte.b	%10101001	; |X X X  X|
   3193  ff6c		       ed		      .byte.b	%11101101	; |XXX XX X|
   3194  ff6d		       41		      .byte.b	%01000001	; | X	   X|
   3195  ff6e		       0f		      .byte.b	%00001111	; |	XXXX|
   3196  ff6f		       00		      .byte.b	%00000000	; |	    |
   3197  ff70				   CopyRight1
   3198  ff70		       47		      .byte.b	%01000111	; | X	 XXX|
   3199  ff71		       41		      .byte.b	%01000001	; | X	   X|
   3200  ff72		       77		      .byte.b	%01110111	; | XXX XXX|
   3201  ff73		       55		      .byte.b	%01010101	; | X X X X|
   3202  ff74		       75		      .byte.b	%01110101	; | XXX X X|
   3203  ff75		       00		      .byte.b	%00000000	; |	    |
   3204  ff76		       00		      .byte.b	%00000000	; |	    |
   3205  ff77		       00		      .byte.b	%00000000	; |	    |
   3206  ff78		       50		      .byte.b	%01010000	; | X X    |
   3207  ff79		       58		      .byte.b	%01011000	; | X XX   |
   3208  ff7a		       5c		      .byte.b	%01011100	; | X XXX  |
   3209  ff7b		       56		      .byte.b	%01010110	; | X X XX |
   3210  ff7c		       53		      .byte.b	%01010011	; | X X  XX|
   3211  ff7d		       11		      .byte.b	%00010001	; |   X   X|
   3212  ff7e		       f0		      .byte.b	%11110000	; |XXXX    |
   3213  ff7f		       00		      .byte.b	%00000000	; |	    |
   3214  ff80				   CopyRight2
   3215  ff80		       03		      .byte.b	%00000011	; |	  XX|
   3216  ff81		       00		      .byte.b	%00000000	; |	    |
   3217  ff82		       4b		      .byte.b	%01001011	; | X	X XX|
   3218  ff83		       4a		      .byte.b	%01001010	; | X	X X |
   3219  ff84		       6b		      .byte.b	%01101011	; | XX X XX|
   3220  ff85		       00		      .byte.b	%00000000	; |	    |
   3221  ff86		       08		      .byte.b	%00001000	; |	X   |
   3222  ff87		       00		      .byte.b	%00000000	; |	    |
   3223  ff88		       ba		      .byte.b	%10111010	; |X XXX X |
   3224  ff89		       8a		      .byte.b	%10001010	; |X	X X |
   3225  ff8a		       ba		      .byte.b	%10111010	; |X XXX X |
   3226  ff8b		       a2		      .byte.b	%10100010	; |X X   X |
   3227  ff8c		       3a		      .byte.b	%00111010	; |  XXX X |
   3228  ff8d		       80		      .byte.b	%10000000	; |X	    |
   3229  ff8e		       fe		      .byte.b	%11111110	; |XXXXXXX |
   3230  ff8f		       00		      .byte.b	%00000000	; |	    |
   3231  ff90				   CopyRight3
   3232  ff90		       80		      .byte.b	%10000000	; |X	    |
   3233  ff91		       80		      .byte.b	%10000000	; |X	    |
   3234  ff92		       aa		      .byte.b	%10101010	; |X X X X |
   3235  ff93		       aa		      .byte.b	%10101010	; |X X X X |
   3236  ff94		       ba		      .byte.b	%10111010	; |X XXX X |
   3237  ff95		       22		      .byte.b	%00100010	; |  X   X |
   3238  ff96		       27		      .byte.b	%00100111	; |  X  XXX|
   3239  ff97		       02		      .byte.b	%00000010	; |	  X |
   3240  ff98		       e9		      .byte.b	%11101001	; |XXX X  X|
   3241  ff99		       ab		      .byte.b	%10101011	; |X X X XX|
   3242  ff9a		       af		      .byte.b	%10101111	; |X X XXXX|
   3243  ff9b		       ad		      .byte.b	%10101101	; |X X XX X|
   3244  ff9c		       e9		      .byte.b	%11101001	; |XXX X  X|
   3245  ff9d		       00		      .byte.b	%00000000	; |	    |
   3246  ff9e		       00		      .byte.b	%00000000	; |	    |
   3247  ff9f		       00		      .byte.b	%00000000	; |	    |
   3248  ffa0				   CopyRight4
   3249  ffa0		       00		      .byte.b	%00000000	; |	    |
   3250  ffa1		       00		      .byte.b	%00000000	; |	    |
   3251  ffa2		       11		      .byte.b	%00010001	; |   X   X|
   3252  ffa3		       11		      .byte.b	%00010001	; |   X   X|
   3253  ffa4		       17		      .byte.b	%00010111	; |   X XXX|
   3254  ffa5		       15		      .byte.b	%00010101	; |   X X X|
   3255  ffa6		       17		      .byte.b	%00010111	; |   X XXX|
   3256  ffa7		       00		      .byte.b	%00000000	; |	    |
   3257  ffa8		       00		      .byte.b	%00000000	; |	    |
   3258  ffa9		       00		      .byte.b	%00000000	; |	    |
   3259  ffaa		       00		      .byte.b	%00000000	; |	    |
   3260  ffab		       00		      .byte.b	%00000000	; |	    |
   3261  ffac		       00		      .byte.b	%00000000	; |	    |
   3262  ffad		       00		      .byte.b	%00000000	; |	    |
   3263  ffae		       00		      .byte.b	%00000000	; |	    |
   3264  ffaf		       00		      .byte.b	%00000000	; |	    |
   3265  ffb0				   CopyRight5
   3266  ffb0		       00		      .byte.b	%00000000	; |	    |
   3267  ffb1		       00		      .byte.b	%00000000	; |	    |
   3268  ffb2		       77		      .byte.b	%01110111	; | XXX XXX|
   3269  ffb3		       54		      .byte.b	%01010100	; | X X X  |
   3270  ffb4		       77		      .byte.b	%01110111	; | XXX XXX|
   3271  ffb5		       51		      .byte.b	%01010001	; | X X   X|
   3272  ffb6		       77		      .byte.b	%01110111	; | XXX XXX|
   3273  ffb7		       00		      .byte.b	%00000000	; |	    |
   3274  ffb8
   3275  ffb8				   ColorTab
   3276  ffb8		       0c		      .byte.b	$0C	; score and copyright color
   3277  ffb9		       0c		      .byte.b	$0C	; unused
   3278  ffba		       52		      .byte.b	DARK_GREEN	; leaves color
   3279  ffbb		       56		      .byte.b	GREEN	; jungle color
   3280  ffbc		       00		      .byte.b	BLACK	; hole, background and tar pit color
   3281  ffbd		       20		      .byte.b	BROWN-2	; branches and log color
   3282  ffbe		       24		      .byte.b	BROWN+2	; underground color
   3283  ffbf		       28		      .byte.b	YELLOW-6	; ground color
   3284  ffc0		       b4		      .byte.b	BLUE	; swamp color
   3285  ffc1
   3286  ffc1				   Color1PtrTab
   3287  ffc1		       00		      .byte.b	<LogColor
   3288  ffc2		       00		      .byte.b	<LogColor
   3289  ffc3		       00		      .byte.b	<LogColor
   3290  ffc4		       00		      .byte.b	<LogColor
   3291  ffc5		       00		      .byte.b	<LogColor
   3292  ffc6		       00		      .byte.b	<LogColor
   3293  ffc7		       10		      .byte.b	<FireColor
   3294  ffc8		       20		      .byte.b	<CobraColor
   3295  ffc9		       40		      .byte.b	<MoneyBagColor
   3296  ffca		       81		      .byte.b	<SilverBarColor
   3297  ffcb		       71		      .byte.b	<GoldBarColor+1
   3298  ffcc		       6e		      .byte.b	<RingColor
   3299  ffcd
   3300  ffcd				   NuSize1Tab
   3301  ffcd		       00		      .byte.b	ONE_COPY	; one rolling logs
   3302  ffce		       01		      .byte.b	TWO_COPIES	; two rolling logs
   3303  ffcf		       02		      .byte.b	TWO_WIDE_COPIES	; two wide rolling logs
   3304  ffd0		       06		      .byte.b	THREE_MED_COPIES	; three rolling logs
   3305  ffd1		       00		      .byte.b	ONE_COPY	; one stationary log
   3306  ffd2		       06		      .byte.b	THREE_MED_COPIES	; three stationary logs
   3307  ffd3		       00		      .byte.b	ONE_COPY	; fire
   3308  ffd4		       00		      .byte.b	ONE_COPY	; cobra
   3309  ffd5		       00		      .byte.b	ONE_COPY	; money bag
   3310  ffd6		       00		      .byte.b	ONE_COPY	; silver bar
   3311  ffd7		       00		      .byte.b	ONE_COPY	; gold bar
   3312  ffd8		       00		      .byte.b	ONE_COPY	; ring
   3313  ffd9
   3314  ffd9							; used to animate some of the hazards:
   3315  ffd9				   AnimateTab
   3316  ffd9		       00		      .byte.b	0	; logs
   3317  ffda		       00		      .byte.b	0
   3318  ffdb		       00		      .byte.b	0
   3319  ffdc		       00		      .byte.b	0
   3320  ffdd		       00		      .byte.b	0
   3321  ffde		       00		      .byte.b	0
   3322  ffdf		       10		      .byte.b	OBJECT_H	; fire
   3323  ffe0		       10		      .byte.b	OBJECT_H	; cobra
   3324  ffe1		       00		      .byte.b	0	; money bag
   3325  ffe2		       10		      .byte.b	OBJECT_H	; silver bar
   3326  ffe3		       10		      .byte.b	OBJECT_H	; gold bar
   3327  ffe4		       00		      .byte.b	0	; ring
   3328  ffe5		       00		      .byte.b	0	; nothing (treasure collected)
   3329  ffe6
   3330  ffe6				   GroundTypeTab
   3331  ffe6		       00		      .byte.b	<[OneHole - PF2PatTab]	; one hole
   3332  ffe7		       08		      .byte.b	<[ThreeHoles - PF2PatTab]	; three holes
   3333  ffe8		       10		      .byte.b	<[Pit - PF2PatTab]	; tar pit
   3334  ffe9		       10		      .byte.b	<[Pit - PF2PatTab]	; swamp
   3335  ffea		       10		      .byte.b	<[Pit - PF2PatTab]	; swamp with crocodiles
   3336  ffeb		       80		      .byte.b	$80	; black quicksand with treasure
   3337  ffec		       80		      .byte.b	$80	; black quicksand
   3338  ffed		       80		      .byte.b	$80	; blue quicksand
   3339  ffee
   3340  ffee							; crocodile in scene?
   3341  ffee				   CrocoTab
   3342  ffee		       00 00 00 00	      .ds	CROCO_SCENE, 0
   3343  fff2		       01		      .byte.b	1
   3344  fff3		       00 00 00 	      .ds	7-CROCO_SCENE, 0
   3345  fff6
   3346  fff6
   3347  0ffc					      org	$0ffc
   3348  0ffc
pitfall.asm (3349): error: Origin Reverse-indexed.
Aborting assembly
