------- FILE abb (1).asm LEVEL 1 PASS 3
      1  f2cb ????
      2  f2cb ????
      3  f2cb ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  f2cb ????				      include	vcs.h
      1  f2cb ????						; VCS.H
      2  f2cb ????						; Version 1.06, 06/SEP/2020
      3  f2cb ????
      4  f2cb ????	       00 6a	   VERSION_VCS =	106
      5  f2cb ????
      6  f2cb ????						; THIS IS *THE* "STANDARD" VCS.H
      7  f2cb ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  f2cb ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  f2cb ????						;
     10  f2cb ????						; This file defines hardware registers and memory mapping for the
     11  f2cb ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  f2cb ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  f2cb ????						; available at at https://dasm-assembler.github.io/
     14  f2cb ????						;
     15  f2cb ????						; Many thanks to the people who have contributed. If you find an issue with the
     16  f2cb ????						; contents, or would like ot add something, please report as an issue at...
     17  f2cb ????						; https://github.com/dasm-assembler/dasm/issues
     18  f2cb ????
     19  f2cb ????						;
     20  f2cb ????						; Latest Revisions...
     21  f2cb ????						; 1.06  05/SEP/2020	 Modified header/license and links to new versions
     22  f2cb ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  f2cb ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  f2cb ????						;			    This will allow conditional code to verify VCS.H being
     25  f2cb ????						;			    used for code assembly.
     26  f2cb ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  f2cb ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  f2cb ????						;			 mirrored reading/writing differences.	This is more a 
     29  f2cb ????						;			 readability issue, and binary compatibility with disassembled
     30  f2cb ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  f2cb ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  f2cb ????						;			 which was broken by the use of segments in this file, as
     33  f2cb ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  f2cb ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  f2cb ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  f2cb ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  f2cb ????						;						   it is safe to leave it undefined, and the base address will
     38  f2cb ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  f2cb ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  f2cb ????						;			  - register definitions are now generated through assignment
     41  f2cb ????						;			    in uninitialised segments.	This allows a changeable base
     42  f2cb ????						;			    address architecture.
     43  f2cb ????						; 1.0	22/MAR/2003		Initial release
     44  f2cb ????
     45  f2cb ????
     46  f2cb ????						;-------------------------------------------------------------------------------
     47  f2cb ????
     48  f2cb ????						; TIA_BASE_ADDRESS
     49  f2cb ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  f2cb ????						; Normally 0, the base address should (externally, before including this file)
     51  f2cb ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  f2cb ????						; The reason is that this bankswitching scheme treats any access to locations
     53  f2cb ????						; < $40 as a bankswitch.
     54  f2cb ????
     55  f2cb ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     56  f2cb ????			  -TIA_BASE_ADDRESS =	0
     57  f2cb ????				      ENDIF
     58  f2cb ????
     59  f2cb ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  f2cb ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  f2cb ????						; *OR* by declaring the label before including this file, eg:
     62  f2cb ????						; TIA_BASE_ADDRESS = $40
     63  f2cb ????						;   include "vcs.h"
     64  f2cb ????
     65  f2cb ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  f2cb ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  f2cb ????						; for the mirrored ROM hardware registers.
     68  f2cb ????
     69  f2cb ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  f2cb ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  f2cb ????						; they defaut to the TIA_BASE_ADDRESS.
     72  f2cb ????
     73  f2cb ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     74  f2cb ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  f2cb ????				      ENDIF
     76  f2cb ????
     77  f2cb ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  f2cb ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  f2cb ????				      ENDIF
     80  f2cb ????
     81  f2cb ????						;-------------------------------------------------------------------------------
     82  f2cb ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE abb (1).asm
------- FILE macro.h LEVEL 2 PASS 3
      0  0000 ????				      include	macro.h
      1  0000 ????						; MACRO.H
      2  0000 ????						; Version 1.09, 05/SEP/2020
      3  0000 ????
      4  0000 ????	       00 6d	   VERSION_MACRO =	109
      5  0000 ????
      6  0000 ????						;
      7  0000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  0000 ????						; The latest version can be found at https://dasm-assembler.github.io/
      9  0000 ????						;
     10  0000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  0000 ????						; It is distributed as a companion machine-specific support package
     12  0000 ????						; for the DASM compiler.
     13  0000 ????						;
     14  0000 ????						; Many thanks to the people who have contributed. If you find an issue with the
     15  0000 ????						; contents, or would like ot add something, please report as an issue at...
     16  0000 ????						; https://github.com/dasm-assembler/dasm/issues
     17  0000 ????
     18  0000 ????
     19  0000 ????						; Latest Revisions...
     20  0000 ????						; 1.09  05/SEP/2020	 - updated license/links
     21  0000 ????
     22  0000 ????						; 1.08  13/JUL/2020	 - added use of LXA to CLEAN_START
     23  0000 ????						; 1.07  19/JAN/2020	 - correction to comment VERTICAL_SYNC
     24  0000 ????						; 1.06  03/SEP/2004	 - nice revision of VERTICAL_SYNC (Edwin Blink)
     25  0000 ????						; 1.05  14/NOV/2003	 - Added VERSION_MACRO equate (which will reflect 100x version #)
     26  0000 ????						;			   This will allow conditional code to verify MACRO.H being
     27  0000 ????						;			   used for code assembly.
     28  0000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     29  0000 ????						;
     30  0000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     31  0000 ????						;
     32  0000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     33  0000 ????						;			   (standardised macro for vertical synch code)
     34  0000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     35  0000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     36  0000 ????						; 1.0	22/MAR/2003		Initial release
     37  0000 ????
     38  0000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     39  0000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     40  0000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     41  0000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     42  0000 ????						;   registers and require them to be defined first).
     43  0000 ????
     44  0000 ????						; Available macros...
     45  0000 ????						;   SLEEP n		 - sleep for n cycles
     46  0000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     47  0000 ????						;   CLEAN_START	 - set machine to known state on startup
     48  0000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     49  0000 ????
     50  0000 ????						;-------------------------------------------------------------------------------
     51  0000 ????						; SLEEP duration
     52  0000 ????						; Original author: Thomas Jentzsch
     53  0000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     54  0000 ????						; useful for code where precise timing is required.
     55  0000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     56  0000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     57  0000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     58  0000 ????
     59  0000 ????				      MAC	sleep
     60  0000 ????			   .CYCLES    SET	{1}
     61  0000 ????
     62  0000 ????				      IF	.CYCLES < 2
     63  0000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     64  0000 ????				      ERR
     65  0000 ????				      ENDIF
     66  0000 ????
     67  0000 ????				      IF	.CYCLES & 1
     68  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     69  0000 ????				      nop	0
     70  0000 ????				      ELSE
     71  0000 ????				      bit	VSYNC
     72  0000 ????				      ENDIF
     73  0000 ????			   .CYCLES    SET	.CYCLES - 3
     74  0000 ????				      ENDIF
     75  0000 ????
     76  0000 ????				      REPEAT	.CYCLES / 2
     77  0000 ????				      nop
     78  0000 ????				      REPEND
     79  0000 ????				      ENDM		;usage: SLEEP n (n>1)
     80  0000 ????
     81  0000 ????						;-------------------------------------------------------------------------------
     82  0000 ????						; VERTICAL_SYNC
     83  0000 ????						; revised version by Edwin Blink -- saves bytes!
     84  0000 ????						; Inserts the code required for a proper 3 scanline vertical sync sequence
     85  0000 ????						; Note: Alters the accumulator
     86  0000 ????
     87  0000 ????						; OUT: A = 0
     88  0000 ????
     89  0000 ????				      MAC	vertical_sync
     90  0000 ????				      lda	#%1110	; each '1' bits generate a VSYNC ON line (bits 1..3)
     91  0000 ????			   .VSLP1     sta	WSYNC	; 1st '0' bit resets Vsync, 2nd '0' bit exit loop
     92  0000 ????				      sta	VSYNC
     93  0000 ????				      lsr
     94  0000 ????				      bne	.VSLP1	; branch until VYSNC has been reset
     95  0000 ????				      ENDM
     96  0000 ????
     97  0000 ????						;-------------------------------------------------------------------------------
     98  0000 ????						; CLEAN_START
     99  0000 ????						; Original author: Andrew Davie
    100  0000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    101  0000 ????						; Sets stack pointer to $FF, and all registers to 0
    102  0000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    103  0000 ????						; Use as very first section of code on boot (ie: at reset)
    104  0000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    105  0000 ????
    106  0000 ????				      MAC	clean_start
    107  0000 ????				      sei
    108  0000 ????				      cld
    109  0000 ????
    110  0000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
    111  0000 ????				      lxa	#0
    112  0000 ????				      ELSE
    113  0000 ????				      ldx	#0
    114  0000 ????				      txa
    115  0000 ????				      ENDIF
    116  0000 ????				      tay
    117  0000 ????			   .CLEAR_STACK dex
    118  0000 ????				      txs
    119  0000 ????				      pha
    120  0000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  0000 ????
    122  0000 ????				      ENDM
    123  0000 ????
    124  0000 ????						;-------------------------------------------------------
    125  0000 ????						; SET_POINTER
    126  0000 ????						; Original author: Manuel Rotschkar
    127  0000 ????						;
    128  0000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  0000 ????						;
    130  0000 ????						; Usage: SET_POINTER pointer, address
    131  0000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  0000 ????						;
    133  0000 ????						; Note: Alters the accumulator, NZ flags
    134  0000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  0000 ????						; IN 2: absolute address
    136  0000 ????
    137  0000 ????				      MAC	set_pointer
    138  0000 ????			   .POINTER   SET	{1}
    139  0000 ????			   .ADDRESS   SET	{2}
    140  0000 ????
    141  0000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  0000 ????				      STA	.POINTER	; Store in pointer
    143  0000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  0000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  0000 ????
    146  0000 ????				      ENDM
    147  0000 ????
    148  0000 ????						;-------------------------------------------------------
    149  0000 ????						; BOUNDARY byte#
    150  0000 ????						; Original author: Denis Debro (borrowed from Bob Smith / Thomas)
    151  0000 ????						;
    152  0000 ????						; Push data to a certain position inside a page and keep count of how
    153  0000 ????						; many free bytes the programmer will have.
    154  0000 ????						;
    155  0000 ????						; eg: BOUNDARY 5    ; position at byte #5 in page
    156  0000 ????
    157  0000 ????			   .FREE_BYTES SET	0
    158  0000 ????				      MAC	boundary
    159  0000 ????				      REPEAT	256
    160  0000 ????				      IF	<. % {1} = 0
    161  0000 ????				      MEXIT
    162  0000 ????				      ELSE
    163  0000 ????			   .FREE_BYTES SET	.FREE_BYTES + 1
    164  0000 ????				      .byte	$00
    165  0000 ????				      ENDIF
    166  0000 ????				      REPEND
    167  0000 ????				      ENDM
    168  0000 ????
    169  0000 ????
    170  0000 ????						; EOF
------- FILE abb (1).asm
      6  0000 ????
      7  0000 ????
      8  0000 ????				      seg	CONSTS
      9  0000					      org	$0
     10  0000
     11  f2cb ????				      seg	CODE
     12  f000					      org	$F000, 0
     13  f000
     14  f000				   LogoFrame
      0  f000					      VERTICAL_SYNC
      1  f000		       a9 0e		      lda	#%1110
      2  f002		       85 02	   .VSLP1     sta	WSYNC
      3  f004		       85 00		      sta	VSYNC
      4  f006		       4a		      lsr
      5  f007		       d0 f9		      bne	.VSLP1
     16  f009
     17  f009							; 37 lines of VBLANK
     18  f009		       a9 2c		      lda	#44	; 2	 (5)
     19  f00b		       8d 96 02 	      sta	TIM64T	; 3	 (8)
      0  f00e					      sleep	5	; 5	 (13)
      1  f00e				   .CYCLES    SET	5
      2  f00e
      3  f00e				  -	      IF	.CYCLES < 2
      4  f00e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f00e				  -	      ERR
      6  f00e					      ENDIF
      7  f00e
      8  f00e					      IF	.CYCLES & 1
      9  f00e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f00e		       04 00		      nop	0
     11  f010				  -	      ELSE
     12  f010				  -	      bit	VSYNC
     13  f010					      ENDIF
     14  f010				   .CYCLES    SET	.CYCLES - 3
     15  f010					      ENDIF
     16  f010
     17  f010					      REPEAT	.CYCLES / 2
     18  f010		       ea		      nop
     19  f011					      REPEND
     21  f011		       a9 01		      lda	#1	; 2	 (15)
     22  f013		       85 25		      sta	VDELP0	; 3	 (18)
     23  f015		       85 26		      sta	VDELP1	; 3	 (21)
     24  f017		       a9 a6		      lda	#$A6	; 2	 (23)
     25  f019		       85 08		      sta	COLUPF	; 3	 (26)
      0  f01b					      sleep	10	; 10	 (36)
      1  f01b				   .CYCLES    SET	10
      2  f01b
      3  f01b				  -	      IF	.CYCLES < 2
      4  f01b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f01b				  -	      ERR
      6  f01b					      ENDIF
      7  f01b
      8  f01b				  -	      IF	.CYCLES & 1
      9  f01b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f01b				  -	      nop	0
     11  f01b				  -	      ELSE
     12  f01b				  -	      bit	VSYNC
     13  f01b				  -	      ENDIF
     14  f01b				  -.CYCLES    SET	.CYCLES - 3
     15  f01b					      ENDIF
     16  f01b
     17  f01b					      REPEAT	.CYCLES / 2
     18  f01b		       ea		      nop
     17  f01b					      REPEND
     18  f01c		       ea		      nop
     17  f01c					      REPEND
     18  f01d		       ea		      nop
     17  f01d					      REPEND
     18  f01e		       ea		      nop
     17  f01e					      REPEND
     18  f01f		       ea		      nop
     19  f020					      REPEND
     27  f020		       85 10		      sta	RESP0	; 3	 (39)
     28  f022		       85 11		      sta	RESP1	; 3	 (42)
     29  f024		       a9 20		      lda	#$20	; 2	 (44)
     30  f026		       85 21		      sta	HMP1	; 2	 (47)
     31  f028		       a9 10		      lda	#$10	; 2	 (49)
     32  f02a		       85 20		      sta	HMP0	; 3	 (52)
     33  f02c		       a9 33		      lda	#$33	; 2	 (54)
     34  f02e		       85 04		      sta	NUSIZ0	; 3	 (57)
     35  f030		       85 05		      STA	NUSIZ1	; 3	 (60)
     36  f032		       85 02		      sta	WSYNC
     37  f034		       85 2a		      sta	HMOVE
     38  f036		       a9 00		      lda	#logo_color
     39  f038		       85 06		      sta	COLUP0
     40  f03a		       85 07		      sta	COLUP1
     41  f03c
     42  f03c
     43  f03c				   LogoWaitVBlank
     44  f03c		       ad 84 02 	      lda	INTIM
     45  f03f		       d0 fb		      bne	LogoWaitVBlank	; loop until timer expires
     46  f041		       85 02		      sta	WSYNC
     47  f043
     48  f043							; disable VBLANK
     49  f043		       a9 00		      lda	#0
     50  f045		       85 01		      sta	VBLANK
     51  f047
     52  f047							; waste 51 scanlines
     53  f047							;	ldx #51
     54  f047		       a2 60		      ldx	#(96 - (logo_height/2))
     55  f049				   LogoVisibleScreen
     56  f049		       85 02		      sta	WSYNC
     57  f04b		       ca		      dex
     58  f04c		       d0 fb		      bne	LogoVisibleScreen
     59  f04e
     60  f04e
     61  f04e
     62  f04e							; Blank Screen and Set Playfield
     63  f04e
     64  f04e		       a0 ff		      ldy	#logo_height-1
     65  f050		       b9 80 f2 	      lda	logo_colors,y
     66  f053		       85 06		      sta	COLUP0
     67  f055		       85 07		      sta	COLUP1
     68  f057
     69  f057		       4c 5a f0 	      jmp	LogoLoop
     70  f05a
     71  f05a				  -	      if	>. != >[.+(logo_kernel_size)]
     72  f05a				  -	      align	256
     73  f05a					      endif
     74  f05a
     75  f05a
     76  f05a				   LogoLoop
     77  f05a		       85 02		      sta	WSYNC	; 3	 (0)
     78  f05c		       8c 00 00 	      sty	temp1	; 3	 (3)
     79  f05f		       b9 be f0 	      lda	logo_0,y	; 4	 (7)
     80  f062		       85 1b		      sta	GRP0	; 3	 (10) 0 -> [GRP0]
     81  f064		       b9 09 f1 	      lda	logo_1,y	; 4	 (14)
     82  f067		       85 1c		      sta	GRP1	; 3	 (17) 1 -> [GRP1] ; 0 -> GRP0
     83  f069		       b9 54 f1 	      lda	logo_2,y	; 4	 (21)
     84  f06c		       85 1b		      sta	GRP0	; 3	 (24*) 2 -> [GRP0] ; 1 -> GRP1
     85  f06e		       be ea f1 	      ldx	logo_4,y	; 4	 (28) 4 -> X
     86  f071		       b9 35 f2 	      lda	logo_5,y	; 4	 (32)
     87  f074		       8d 00 00 	      sta	temp2	; 3	 (35)
     88  f077		       b9 9f f1 	      lda	logo_3,y	; 4	 (39) 3 -> A
     89  f07a		       ac 00 00 	      ldy	temp2	; 3	 (42) 5 -> Y
     90  f07d		       85 1c		      sta	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
     91  f07f		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
     92  f081		       84 1c		      sty	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
     93  f083		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
     94  f085		       ac 00 00 	      ldy	temp1	; 3	 (57)
     95  f088		       b9 7f f2 	      lda	logo_colors-1,y	; 4	 (61)
     96  f08b		       85 06		      sta	COLUP0	; 3	 (64)
     97  f08d		       85 07		      sta	COLUP1	; 3	 (67)
     98  f08f		       88		      dey		; 2	 (69)
     99  f090		       10 c8		      bpl	LogoLoop	; 3	 (72)
    100  f090		       00 38	   logo_kernel_size =	* - LogoLoop
    101  f092
    102  f092		       a0 00		      ldy	#0
    103  f094		       84 1b		      sty	GRP0
    104  f096		       84 1c		      sty	GRP1
    105  f098		       84 1b		      sty	GRP0
    106  f09a		       84 1c		      sty	GRP1
    107  f09c							;	ldx #40
    108  f09c		       a2 5f		      ldx	#((96 - (logo_height/2))-1)
    109  f09e				   LogoGap
    110  f09e		       85 02		      sta	WSYNC
    111  f0a0		       ca		      dex		; 2	 (2)
    112  f0a1		       d0 fb		      bne	LogoGap	; 2	 (4)
    113  f0a3
    114  f0a3				   LogoOverscanStart
    115  f0a3							; Enable VBLANK
    116  f0a3		       a9 02		      lda	#2
    117  f0a5		       85 01		      sta	VBLANK
    118  f0a7							; overscan
    119  f0a7		       a2 23		      ldx	#35
    120  f0a9		       8e 96 02 	      stx	TIM64T
    121  f0ac		       ad 84 02 	      lda	INTIM
    122  f0af		       18		      clc
    123  f0b0		       69 80		      adc	#128
    124  f0b2		       8d 96 02 	      sta	TIM64T
    125  f0b5		       60		      rts
    126  f0b6
    127  f0b6				   .drawlogo
    128  f0b6		       ad 84 02 	      lda	INTIM
    129  f0b9		       30 fb		      bmi	.drawlogo	; loop until timer expires
    130  f0bb		       4c 00 f0 	      jmp	LogoFrame
    131  f0be
    132  f0be
    133  f0be				  -	      if	>. != >[.+(logo_height)]
    134  f0be				  -	      align	256
    135  f0be					      endif
    136  f0be
    137  f0be							; Paste image information here
    138  f0be
    139  f0be				   logo_0
    140  f0be		       00		      BYTE.b	%00000000
    141  f0bf		       00		      BYTE.b	%00000000
    142  f0c0		       00		      BYTE.b	%00000000
    143  f0c1		       00		      BYTE.b	%00000000
    144  f0c2		       00		      BYTE.b	%00000000
    145  f0c3		       01		      BYTE.b	%00000001
    146  f0c4		       00		      BYTE.b	%00000000
    147  f0c5		       01		      BYTE.b	%00000001
    148  f0c6		       00		      BYTE.b	%00000000
    149  f0c7		       00		      BYTE.b	%00000000
    150  f0c8		       00		      BYTE.b	%00000000
    151  f0c9		       00		      BYTE.b	%00000000
    152  f0ca		       00		      BYTE.b	%00000000
    153  f0cb		       00		      BYTE.b	%00000000
    154  f0cc		       00		      BYTE.b	%00000000
    155  f0cd		       00		      BYTE.b	%00000000
    156  f0ce		       00		      BYTE.b	%00000000
    157  f0cf		       00		      BYTE.b	%00000000
    158  f0d0		       00		      BYTE.b	%00000000
    159  f0d1		       00		      BYTE.b	%00000000
    160  f0d2		       00		      BYTE.b	%00000000
    161  f0d3		       00		      BYTE.b	%00000000
    162  f0d4		       00		      BYTE.b	%00000000
    163  f0d5		       00		      BYTE.b	%00000000
    164  f0d6		       00		      BYTE.b	%00000000
    165  f0d7		       00		      BYTE.b	%00000000
    166  f0d8		       00		      BYTE.b	%00000000
    167  f0d9		       00		      BYTE.b	%00000000
    168  f0da		       00		      BYTE.b	%00000000
    169  f0db		       00		      BYTE.b	%00000000
    170  f0dc		       00		      BYTE.b	%00000000
    171  f0dd		       00		      BYTE.b	%00000000
    172  f0de		       00		      BYTE.b	%00000000
    173  f0df		       00		      BYTE.b	%00000000
    174  f0e0		       00		      BYTE.b	%00000000
    175  f0e1		       00		      BYTE.b	%00000000
    176  f0e2		       00		      BYTE.b	%00000000
    177  f0e3		       00		      BYTE.b	%00000000
    178  f0e4		       00		      BYTE.b	%00000000
    179  f0e5		       00		      BYTE.b	%00000000
    180  f0e6		       00		      BYTE.b	%00000000
    181  f0e7		       00		      BYTE.b	%00000000
    182  f0e8		       00		      BYTE.b	%00000000
    183  f0e9		       00		      BYTE.b	%00000000
    184  f0ea		       00		      BYTE.b	%00000000
    185  f0eb		       00		      BYTE.b	%00000000
    186  f0ec		       00		      BYTE.b	%00000000
    187  f0ed		       00		      BYTE.b	%00000000
    188  f0ee		       00		      BYTE.b	%00000000
    189  f0ef		       00		      BYTE.b	%00000000
    190  f0f0		       00		      BYTE.b	%00000000
    191  f0f1		       00		      BYTE.b	%00000000
    192  f0f2		       00		      BYTE.b	%00000000
    193  f0f3		       00		      BYTE.b	%00000000
    194  f0f4		       00		      BYTE.b	%00000000
    195  f0f5		       00		      BYTE.b	%00000000
    196  f0f6		       00		      BYTE.b	%00000000
    197  f0f7		       00		      BYTE.b	%00000000
    198  f0f8		       00		      BYTE.b	%00000000
    199  f0f9		       00		      BYTE.b	%00000000
    200  f0fa		       00		      BYTE.b	%00000000
    201  f0fb		       00		      BYTE.b	%00000000
    202  f0fc		       00		      BYTE.b	%00000000
    203  f0fd		       00		      BYTE.b	%00000000
    204  f0fe		       00		      BYTE.b	%00000000
    205  f0ff		       00		      BYTE.b	%00000000
    206  f100		       00		      BYTE.b	%00000000
    207  f101		       00		      BYTE.b	%00000000
    208  f102		       00		      BYTE.b	%00000000
    209  f103		       00		      BYTE.b	%00000000
    210  f104		       00		      BYTE.b	%00000000
    211  f105		       00		      BYTE.b	%00000000
    212  f106		       00		      BYTE.b	%00000000
    213  f107		       00		      BYTE.b	%00000000
    214  f108		       00		      BYTE.b	%00000000
    215  f109
    216  f109
    217  f109				  -	      if	>. != >[.+(logo_height)]
    218  f109				  -	      align	256
    219  f109					      endif
    220  f109
    221  f109				   logo_1
    222  f109		       00		      BYTE.b	%00000000
    223  f10a		       00		      BYTE.b	%00000000
    224  f10b		       00		      BYTE.b	%00000000
    225  f10c		       00		      BYTE.b	%00000000
    226  f10d		       00		      BYTE.b	%00000000
    227  f10e		       89		      BYTE.b	%10001001
    228  f10f		       55		      BYTE.b	%01010101
    229  f110		       95		      BYTE.b	%10010101
    230  f111		       c9		      BYTE.b	%11001001
    231  f112		       00		      BYTE.b	%00000000
    232  f113		       00		      BYTE.b	%00000000
    233  f114		       00		      BYTE.b	%00000000
    234  f115		       02		      BYTE.b	%00000010
    235  f116		       02		      BYTE.b	%00000010
    236  f117		       03		      BYTE.b	%00000011
    237  f118		       03		      BYTE.b	%00000011
    238  f119		       00		      BYTE.b	%00000000
    239  f11a		       00		      BYTE.b	%00000000
    240  f11b		       00		      BYTE.b	%00000000
    241  f11c		       2a		      BYTE.b	%00101010
    242  f11d		       2a		      BYTE.b	%00101010
    243  f11e		       3a		      BYTE.b	%00111010
    244  f11f		       3a		      BYTE.b	%00111010
    245  f120		       00		      BYTE.b	%00000000
    246  f121		       00		      BYTE.b	%00000000
    247  f122		       00		      BYTE.b	%00000000
    248  f123		       00		      BYTE.b	%00000000
    249  f124		       00		      BYTE.b	%00000000
    250  f125		       00		      BYTE.b	%00000000
    251  f126		       00		      BYTE.b	%00000000
    252  f127		       00		      BYTE.b	%00000000
    253  f128		       00		      BYTE.b	%00000000
    254  f129		       00		      BYTE.b	%00000000
    255  f12a		       00		      BYTE.b	%00000000
    256  f12b		       00		      BYTE.b	%00000000
    257  f12c		       00		      BYTE.b	%00000000
    258  f12d		       00		      BYTE.b	%00000000
    259  f12e		       01		      BYTE.b	%00000001
    260  f12f		       01		      BYTE.b	%00000001
    261  f130		       01		      BYTE.b	%00000001
    262  f131		       00		      BYTE.b	%00000000
    263  f132		       00		      BYTE.b	%00000000
    264  f133		       00		      BYTE.b	%00000000
    265  f134		       00		      BYTE.b	%00000000
    266  f135		       00		      BYTE.b	%00000000
    267  f136		       00		      BYTE.b	%00000000
    268  f137		       00		      BYTE.b	%00000000
    269  f138		       00		      BYTE.b	%00000000
    270  f139		       00		      BYTE.b	%00000000
    271  f13a		       00		      BYTE.b	%00000000
    272  f13b		       00		      BYTE.b	%00000000
    273  f13c		       00		      BYTE.b	%00000000
    274  f13d		       00		      BYTE.b	%00000000
    275  f13e		       00		      BYTE.b	%00000000
    276  f13f		       00		      BYTE.b	%00000000
    277  f140		       00		      BYTE.b	%00000000
    278  f141		       00		      BYTE.b	%00000000
    279  f142		       00		      BYTE.b	%00000000
    280  f143		       00		      BYTE.b	%00000000
    281  f144		       00		      BYTE.b	%00000000
    282  f145		       00		      BYTE.b	%00000000
    283  f146		       ce		      BYTE.b	%11001110
    284  f147		       a8		      BYTE.b	%10101000
    285  f148		       ac		      BYTE.b	%10101100
    286  f149		       ce		      BYTE.b	%11001110
    287  f14a		       00		      BYTE.b	%00000000
    288  f14b		       00		      BYTE.b	%00000000
    289  f14c		       00		      BYTE.b	%00000000
    290  f14d		       00		      BYTE.b	%00000000
    291  f14e		       00		      BYTE.b	%00000000
    292  f14f		       00		      BYTE.b	%00000000
    293  f150		       00		      BYTE.b	%00000000
    294  f151		       00		      BYTE.b	%00000000
    295  f152		       00		      BYTE.b	%00000000
    296  f153		       00		      BYTE.b	%00000000
    297  f154
    298  f154
    299  f154				  -	      if	>. != >[.+(logo_height)]
    300  f154				  -	      align	256
    301  f154					      endif
    302  f154
    303  f154				   logo_2
    304  f154		       00		      BYTE.b	%00000000
    305  f155		       00		      BYTE.b	%00000000
    306  f156		       00		      BYTE.b	%00000000
    307  f157		       00		      BYTE.b	%00000000
    308  f158		       00		      BYTE.b	%00000000
    309  f159		       09		      BYTE.b	%00001001
    310  f15a		       09		      BYTE.b	%00001001
    311  f15b		       89		      BYTE.b	%10001001
    312  f15c		       dd		      BYTE.b	%11011101
    313  f15d		       00		      BYTE.b	%00000000
    314  f15e		       00		      BYTE.b	%00000000
    315  f15f		       00		      BYTE.b	%00000000
    316  f160		       aa		      BYTE.b	%10101010
    317  f161		       ac		      BYTE.b	%10101100
    318  f162		       aa		      BYTE.b	%10101010
    319  f163		       ac		      BYTE.b	%10101100
    320  f164		       00		      BYTE.b	%00000000
    321  f165		       00		      BYTE.b	%00000000
    322  f166		       00		      BYTE.b	%00000000
    323  f167		       c9		      BYTE.b	%11001001
    324  f168		       ab		      BYTE.b	%10101011
    325  f169		       ad		      BYTE.b	%10101101
    326  f16a		       c9		      BYTE.b	%11001001
    327  f16b		       00		      BYTE.b	%00000000
    328  f16c		       00		      BYTE.b	%00000000
    329  f16d		       03		      BYTE.b	%00000011
    330  f16e		       0f		      BYTE.b	%00001111
    331  f16f		       1f		      BYTE.b	%00011111
    332  f170		       3f		      BYTE.b	%00111111
    333  f171		       3f		      BYTE.b	%00111111
    334  f172		       7f		      BYTE.b	%01111111
    335  f173		       7f		      BYTE.b	%01111111
    336  f174		       ff		      BYTE.b	%11111111
    337  f175		       ff		      BYTE.b	%11111111
    338  f176		       ff		      BYTE.b	%11111111
    339  f177		       ff		      BYTE.b	%11111111
    340  f178		       ff		      BYTE.b	%11111111
    341  f179		       ff		      BYTE.b	%11111111
    342  f17a		       ff		      BYTE.b	%11111111
    343  f17b		       ff		      BYTE.b	%11111111
    344  f17c		       ff		      BYTE.b	%11111111
    345  f17d		       ff		      BYTE.b	%11111111
    346  f17e		       ff		      BYTE.b	%11111111
    347  f17f		       ff		      BYTE.b	%11111111
    348  f180		       ff		      BYTE.b	%11111111
    349  f181		       7f		      BYTE.b	%01111111
    350  f182		       7f		      BYTE.b	%01111111
    351  f183		       3f		      BYTE.b	%00111111
    352  f184		       3f		      BYTE.b	%00111111
    353  f185		       1f		      BYTE.b	%00011111
    354  f186		       0f		      BYTE.b	%00001111
    355  f187		       03		      BYTE.b	%00000011
    356  f188		       00		      BYTE.b	%00000000
    357  f189		       00		      BYTE.b	%00000000
    358  f18a		       00		      BYTE.b	%00000000
    359  f18b		       00		      BYTE.b	%00000000
    360  f18c		       00		      BYTE.b	%00000000
    361  f18d		       00		      BYTE.b	%00000000
    362  f18e		       00		      BYTE.b	%00000000
    363  f18f		       00		      BYTE.b	%00000000
    364  f190		       00		      BYTE.b	%00000000
    365  f191		       aa		      BYTE.b	%10101010
    366  f192		       ae		      BYTE.b	%10101110
    367  f193		       ea		      BYTE.b	%11101010
    368  f194		       e4		      BYTE.b	%11100100
    369  f195		       00		      BYTE.b	%00000000
    370  f196		       00		      BYTE.b	%00000000
    371  f197		       00		      BYTE.b	%00000000
    372  f198		       00		      BYTE.b	%00000000
    373  f199		       00		      BYTE.b	%00000000
    374  f19a		       00		      BYTE.b	%00000000
    375  f19b		       00		      BYTE.b	%00000000
    376  f19c		       00		      BYTE.b	%00000000
    377  f19d		       00		      BYTE.b	%00000000
    378  f19e		       00		      BYTE.b	%00000000
    379  f19f
    380  f19f
    381  f19f				  -	      if	>. != >[.+(logo_height)]
    382  f19f				  -	      align	256
    383  f19f					      endif
    384  f19f
    385  f19f				   logo_3
    386  f19f		       00		      BYTE.b	%00000000
    387  f1a0		       00		      BYTE.b	%00000000
    388  f1a1		       00		      BYTE.b	%00000000
    389  f1a2		       00		      BYTE.b	%00000000
    390  f1a3		       00		      BYTE.b	%00000000
    391  f1a4		       c9		      BYTE.b	%11001001
    392  f1a5		       d5		      BYTE.b	%11010101
    393  f1a6		       55		      BYTE.b	%01010101
    394  f1a7		       49		      BYTE.b	%01001001
    395  f1a8		       00		      BYTE.b	%00000000
    396  f1a9		       00		      BYTE.b	%00000000
    397  f1aa		       00		      BYTE.b	%00000000
    398  f1ab		       a6		      BYTE.b	%10100110
    399  f1ac		       ea		      BYTE.b	%11101010
    400  f1ad		       a8		      BYTE.b	%10101000
    401  f1ae		       46		      BYTE.b	%01000110
    402  f1af		       00		      BYTE.b	%00000000
    403  f1b0		       00		      BYTE.b	%00000000
    404  f1b1		       00		      BYTE.b	%00000000
    405  f1b2		       4d		      BYTE.b	%01001101
    406  f1b3		       55		      BYTE.b	%01010101
    407  f1b4		       51		      BYTE.b	%01010001
    408  f1b5		       4d		      BYTE.b	%01001101
    409  f1b6		       00		      BYTE.b	%00000000
    410  f1b7		       00		      BYTE.b	%00000000
    411  f1b8		       e0		      BYTE.b	%11100000
    412  f1b9		       f8		      BYTE.b	%11111000
    413  f1ba		       fc		      BYTE.b	%11111100
    414  f1bb		       fe		      BYTE.b	%11111110
    415  f1bc		       fe		      BYTE.b	%11111110
    416  f1bd		       ff		      BYTE.b	%11111111
    417  f1be		       ff		      BYTE.b	%11111111
    418  f1bf		       ff		      BYTE.b	%11111111
    419  f1c0		       ff		      BYTE.b	%11111111
    420  f1c1		       ff		      BYTE.b	%11111111
    421  f1c2		       ff		      BYTE.b	%11111111
    422  f1c3		       ff		      BYTE.b	%11111111
    423  f1c4		       ff		      BYTE.b	%11111111
    424  f1c5		       ff		      BYTE.b	%11111111
    425  f1c6		       ff		      BYTE.b	%11111111
    426  f1c7		       ff		      BYTE.b	%11111111
    427  f1c8		       ff		      BYTE.b	%11111111
    428  f1c9		       ff		      BYTE.b	%11111111
    429  f1ca		       ff		      BYTE.b	%11111111
    430  f1cb		       ff		      BYTE.b	%11111111
    431  f1cc		       ff		      BYTE.b	%11111111
    432  f1cd		       ff		      BYTE.b	%11111111
    433  f1ce		       fe		      BYTE.b	%11111110
    434  f1cf		       fe		      BYTE.b	%11111110
    435  f1d0		       fc		      BYTE.b	%11111100
    436  f1d1		       f8		      BYTE.b	%11111000
    437  f1d2		       e0		      BYTE.b	%11100000
    438  f1d3		       00		      BYTE.b	%00000000
    439  f1d4		       00		      BYTE.b	%00000000
    440  f1d5		       00		      BYTE.b	%00000000
    441  f1d6		       00		      BYTE.b	%00000000
    442  f1d7		       00		      BYTE.b	%00000000
    443  f1d8		       00		      BYTE.b	%00000000
    444  f1d9		       00		      BYTE.b	%00000000
    445  f1da		       00		      BYTE.b	%00000000
    446  f1db		       00		      BYTE.b	%00000000
    447  f1dc		       ae		      BYTE.b	%10101110
    448  f1dd		       a8		      BYTE.b	%10101000
    449  f1de		       cc		      BYTE.b	%11001100
    450  f1df		       ae		      BYTE.b	%10101110
    451  f1e0		       00		      BYTE.b	%00000000
    452  f1e1		       00		      BYTE.b	%00000000
    453  f1e2		       00		      BYTE.b	%00000000
    454  f1e3		       00		      BYTE.b	%00000000
    455  f1e4		       00		      BYTE.b	%00000000
    456  f1e5		       00		      BYTE.b	%00000000
    457  f1e6		       00		      BYTE.b	%00000000
    458  f1e7		       00		      BYTE.b	%00000000
    459  f1e8		       00		      BYTE.b	%00000000
    460  f1e9		       00		      BYTE.b	%00000000
    461  f1ea
    462  f1ea
    463  f1ea				  -	      if	>. != >[.+(logo_height)]
    464  f1ea				  -	      align	256
    465  f1ea					      endif
    466  f1ea
    467  f1ea				   logo_4
    468  f1ea		       00		      BYTE.b	%00000000
    469  f1eb		       00		      BYTE.b	%00000000
    470  f1ec		       00		      BYTE.b	%00000000
    471  f1ed		       00		      BYTE.b	%00000000
    472  f1ee		       00		      BYTE.b	%00000000
    473  f1ef		       55		      BYTE.b	%01010101
    474  f1f0		       94		      BYTE.b	%10010100
    475  f1f1		       59		      BYTE.b	%01011001
    476  f1f2		       94		      BYTE.b	%10010100
    477  f1f3		       00		      BYTE.b	%00000000
    478  f1f4		       00		      BYTE.b	%00000000
    479  f1f5		       00		      BYTE.b	%00000000
    480  f1f6		       e0		      BYTE.b	%11100000
    481  f1f7		       80		      BYTE.b	%10000000
    482  f1f8		       c0		      BYTE.b	%11000000
    483  f1f9		       e0		      BYTE.b	%11100000
    484  f1fa		       00		      BYTE.b	%00000000
    485  f1fb		       00		      BYTE.b	%00000000
    486  f1fc		       00		      BYTE.b	%00000000
    487  f1fd		       48		      BYTE.b	%01001000
    488  f1fe		       48		      BYTE.b	%01001000
    489  f1ff		       c8		      BYTE.b	%11001000
    490  f200		       5c		      BYTE.b	%01011100
    491  f201		       00		      BYTE.b	%00000000
    492  f202		       00		      BYTE.b	%00000000
    493  f203		       00		      BYTE.b	%00000000
    494  f204		       00		      BYTE.b	%00000000
    495  f205		       00		      BYTE.b	%00000000
    496  f206		       00		      BYTE.b	%00000000
    497  f207		       00		      BYTE.b	%00000000
    498  f208		       00		      BYTE.b	%00000000
    499  f209		       00		      BYTE.b	%00000000
    500  f20a		       80		      BYTE.b	%10000000
    501  f20b		       80		      BYTE.b	%10000000
    502  f20c		       80		      BYTE.b	%10000000
    503  f20d		       80		      BYTE.b	%10000000
    504  f20e		       80		      BYTE.b	%10000000
    505  f20f		       c0		      BYTE.b	%11000000
    506  f210		       c0		      BYTE.b	%11000000
    507  f211		       c0		      BYTE.b	%11000000
    508  f212		       80		      BYTE.b	%10000000
    509  f213		       80		      BYTE.b	%10000000
    510  f214		       80		      BYTE.b	%10000000
    511  f215		       80		      BYTE.b	%10000000
    512  f216		       80		      BYTE.b	%10000000
    513  f217		       00		      BYTE.b	%00000000
    514  f218		       00		      BYTE.b	%00000000
    515  f219		       00		      BYTE.b	%00000000
    516  f21a		       00		      BYTE.b	%00000000
    517  f21b		       00		      BYTE.b	%00000000
    518  f21c		       00		      BYTE.b	%00000000
    519  f21d		       00		      BYTE.b	%00000000
    520  f21e		       00		      BYTE.b	%00000000
    521  f21f		       00		      BYTE.b	%00000000
    522  f220		       00		      BYTE.b	%00000000
    523  f221		       00		      BYTE.b	%00000000
    524  f222		       00		      BYTE.b	%00000000
    525  f223		       00		      BYTE.b	%00000000
    526  f224		       00		      BYTE.b	%00000000
    527  f225		       00		      BYTE.b	%00000000
    528  f226		       00		      BYTE.b	%00000000
    529  f227		       39		      BYTE.b	%00111001
    530  f228		       29		      BYTE.b	%00101001
    531  f229		       39		      BYTE.b	%00111001
    532  f22a		       32		      BYTE.b	%00110010
    533  f22b		       00		      BYTE.b	%00000000
    534  f22c		       00		      BYTE.b	%00000000
    535  f22d		       00		      BYTE.b	%00000000
    536  f22e		       00		      BYTE.b	%00000000
    537  f22f		       00		      BYTE.b	%00000000
    538  f230		       00		      BYTE.b	%00000000
    539  f231		       00		      BYTE.b	%00000000
    540  f232		       00		      BYTE.b	%00000000
    541  f233		       00		      BYTE.b	%00000000
    542  f234		       00		      BYTE.b	%00000000
    543  f235
    544  f235
    545  f235				  -	      if	>. != >[.+(logo_height)]
    546  f235				  -	      align	256
    547  f235					      endif
    548  f235
    549  f235				   logo_5
    550  f235		       00		      BYTE.b	%00000000
    551  f236		       00		      BYTE.b	%00000000
    552  f237		       00		      BYTE.b	%00000000
    553  f238		       00		      BYTE.b	%00000000
    554  f239		       00		      BYTE.b	%00000000
    555  f23a		       80		      BYTE.b	%10000000
    556  f23b		       40		      BYTE.b	%01000000
    557  f23c		       80		      BYTE.b	%10000000
    558  f23d		       c0		      BYTE.b	%11000000
    559  f23e		       00		      BYTE.b	%00000000
    560  f23f		       00		      BYTE.b	%00000000
    561  f240		       00		      BYTE.b	%00000000
    562  f241		       00		      BYTE.b	%00000000
    563  f242		       00		      BYTE.b	%00000000
    564  f243		       00		      BYTE.b	%00000000
    565  f244		       00		      BYTE.b	%00000000
    566  f245		       00		      BYTE.b	%00000000
    567  f246		       00		      BYTE.b	%00000000
    568  f247		       00		      BYTE.b	%00000000
    569  f248		       00		      BYTE.b	%00000000
    570  f249		       00		      BYTE.b	%00000000
    571  f24a		       00		      BYTE.b	%00000000
    572  f24b		       00		      BYTE.b	%00000000
    573  f24c		       00		      BYTE.b	%00000000
    574  f24d		       00		      BYTE.b	%00000000
    575  f24e		       00		      BYTE.b	%00000000
    576  f24f		       00		      BYTE.b	%00000000
    577  f250		       00		      BYTE.b	%00000000
    578  f251		       00		      BYTE.b	%00000000
    579  f252		       00		      BYTE.b	%00000000
    580  f253		       00		      BYTE.b	%00000000
    581  f254		       00		      BYTE.b	%00000000
    582  f255		       00		      BYTE.b	%00000000
    583  f256		       00		      BYTE.b	%00000000
    584  f257		       00		      BYTE.b	%00000000
    585  f258		       00		      BYTE.b	%00000000
    586  f259		       00		      BYTE.b	%00000000
    587  f25a		       00		      BYTE.b	%00000000
    588  f25b		       00		      BYTE.b	%00000000
    589  f25c		       00		      BYTE.b	%00000000
    590  f25d		       00		      BYTE.b	%00000000
    591  f25e		       00		      BYTE.b	%00000000
    592  f25f		       00		      BYTE.b	%00000000
    593  f260		       00		      BYTE.b	%00000000
    594  f261		       00		      BYTE.b	%00000000
    595  f262		       00		      BYTE.b	%00000000
    596  f263		       00		      BYTE.b	%00000000
    597  f264		       00		      BYTE.b	%00000000
    598  f265		       00		      BYTE.b	%00000000
    599  f266		       00		      BYTE.b	%00000000
    600  f267		       00		      BYTE.b	%00000000
    601  f268		       00		      BYTE.b	%00000000
    602  f269		       00		      BYTE.b	%00000000
    603  f26a		       00		      BYTE.b	%00000000
    604  f26b		       00		      BYTE.b	%00000000
    605  f26c		       00		      BYTE.b	%00000000
    606  f26d		       00		      BYTE.b	%00000000
    607  f26e		       00		      BYTE.b	%00000000
    608  f26f		       00		      BYTE.b	%00000000
    609  f270		       00		      BYTE.b	%00000000
    610  f271		       00		      BYTE.b	%00000000
    611  f272		       00		      BYTE.b	%00000000
    612  f273		       00		      BYTE.b	%00000000
    613  f274		       00		      BYTE.b	%00000000
    614  f275		       80		      BYTE.b	%10000000
    615  f276		       00		      BYTE.b	%00000000
    616  f277		       00		      BYTE.b	%00000000
    617  f278		       00		      BYTE.b	%00000000
    618  f279		       00		      BYTE.b	%00000000
    619  f27a		       00		      BYTE.b	%00000000
    620  f27b		       00		      BYTE.b	%00000000
    621  f27c		       00		      BYTE.b	%00000000
    622  f27d		       00		      BYTE.b	%00000000
    623  f27e		       00		      BYTE.b	%00000000
    624  f27f		       00		      BYTE.b	%00000000
    625  f280
    626  f280
    627  f280				  -	      if	>. != >[.+(logo_height)]
    628  f280				  -	      align	256
    629  f280					      endif
    630  f280
    631  f280				   logo_colors
    632  f280		       0e		      .byte.b	$0E
    633  f281		       0e		      .byte.b	$0E
    634  f282		       0e		      .byte.b	$0E
    635  f283		       0e		      .byte.b	$0E
    636  f284		       0e		      .byte.b	$0E
    637  f285		       0e		      .byte.b	$0E
    638  f286		       0a		      .byte.b	$0A
    639  f287		       06		      .byte.b	$06
    640  f288		       02		      .byte.b	$02
    641  f289		       0e		      .byte.b	$0E
    642  f28a		       0e		      .byte.b	$0E
    643  f28b		       0e		      .byte.b	$0E
    644  f28c		       0e		      .byte.b	$0E
    645  f28d		       0a		      .byte.b	$0A
    646  f28e		       06		      .byte.b	$06
    647  f28f		       02		      .byte.b	$02
    648  f290		       08		      .byte.b	$08
    649  f291		       08		      .byte.b	$08
    650  f292		       06		      .byte.b	$06
    651  f293		       0e		      .byte.b	$0E
    652  f294		       0a		      .byte.b	$0A
    653  f295		       06		      .byte.b	$06
    654  f296		       02		      .byte.b	$02
    655  f297		       0c		      .byte.b	$0C
    656  f298		       0e		      .byte.b	$0E
    657  f299		       0c		      .byte.b	$0C
    658  f29a		       0c		      .byte.b	$0C
    659  f29b		       0c		      .byte.b	$0C
    660  f29c		       0c		      .byte.b	$0C
    661  f29d		       0a		      .byte.b	$0A
    662  f29e		       0a		      .byte.b	$0A
    663  f29f		       0a		      .byte.b	$0A
    664  f2a0		       0a		      .byte.b	$0A
    665  f2a1		       0a		      .byte.b	$0A
    666  f2a2		       08		      .byte.b	$08
    667  f2a3		       08		      .byte.b	$08
    668  f2a4		       08		      .byte.b	$08
    669  f2a5		       08		      .byte.b	$08
    670  f2a6		       06		      .byte.b	$06
    671  f2a7		       06		      .byte.b	$06
    672  f2a8		       06		      .byte.b	$06
    673  f2a9		       06		      .byte.b	$06
    674  f2aa		       06		      .byte.b	$06
    675  f2ab		       04		      .byte.b	$04
    676  f2ac		       04		      .byte.b	$04
    677  f2ad		       04		      .byte.b	$04
    678  f2ae		       04		      .byte.b	$04
    679  f2af		       02		      .byte.b	$02
    680  f2b0		       02		      .byte.b	$02
    681  f2b1		       02		      .byte.b	$02
    682  f2b2		       02		      .byte.b	$02
    683  f2b3		       02		      .byte.b	$02
    684  f2b4		       02		      .byte.b	$02
    685  f2b5		       02		      .byte.b	$02
    686  f2b6		       02		      .byte.b	$02
    687  f2b7		       02		      .byte.b	$02
    688  f2b8		       0e		      .byte.b	$0E
    689  f2b9		       0e		      .byte.b	$0E
    690  f2ba		       0e		      .byte.b	$0E
    691  f2bb		       0e		      .byte.b	$0E
    692  f2bc		       0e		      .byte.b	$0E
    693  f2bd		       0e		      .byte.b	$0E
    694  f2be		       0e		      .byte.b	$0E
    695  f2bf		       0e		      .byte.b	$0E
    696  f2c0		       0e		      .byte.b	$0E
    697  f2c1		       0e		      .byte.b	$0E
    698  f2c2		       0e		      .byte.b	$0E
    699  f2c3		       0e		      .byte.b	$0E
    700  f2c4		       0e		      .byte.b	$0E
    701  f2c5		       0e		      .byte.b	$0E
    702  f2c6		       0e		      .byte.b	$0E
    703  f2c7		       0e		      .byte.b	$0E
    704  f2c8		       0e		      .byte.b	$0E
    705  f2c9		       0e		      .byte.b	$0E
    706  f2ca		       0e		      .byte.b	$0E
    707  f2cb
    708  f2cb
